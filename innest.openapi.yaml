openapi: 3.x
info:
  version: 0.0.0
  title: Inngest API
  license:
    name: MIT
servers:
  - url: 'https://inn.gs'
    description: Inngest Production Server
  - url: 'http://127.0.0.1:8288'
    description: Local Server
paths:
  /health:
    get:
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
  '/e/{key}':
    post:
      operationId: send_event
      summary: Send Event
      description: Send an event to Inngest for processing.
      parameters:
        - name: inngest_key
          in: path
          description: Inngest Key
          required: true
          schema:
            type: string
        - name: event
          in: body
          description: Event
          required: true
          schema:
            $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAPIResponse'
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    description: Internal ID generated by Inngest for each event.
                status:
                  type: integer
                  description: The HTTP status code of the response.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
    parameters:
      - schema:
          type: string
        name: key
        in: path
        required: true
components:
  schemas:
    APIResponse:
      title: API Response
      type: object
      properties:
        status:
          description: Status Code of the API response
          type: integer
        message:
          description: Message of the API response
          type: string
        error:
          description: 'Error message of the API response, if any'
          type: string
      required:
        - status
        - message
    Event:
      title: Event
      type: object
      properties:
        name:
          description: 'Name represents the name of the event. We recommend the following simple format: "noun.action". For example, this may be "signup.new", "payment.succeeded", "email.sent", "post.viewed". Name is required.'
          type: string
        data:
          description: 'Data is a key-value map of data belonging to the event. This should include all relevant data. For example, a "signup.new" event may include the user''s email, their plan information, the signup method, etc.'
          type: object
          additionalProperties: true
        user:
          description: 'User is a key-value map of data belonging to the user that authored the event. This data will be upserted into the contact store. We match the user via one of two fields: "external_id" and "email", defined as consts within this package. If these fields are present in this map the attributes specified here will be updated within Inngest, and the event will be attributed to this contact.'
          type: object
          additionalProperties: true
        ts:
          description: 'Timestamp is the time the event occured at *millisecond* (not nanosecond) precision. This defaults to the time the event is received if left blank. Inngest does not guarantee that events are processed within the order specified by this field. However, we do guarantee that user data is stored correctly according to this timestamp. For example,  if there two events set the same user attribute, the event with the latest timestamp is guaranteed to set the user attributes correctly.'
          type: integer
        v:
          description: 'Version represents the event''s version. Versions can be used to denote when the structure of an event changes over time. Versions typically change when the keys in `Data` change, allowing you to keep the same event name (eg. "signup.new") as fields change within data over time. We recommend the versioning scheme "YYYY-MM-DD.XX", where .XX increments: "2021-03-19.01".'
          type: string
      required:
        - name
    EventAPIResponse:
      title: EventAPIResponse
      x-stoplight:
        id: x5adbssyr0j3g
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
        status:
          type: string
        error:
          type: string
      required:
        - ids
        - status
