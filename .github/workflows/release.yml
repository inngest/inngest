name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  check-release-type:
    runs-on: ubuntu-latest
    outputs:
      prerelease: ${{ steps.check.outputs.prerelease }}
    steps:
      - name: Check if prerelease
        id: check
        run: |
          prerelease=$(echo ${{ github.ref_name }} | awk -F '-' '{print $2}' | awk -F '.' '{print $1}')
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
  goreleaser:
    runs-on: ubuntu-latest
    needs: [check-release-type]
    if: needs.check-release-type.outputs.prerelease == ''
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.2
      - name: Set sha
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Set tag
        id: tag
        run: echo "tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: "~> 2"
          args: release --clean --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  npm:
    runs-on: ubuntu-latest
    needs: [check-release-type]
    defaults:
      run:
        shell: bash
        working-directory: npm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node/npm
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install npm dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Release to npm
        run: |
          npm config set git-tag-version false
          npm version ${{ github.ref_name }}

          if [ -z "${{ needs.check-release-type.outputs.prerelease }}" ]; then
            npm publish --access public
          else
            npm publish --tag ${{ needs.check-release-type.outputs.prerelease }} --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
