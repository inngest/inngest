type Query {
  apps(filter: AppsFilterV1): [App!]!
	app(id: UUID!): App

  stream(query: StreamQuery!): [StreamItem!]!

  # Get an individual event
  event(query: EventQuery!): Event

  # Get all events sent
  events(query: EventsQuery!): [Event!]

  eventV2(id: ULID!): EventV2!

  eventsV2(
    first: Int! = 40
    after: String
    filter: EventsFilter!
  ): EventsConnection!

  functionBySlug(query: FunctionQuery!): Function

  # Get all functions registered
  functions: [Function!]

  # Get an individual function run
  functionRun(query: FunctionRunQuery!): FunctionRun

  runs(
    first: Int! = 100
    after: String
    orderBy: [RunsV2OrderBy!]!
    filter: RunsFilterV2!
  ): RunsV2Connection!
  # runsMetrics(filter: RunsFilterV2!): MetricsResponse!
  run(runID: String!): FunctionRunV2
  runTraceSpanOutputByID(outputID: String!): RunTraceSpanOutput!
  runTrigger(runID: String!): RunTraceTrigger!

  workerConnections(
      first: Int! = 100
      after: String
      orderBy: [ConnectV1WorkerConnectionsOrderBy!]!
      filter: ConnectV1WorkerConnectionsFilter!
    ): ConnectV1WorkerConnectionsConnection!
	workerConnection(connectionId: ULID!): ConnectV1WorkerConnection
}

input ActionVersionQuery {
  dsn: String!
  versionMajor: Int
  versionMinor: Int
}

input EventQuery {
  workspaceId: ID! = "local"
  eventId: ID!
}

input EventsQuery {
  workspaceId: ID! = "local"
  lastEventId: ID
}

input FunctionQuery {
  workspaceId: ID! = "local"
  functionSlug: String!
}

input FunctionRunQuery {
  workspaceId: ID! = "local"
  functionRunId: ID!
}

input FunctionRunsQuery {
  workspaceId: ID! = "local"
}

input StreamQuery {
  # after allows you to query for items after an ID. If not provided this
  # defaults to the most recent items in the stream, eg now.
  after: ID
  # before allows you to receive items in a stream before an ID.
  # This is useful as you can add the last stream ID as the before
  # field, ensuring that only new items are received.
  before: ID
  limit: Int! = 20
  includeInternalEvents: Boolean
}

input EventsFilter {
  eventNames: [String!]
  from: Time!
  includeInternalEvents: Boolean! = false

  # CEL query string.
  query: String

  until: Time
}
