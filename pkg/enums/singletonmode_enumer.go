// Code generated by "enumer -trimprefix=SingletonMode -type=SingletonMode -transform=snake -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _SingletonModeName = "skipcancel"

var _SingletonModeIndex = [...]uint8{0, 4, 10}

const _SingletonModeLowerName = "skipcancel"

func (i SingletonMode) String() string {
	if i < 0 || i >= SingletonMode(len(_SingletonModeIndex)-1) {
		return fmt.Sprintf("SingletonMode(%d)", i)
	}
	return _SingletonModeName[_SingletonModeIndex[i]:_SingletonModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SingletonModeNoOp() {
	var x [1]struct{}
	_ = x[SingletonModeSkip-(0)]
	_ = x[SingletonModeCancel-(1)]
}

var _SingletonModeValues = []SingletonMode{SingletonModeSkip, SingletonModeCancel}

var _SingletonModeNameToValueMap = map[string]SingletonMode{
	_SingletonModeName[0:4]:       SingletonModeSkip,
	_SingletonModeLowerName[0:4]:  SingletonModeSkip,
	_SingletonModeName[4:10]:      SingletonModeCancel,
	_SingletonModeLowerName[4:10]: SingletonModeCancel,
}

var _SingletonModeNames = []string{
	_SingletonModeName[0:4],
	_SingletonModeName[4:10],
}

// SingletonModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SingletonModeString(s string) (SingletonMode, error) {
	if val, ok := _SingletonModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SingletonModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SingletonMode values", s)
}

// SingletonModeValues returns all values of the enum
func SingletonModeValues() []SingletonMode {
	return _SingletonModeValues
}

// SingletonModeStrings returns a slice of all String values of the enum
func SingletonModeStrings() []string {
	strs := make([]string, len(_SingletonModeNames))
	copy(strs, _SingletonModeNames)
	return strs
}

// IsASingletonMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SingletonMode) IsASingletonMode() bool {
	for _, v := range _SingletonModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SingletonMode
func (i SingletonMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SingletonMode
func (i *SingletonMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SingletonMode should be a string, got %s", data)
	}

	var err error
	*i, err = SingletonModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SingletonMode
func (i SingletonMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SingletonMode
func (i *SingletonMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = SingletonModeString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for SingletonMode
func (i SingletonMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for SingletonMode
func (i *SingletonMode) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("SingletonMode should be a string, got %T", value)
	}

	var err error
	*i, err = SingletonModeString(str)
	return err
}
