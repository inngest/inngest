// Code generated by "enumer -trimprefix=ReplayRunStatus -type=ReplayRunStatus -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _ReplayRunStatusName = "All"

var _ReplayRunStatusIndex = [...]uint8{0, 3}

const _ReplayRunStatusLowerName = "all"

func (i ReplayRunStatus) String() string {
	if i < 0 || i >= ReplayRunStatus(len(_ReplayRunStatusIndex)-1) {
		return fmt.Sprintf("ReplayRunStatus(%d)", i)
	}
	return _ReplayRunStatusName[_ReplayRunStatusIndex[i]:_ReplayRunStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ReplayRunStatusNoOp() {
	var x [1]struct{}
	_ = x[ReplayRunStatusAll-(0)]
}

var _ReplayRunStatusValues = []ReplayRunStatus{ReplayRunStatusAll}

var _ReplayRunStatusNameToValueMap = map[string]ReplayRunStatus{
	_ReplayRunStatusName[0:3]:      ReplayRunStatusAll,
	_ReplayRunStatusLowerName[0:3]: ReplayRunStatusAll,
}

var _ReplayRunStatusNames = []string{
	_ReplayRunStatusName[0:3],
}

// ReplayRunStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReplayRunStatusString(s string) (ReplayRunStatus, error) {
	if val, ok := _ReplayRunStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ReplayRunStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ReplayRunStatus values", s)
}

// ReplayRunStatusValues returns all values of the enum
func ReplayRunStatusValues() []ReplayRunStatus {
	return _ReplayRunStatusValues
}

// ReplayRunStatusStrings returns a slice of all String values of the enum
func ReplayRunStatusStrings() []string {
	strs := make([]string, len(_ReplayRunStatusNames))
	copy(strs, _ReplayRunStatusNames)
	return strs
}

// IsAReplayRunStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ReplayRunStatus) IsAReplayRunStatus() bool {
	for _, v := range _ReplayRunStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ReplayRunStatus
func (i ReplayRunStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ReplayRunStatus
func (i *ReplayRunStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ReplayRunStatus should be a string, got %s", data)
	}

	var err error
	*i, err = ReplayRunStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ReplayRunStatus
func (i ReplayRunStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ReplayRunStatus
func (i *ReplayRunStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = ReplayRunStatusString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for ReplayRunStatus
func (i ReplayRunStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for ReplayRunStatus
func (i *ReplayRunStatus) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("ReplayRunStatus should be a string, got %T", value)
	}

	var err error
	*i, err = ReplayRunStatusString(str)
	return err
}
