// Code generated by "enumer -trimprefix=TraceRunOrder -type=TraceRunOrder -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TraceRunOrderName = "DescAsc"

var _TraceRunOrderIndex = [...]uint8{0, 4, 7}

const _TraceRunOrderLowerName = "descasc"

func (i TraceRunOrder) String() string {
	if i < 0 || i >= TraceRunOrder(len(_TraceRunOrderIndex)-1) {
		return fmt.Sprintf("TraceRunOrder(%d)", i)
	}
	return _TraceRunOrderName[_TraceRunOrderIndex[i]:_TraceRunOrderIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TraceRunOrderNoOp() {
	var x [1]struct{}
	_ = x[TraceRunOrderDesc-(0)]
	_ = x[TraceRunOrderAsc-(1)]
}

var _TraceRunOrderValues = []TraceRunOrder{TraceRunOrderDesc, TraceRunOrderAsc}

var _TraceRunOrderNameToValueMap = map[string]TraceRunOrder{
	_TraceRunOrderName[0:4]:      TraceRunOrderDesc,
	_TraceRunOrderLowerName[0:4]: TraceRunOrderDesc,
	_TraceRunOrderName[4:7]:      TraceRunOrderAsc,
	_TraceRunOrderLowerName[4:7]: TraceRunOrderAsc,
}

var _TraceRunOrderNames = []string{
	_TraceRunOrderName[0:4],
	_TraceRunOrderName[4:7],
}

// TraceRunOrderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TraceRunOrderString(s string) (TraceRunOrder, error) {
	if val, ok := _TraceRunOrderNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TraceRunOrderNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TraceRunOrder values", s)
}

// TraceRunOrderValues returns all values of the enum
func TraceRunOrderValues() []TraceRunOrder {
	return _TraceRunOrderValues
}

// TraceRunOrderStrings returns a slice of all String values of the enum
func TraceRunOrderStrings() []string {
	strs := make([]string, len(_TraceRunOrderNames))
	copy(strs, _TraceRunOrderNames)
	return strs
}

// IsATraceRunOrder returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TraceRunOrder) IsATraceRunOrder() bool {
	for _, v := range _TraceRunOrderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TraceRunOrder
func (i TraceRunOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TraceRunOrder
func (i *TraceRunOrder) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TraceRunOrder should be a string, got %s", data)
	}

	var err error
	*i, err = TraceRunOrderString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TraceRunOrder
func (i TraceRunOrder) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TraceRunOrder
func (i *TraceRunOrder) UnmarshalText(text []byte) error {
	var err error
	*i, err = TraceRunOrderString(string(text))
	return err
}
