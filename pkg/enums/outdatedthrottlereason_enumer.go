// Code generated by "enumer -trimprefix=OutdatedThrottleReason -type=OutdatedThrottleReason -transform=snake -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OutdatedThrottleReasonName = "nonemissing_item_throttlemissing_constraintkey_expression_mismatchmissing_key_expression_hash"

var _OutdatedThrottleReasonIndex = [...]uint8{0, 4, 25, 43, 66, 93}

const _OutdatedThrottleReasonLowerName = "nonemissing_item_throttlemissing_constraintkey_expression_mismatchmissing_key_expression_hash"

func (i OutdatedThrottleReason) String() string {
	if i < 0 || i >= OutdatedThrottleReason(len(_OutdatedThrottleReasonIndex)-1) {
		return fmt.Sprintf("OutdatedThrottleReason(%d)", i)
	}
	return _OutdatedThrottleReasonName[_OutdatedThrottleReasonIndex[i]:_OutdatedThrottleReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OutdatedThrottleReasonNoOp() {
	var x [1]struct{}
	_ = x[OutdatedThrottleReasonNone-(0)]
	_ = x[OutdatedThrottleReasonMissingItemThrottle-(1)]
	_ = x[OutdatedThrottleReasonMissingConstraint-(2)]
	_ = x[OutdatedThrottleReasonKeyExpressionMismatch-(3)]
	_ = x[OutdatedThrottleReasonMissingKeyExpressionHash-(4)]
}

var _OutdatedThrottleReasonValues = []OutdatedThrottleReason{OutdatedThrottleReasonNone, OutdatedThrottleReasonMissingItemThrottle, OutdatedThrottleReasonMissingConstraint, OutdatedThrottleReasonKeyExpressionMismatch, OutdatedThrottleReasonMissingKeyExpressionHash}

var _OutdatedThrottleReasonNameToValueMap = map[string]OutdatedThrottleReason{
	_OutdatedThrottleReasonName[0:4]:        OutdatedThrottleReasonNone,
	_OutdatedThrottleReasonLowerName[0:4]:   OutdatedThrottleReasonNone,
	_OutdatedThrottleReasonName[4:25]:       OutdatedThrottleReasonMissingItemThrottle,
	_OutdatedThrottleReasonLowerName[4:25]:  OutdatedThrottleReasonMissingItemThrottle,
	_OutdatedThrottleReasonName[25:43]:      OutdatedThrottleReasonMissingConstraint,
	_OutdatedThrottleReasonLowerName[25:43]: OutdatedThrottleReasonMissingConstraint,
	_OutdatedThrottleReasonName[43:66]:      OutdatedThrottleReasonKeyExpressionMismatch,
	_OutdatedThrottleReasonLowerName[43:66]: OutdatedThrottleReasonKeyExpressionMismatch,
	_OutdatedThrottleReasonName[66:93]:      OutdatedThrottleReasonMissingKeyExpressionHash,
	_OutdatedThrottleReasonLowerName[66:93]: OutdatedThrottleReasonMissingKeyExpressionHash,
}

var _OutdatedThrottleReasonNames = []string{
	_OutdatedThrottleReasonName[0:4],
	_OutdatedThrottleReasonName[4:25],
	_OutdatedThrottleReasonName[25:43],
	_OutdatedThrottleReasonName[43:66],
	_OutdatedThrottleReasonName[66:93],
}

// OutdatedThrottleReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OutdatedThrottleReasonString(s string) (OutdatedThrottleReason, error) {
	if val, ok := _OutdatedThrottleReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OutdatedThrottleReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OutdatedThrottleReason values", s)
}

// OutdatedThrottleReasonValues returns all values of the enum
func OutdatedThrottleReasonValues() []OutdatedThrottleReason {
	return _OutdatedThrottleReasonValues
}

// OutdatedThrottleReasonStrings returns a slice of all String values of the enum
func OutdatedThrottleReasonStrings() []string {
	strs := make([]string, len(_OutdatedThrottleReasonNames))
	copy(strs, _OutdatedThrottleReasonNames)
	return strs
}

// IsAOutdatedThrottleReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OutdatedThrottleReason) IsAOutdatedThrottleReason() bool {
	for _, v := range _OutdatedThrottleReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OutdatedThrottleReason
func (i OutdatedThrottleReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OutdatedThrottleReason
func (i *OutdatedThrottleReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OutdatedThrottleReason should be a string, got %s", data)
	}

	var err error
	*i, err = OutdatedThrottleReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for OutdatedThrottleReason
func (i OutdatedThrottleReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OutdatedThrottleReason
func (i *OutdatedThrottleReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = OutdatedThrottleReasonString(string(text))
	return err
}
