// Code generated by "enumer -trimprefix=AppMethod -type=AppMethod -json -gqlgen -sql -text -transform=snake"; DO NOT EDIT.

package enums

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _AppMethodName = "serveconnect"

var _AppMethodIndex = [...]uint8{0, 5, 12}

const _AppMethodLowerName = "serveconnect"

func (i AppMethod) String() string {
	if i < 0 || i >= AppMethod(len(_AppMethodIndex)-1) {
		return fmt.Sprintf("AppMethod(%d)", i)
	}
	return _AppMethodName[_AppMethodIndex[i]:_AppMethodIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AppMethodNoOp() {
	var x [1]struct{}
	_ = x[AppMethodServe-(0)]
	_ = x[AppMethodConnect-(1)]
}

var _AppMethodValues = []AppMethod{AppMethodServe, AppMethodConnect}

var _AppMethodNameToValueMap = map[string]AppMethod{
	_AppMethodName[0:5]:       AppMethodServe,
	_AppMethodLowerName[0:5]:  AppMethodServe,
	_AppMethodName[5:12]:      AppMethodConnect,
	_AppMethodLowerName[5:12]: AppMethodConnect,
}

var _AppMethodNames = []string{
	_AppMethodName[0:5],
	_AppMethodName[5:12],
}

// AppMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AppMethodString(s string) (AppMethod, error) {
	if val, ok := _AppMethodNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AppMethodNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AppMethod values", s)
}

// AppMethodValues returns all values of the enum
func AppMethodValues() []AppMethod {
	return _AppMethodValues
}

// AppMethodStrings returns a slice of all String values of the enum
func AppMethodStrings() []string {
	strs := make([]string, len(_AppMethodNames))
	copy(strs, _AppMethodNames)
	return strs
}

// IsAAppMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AppMethod) IsAAppMethod() bool {
	for _, v := range _AppMethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AppMethod
func (i AppMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AppMethod
func (i *AppMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AppMethod should be a string, got %s", data)
	}

	var err error
	*i, err = AppMethodString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AppMethod
func (i AppMethod) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AppMethod
func (i *AppMethod) UnmarshalText(text []byte) error {
	var err error
	*i, err = AppMethodString(string(text))
	return err
}

func (i AppMethod) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AppMethod) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AppMethod: %[1]T(%[1]v)", value)
	}

	val, err := AppMethodString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for AppMethod
func (i AppMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for AppMethod
func (i *AppMethod) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("AppMethod should be a string, got %T", value)
	}

	var err error
	*i, err = AppMethodString(str)
	return err
}
