// Code generated by "enumer -trimprefix=CancellationKind -type=CancellationKind -json -text -transform=snake"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CancellationKindName = "bulk_runrunbacklog"

var _CancellationKindIndex = [...]uint8{0, 8, 11, 18}

const _CancellationKindLowerName = "bulk_runrunbacklog"

func (i CancellationKind) String() string {
	if i < 0 || i >= CancellationKind(len(_CancellationKindIndex)-1) {
		return fmt.Sprintf("CancellationKind(%d)", i)
	}
	return _CancellationKindName[_CancellationKindIndex[i]:_CancellationKindIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CancellationKindNoOp() {
	var x [1]struct{}
	_ = x[CancellationKindBulkRun-(0)]
	_ = x[CancellationKindRun-(1)]
	_ = x[CancellationKindBacklog-(2)]
}

var _CancellationKindValues = []CancellationKind{CancellationKindBulkRun, CancellationKindRun, CancellationKindBacklog}

var _CancellationKindNameToValueMap = map[string]CancellationKind{
	_CancellationKindName[0:8]:        CancellationKindBulkRun,
	_CancellationKindLowerName[0:8]:   CancellationKindBulkRun,
	_CancellationKindName[8:11]:       CancellationKindRun,
	_CancellationKindLowerName[8:11]:  CancellationKindRun,
	_CancellationKindName[11:18]:      CancellationKindBacklog,
	_CancellationKindLowerName[11:18]: CancellationKindBacklog,
}

var _CancellationKindNames = []string{
	_CancellationKindName[0:8],
	_CancellationKindName[8:11],
	_CancellationKindName[11:18],
}

// CancellationKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CancellationKindString(s string) (CancellationKind, error) {
	if val, ok := _CancellationKindNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CancellationKindNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CancellationKind values", s)
}

// CancellationKindValues returns all values of the enum
func CancellationKindValues() []CancellationKind {
	return _CancellationKindValues
}

// CancellationKindStrings returns a slice of all String values of the enum
func CancellationKindStrings() []string {
	strs := make([]string, len(_CancellationKindNames))
	copy(strs, _CancellationKindNames)
	return strs
}

// IsACancellationKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CancellationKind) IsACancellationKind() bool {
	for _, v := range _CancellationKindValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CancellationKind
func (i CancellationKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CancellationKind
func (i *CancellationKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CancellationKind should be a string, got %s", data)
	}

	var err error
	*i, err = CancellationKindString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CancellationKind
func (i CancellationKind) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CancellationKind
func (i *CancellationKind) UnmarshalText(text []byte) error {
	var err error
	*i, err = CancellationKindString(string(text))
	return err
}
