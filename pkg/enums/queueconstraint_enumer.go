// Code generated by "enumer -trimprefix=QueueConstraint -type=QueueConstraint -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _QueueConstraintName = "AccountConcurrencyFunctionConcurrencyCustomConcurrencyKey1CustomConcurrencyKey2"

var _QueueConstraintIndex = [...]uint8{0, 18, 37, 58, 79}

const _QueueConstraintLowerName = "accountconcurrencyfunctionconcurrencycustomconcurrencykey1customconcurrencykey2"

func (i QueueConstraint) String() string {
	i -= 1
	if i < 0 || i >= QueueConstraint(len(_QueueConstraintIndex)-1) {
		return fmt.Sprintf("QueueConstraint(%d)", i+1)
	}
	return _QueueConstraintName[_QueueConstraintIndex[i]:_QueueConstraintIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _QueueConstraintNoOp() {
	var x [1]struct{}
	_ = x[QueueConstraintAccountConcurrency-(1)]
	_ = x[QueueConstraintFunctionConcurrency-(2)]
	_ = x[QueueConstraintCustomConcurrencyKey1-(3)]
	_ = x[QueueConstraintCustomConcurrencyKey2-(4)]
}

var _QueueConstraintValues = []QueueConstraint{QueueConstraintAccountConcurrency, QueueConstraintFunctionConcurrency, QueueConstraintCustomConcurrencyKey1, QueueConstraintCustomConcurrencyKey2}

var _QueueConstraintNameToValueMap = map[string]QueueConstraint{
	_QueueConstraintName[0:18]:       QueueConstraintAccountConcurrency,
	_QueueConstraintLowerName[0:18]:  QueueConstraintAccountConcurrency,
	_QueueConstraintName[18:37]:      QueueConstraintFunctionConcurrency,
	_QueueConstraintLowerName[18:37]: QueueConstraintFunctionConcurrency,
	_QueueConstraintName[37:58]:      QueueConstraintCustomConcurrencyKey1,
	_QueueConstraintLowerName[37:58]: QueueConstraintCustomConcurrencyKey1,
	_QueueConstraintName[58:79]:      QueueConstraintCustomConcurrencyKey2,
	_QueueConstraintLowerName[58:79]: QueueConstraintCustomConcurrencyKey2,
}

var _QueueConstraintNames = []string{
	_QueueConstraintName[0:18],
	_QueueConstraintName[18:37],
	_QueueConstraintName[37:58],
	_QueueConstraintName[58:79],
}

// QueueConstraintString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func QueueConstraintString(s string) (QueueConstraint, error) {
	if val, ok := _QueueConstraintNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _QueueConstraintNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to QueueConstraint values", s)
}

// QueueConstraintValues returns all values of the enum
func QueueConstraintValues() []QueueConstraint {
	return _QueueConstraintValues
}

// QueueConstraintStrings returns a slice of all String values of the enum
func QueueConstraintStrings() []string {
	strs := make([]string, len(_QueueConstraintNames))
	copy(strs, _QueueConstraintNames)
	return strs
}

// IsAQueueConstraint returns "true" if the value is listed in the enum definition. "false" otherwise
func (i QueueConstraint) IsAQueueConstraint() bool {
	for _, v := range _QueueConstraintValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for QueueConstraint
func (i QueueConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for QueueConstraint
func (i *QueueConstraint) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("QueueConstraint should be a string, got %s", data)
	}

	var err error
	*i, err = QueueConstraintString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for QueueConstraint
func (i QueueConstraint) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for QueueConstraint
func (i *QueueConstraint) UnmarshalText(text []byte) error {
	var err error
	*i, err = QueueConstraintString(string(text))
	return err
}
