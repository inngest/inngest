// Code generated by "enumer -trimprefix=RunStatus -type=RunStatus -json -text"; DO NOT EDIT.

//
package enums

import (
	"encoding/json"
	"fmt"
)

const _RunStatusName = "RunningCompletedFailedCancelled"

var _RunStatusIndex = [...]uint8{0, 7, 16, 22, 31}

func (i RunStatus) String() string {
	if i < 0 || i >= RunStatus(len(_RunStatusIndex)-1) {
		return fmt.Sprintf("RunStatus(%d)", i)
	}
	return _RunStatusName[_RunStatusIndex[i]:_RunStatusIndex[i+1]]
}

var _RunStatusValues = []RunStatus{0, 1, 2, 3}

var _RunStatusNameToValueMap = map[string]RunStatus{
	_RunStatusName[0:7]:   0,
	_RunStatusName[7:16]:  1,
	_RunStatusName[16:22]: 2,
	_RunStatusName[22:31]: 3,
}

// RunStatusFromString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RunStatusFromString(s string) (RunStatus, error) {
	if val, ok := _RunStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RunStatus values", s)
}

// RunStatusValues returns all values of the enum
func RunStatusValues() []RunStatus {
	return _RunStatusValues
}

// IsARunStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RunStatus) IsARunStatus() bool {
	for _, v := range _RunStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RunStatus
func (i RunStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RunStatus
func (i *RunStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RunStatus should be a string, got %s", data)
	}

	var err error
	*i, err = RunStatusFromString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for RunStatus
func (i RunStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for RunStatus
func (i *RunStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = RunStatusFromString(string(text))
	return err
}
