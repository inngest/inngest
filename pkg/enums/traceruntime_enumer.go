// Code generated by "enumer -trimprefix=TraceRunTime -type=TraceRunTime -transform=snake -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TraceRunTimeName = "queued_atstarted_atended_at"

var _TraceRunTimeIndex = [...]uint8{0, 9, 19, 27}

const _TraceRunTimeLowerName = "queued_atstarted_atended_at"

func (i TraceRunTime) String() string {
	if i < 0 || i >= TraceRunTime(len(_TraceRunTimeIndex)-1) {
		return fmt.Sprintf("TraceRunTime(%d)", i)
	}
	return _TraceRunTimeName[_TraceRunTimeIndex[i]:_TraceRunTimeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TraceRunTimeNoOp() {
	var x [1]struct{}
	_ = x[TraceRunTimeQueuedAt-(0)]
	_ = x[TraceRunTimeStartedAt-(1)]
	_ = x[TraceRunTimeEndedAt-(2)]
}

var _TraceRunTimeValues = []TraceRunTime{TraceRunTimeQueuedAt, TraceRunTimeStartedAt, TraceRunTimeEndedAt}

var _TraceRunTimeNameToValueMap = map[string]TraceRunTime{
	_TraceRunTimeName[0:9]:        TraceRunTimeQueuedAt,
	_TraceRunTimeLowerName[0:9]:   TraceRunTimeQueuedAt,
	_TraceRunTimeName[9:19]:       TraceRunTimeStartedAt,
	_TraceRunTimeLowerName[9:19]:  TraceRunTimeStartedAt,
	_TraceRunTimeName[19:27]:      TraceRunTimeEndedAt,
	_TraceRunTimeLowerName[19:27]: TraceRunTimeEndedAt,
}

var _TraceRunTimeNames = []string{
	_TraceRunTimeName[0:9],
	_TraceRunTimeName[9:19],
	_TraceRunTimeName[19:27],
}

// TraceRunTimeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TraceRunTimeString(s string) (TraceRunTime, error) {
	if val, ok := _TraceRunTimeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TraceRunTimeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TraceRunTime values", s)
}

// TraceRunTimeValues returns all values of the enum
func TraceRunTimeValues() []TraceRunTime {
	return _TraceRunTimeValues
}

// TraceRunTimeStrings returns a slice of all String values of the enum
func TraceRunTimeStrings() []string {
	strs := make([]string, len(_TraceRunTimeNames))
	copy(strs, _TraceRunTimeNames)
	return strs
}

// IsATraceRunTime returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TraceRunTime) IsATraceRunTime() bool {
	for _, v := range _TraceRunTimeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TraceRunTime
func (i TraceRunTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TraceRunTime
func (i *TraceRunTime) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TraceRunTime should be a string, got %s", data)
	}

	var err error
	*i, err = TraceRunTimeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TraceRunTime
func (i TraceRunTime) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TraceRunTime
func (i *TraceRunTime) UnmarshalText(text []byte) error {
	var err error
	*i, err = TraceRunTimeString(string(text))
	return err
}
