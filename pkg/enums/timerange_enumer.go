// Code generated by "enumer -trimprefix=Timerange -type=Timerange -json -gql -sql -text -transform=snake"; DO NOT EDIT.

package enums

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
)

const _TimerangeName = "nonehourdayweekmonthyear"

var _TimerangeIndex = [...]uint8{0, 4, 8, 11, 15, 20, 24}

func (i Timerange) String() string {
	if i < 0 || i >= Timerange(len(_TimerangeIndex)-1) {
		return fmt.Sprintf("Timerange(%d)", i)
	}
	return _TimerangeName[_TimerangeIndex[i]:_TimerangeIndex[i+1]]
}

var _TimerangeValues = []Timerange{0, 1, 2, 3, 4, 5}

var _TimerangeNameToValueMap = map[string]Timerange{
	_TimerangeName[0:4]:   0,
	_TimerangeName[4:8]:   1,
	_TimerangeName[8:11]:  2,
	_TimerangeName[11:15]: 3,
	_TimerangeName[15:20]: 4,
	_TimerangeName[20:24]: 5,
}

// TimerangeFromString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TimerangeFromString(s string) (Timerange, error) {
	if val, ok := _TimerangeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Timerange values", s)
}

// TimerangeValues returns all values of the enum
func TimerangeValues() []Timerange {
	return _TimerangeValues
}

// IsATimerange returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Timerange) IsATimerange() bool {
	for _, v := range _TimerangeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Timerange
func (i Timerange) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Timerange
func (i *Timerange) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Timerange should be a string, got %s", data)
	}

	var err error
	*i, err = TimerangeFromString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Timerange
func (i Timerange) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Timerange
func (i *Timerange) UnmarshalText(text []byte) error {
	var err error
	*i, err = TimerangeFromString(string(text))
	return err
}

func (i Timerange) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Timerange) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := TimerangeFromString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i *Timerange) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		bytes, ok := v.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := TimerangeFromString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i Timerange) MarshalGQL(w io.Writer) {
	_, _ = w.Write([]byte(strconv.Quote(i.String())))
}
