// Code generated by "enumer -trimprefix=StepStatus -type=StepStatus -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _StepStatusName = "UnknownScheduledRunningWaitingSleepingInvokingCompletedFailedErroredCancelled"

var _StepStatusIndex = [...]uint8{0, 7, 16, 23, 30, 38, 46, 55, 61, 68, 77}

const _StepStatusLowerName = "unknownscheduledrunningwaitingsleepinginvokingcompletedfailederroredcancelled"

func (i StepStatus) String() string {
	if i < 0 || i >= StepStatus(len(_StepStatusIndex)-1) {
		return fmt.Sprintf("StepStatus(%d)", i)
	}
	return _StepStatusName[_StepStatusIndex[i]:_StepStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StepStatusNoOp() {
	var x [1]struct{}
	_ = x[StepStatusUnknown-(0)]
	_ = x[StepStatusScheduled-(1)]
	_ = x[StepStatusRunning-(2)]
	_ = x[StepStatusWaiting-(3)]
	_ = x[StepStatusSleeping-(4)]
	_ = x[StepStatusInvoking-(5)]
	_ = x[StepStatusCompleted-(6)]
	_ = x[StepStatusFailed-(7)]
	_ = x[StepStatusErrored-(8)]
	_ = x[StepStatusCancelled-(9)]
}

var _StepStatusValues = []StepStatus{StepStatusUnknown, StepStatusScheduled, StepStatusRunning, StepStatusWaiting, StepStatusSleeping, StepStatusInvoking, StepStatusCompleted, StepStatusFailed, StepStatusErrored, StepStatusCancelled}

var _StepStatusNameToValueMap = map[string]StepStatus{
	_StepStatusName[0:7]:        StepStatusUnknown,
	_StepStatusLowerName[0:7]:   StepStatusUnknown,
	_StepStatusName[7:16]:       StepStatusScheduled,
	_StepStatusLowerName[7:16]:  StepStatusScheduled,
	_StepStatusName[16:23]:      StepStatusRunning,
	_StepStatusLowerName[16:23]: StepStatusRunning,
	_StepStatusName[23:30]:      StepStatusWaiting,
	_StepStatusLowerName[23:30]: StepStatusWaiting,
	_StepStatusName[30:38]:      StepStatusSleeping,
	_StepStatusLowerName[30:38]: StepStatusSleeping,
	_StepStatusName[38:46]:      StepStatusInvoking,
	_StepStatusLowerName[38:46]: StepStatusInvoking,
	_StepStatusName[46:55]:      StepStatusCompleted,
	_StepStatusLowerName[46:55]: StepStatusCompleted,
	_StepStatusName[55:61]:      StepStatusFailed,
	_StepStatusLowerName[55:61]: StepStatusFailed,
	_StepStatusName[61:68]:      StepStatusErrored,
	_StepStatusLowerName[61:68]: StepStatusErrored,
	_StepStatusName[68:77]:      StepStatusCancelled,
	_StepStatusLowerName[68:77]: StepStatusCancelled,
}

var _StepStatusNames = []string{
	_StepStatusName[0:7],
	_StepStatusName[7:16],
	_StepStatusName[16:23],
	_StepStatusName[23:30],
	_StepStatusName[30:38],
	_StepStatusName[38:46],
	_StepStatusName[46:55],
	_StepStatusName[55:61],
	_StepStatusName[61:68],
	_StepStatusName[68:77],
}

// StepStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StepStatusString(s string) (StepStatus, error) {
	if val, ok := _StepStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StepStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StepStatus values", s)
}

// StepStatusValues returns all values of the enum
func StepStatusValues() []StepStatus {
	return _StepStatusValues
}

// StepStatusStrings returns a slice of all String values of the enum
func StepStatusStrings() []string {
	strs := make([]string, len(_StepStatusNames))
	copy(strs, _StepStatusNames)
	return strs
}

// IsAStepStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StepStatus) IsAStepStatus() bool {
	for _, v := range _StepStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StepStatus
func (i StepStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StepStatus
func (i *StepStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StepStatus should be a string, got %s", data)
	}

	var err error
	*i, err = StepStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for StepStatus
func (i StepStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for StepStatus
func (i *StepStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = StepStatusString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for StepStatus
func (i StepStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for StepStatus
func (i *StepStatus) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("StepStatus should be a string, got %T", value)
	}

	var err error
	*i, err = StepStatusString(str)
	return err
}
