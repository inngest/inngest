// Code generated by "enumer -trimprefix=HistoryType -type=HistoryType -json -text"; DO NOT EDIT.

//
package enums

import (
	"encoding/json"
	"fmt"
)

const _HistoryTypeName = "NoneFunctionStartedFunctionCompletedFunctionFailedFunctionCancelledStepScheduledStepStartedStepCompletedStepErroredStepFailedStepWaitingStepSleeping"

var _HistoryTypeIndex = [...]uint8{0, 4, 19, 36, 50, 67, 80, 91, 104, 115, 125, 136, 148}

func (i HistoryType) String() string {
	if i < 0 || i >= HistoryType(len(_HistoryTypeIndex)-1) {
		return fmt.Sprintf("HistoryType(%d)", i)
	}
	return _HistoryTypeName[_HistoryTypeIndex[i]:_HistoryTypeIndex[i+1]]
}

var _HistoryTypeValues = []HistoryType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _HistoryTypeNameToValueMap = map[string]HistoryType{
	_HistoryTypeName[0:4]:     0,
	_HistoryTypeName[4:19]:    1,
	_HistoryTypeName[19:36]:   2,
	_HistoryTypeName[36:50]:   3,
	_HistoryTypeName[50:67]:   4,
	_HistoryTypeName[67:80]:   5,
	_HistoryTypeName[80:91]:   6,
	_HistoryTypeName[91:104]:  7,
	_HistoryTypeName[104:115]: 8,
	_HistoryTypeName[115:125]: 9,
	_HistoryTypeName[125:136]: 10,
	_HistoryTypeName[136:148]: 11,
}

// HistoryTypeFromString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HistoryTypeFromString(s string) (HistoryType, error) {
	if val, ok := _HistoryTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HistoryType values", s)
}

// HistoryTypeValues returns all values of the enum
func HistoryTypeValues() []HistoryType {
	return _HistoryTypeValues
}

// IsAHistoryType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HistoryType) IsAHistoryType() bool {
	for _, v := range _HistoryTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HistoryType
func (i HistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HistoryType
func (i *HistoryType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HistoryType should be a string, got %s", data)
	}

	var err error
	*i, err = HistoryTypeFromString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for HistoryType
func (i HistoryType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for HistoryType
func (i *HistoryType) UnmarshalText(text []byte) error {
	var err error
	*i, err = HistoryTypeFromString(string(text))
	return err
}
