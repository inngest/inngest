// Code generated by "enumer -trimprefix=QueueNormalizeReason -type=QueueNormalizeReason -transform=snake -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _QueueNormalizeReasonName = "unchangedthrottle_removedthrottle_key_changedcustom_concurrency_key_count_mismatchcustom_concurrency_key_not_found_on_shadow_partition"

var _QueueNormalizeReasonIndex = [...]uint8{0, 9, 25, 45, 82, 134}

const _QueueNormalizeReasonLowerName = "unchangedthrottle_removedthrottle_key_changedcustom_concurrency_key_count_mismatchcustom_concurrency_key_not_found_on_shadow_partition"

func (i QueueNormalizeReason) String() string {
	if i < 0 || i >= QueueNormalizeReason(len(_QueueNormalizeReasonIndex)-1) {
		return fmt.Sprintf("QueueNormalizeReason(%d)", i)
	}
	return _QueueNormalizeReasonName[_QueueNormalizeReasonIndex[i]:_QueueNormalizeReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _QueueNormalizeReasonNoOp() {
	var x [1]struct{}
	_ = x[QueueNormalizeReasonUnchanged-(0)]
	_ = x[QueueNormalizeReasonThrottleRemoved-(1)]
	_ = x[QueueNormalizeReasonThrottleKeyChanged-(2)]
	_ = x[QueueNormalizeReasonCustomConcurrencyKeyCountMismatch-(3)]
	_ = x[QueueNormalizeReasonCustomConcurrencyKeyNotFoundOnShadowPartition-(4)]
}

var _QueueNormalizeReasonValues = []QueueNormalizeReason{QueueNormalizeReasonUnchanged, QueueNormalizeReasonThrottleRemoved, QueueNormalizeReasonThrottleKeyChanged, QueueNormalizeReasonCustomConcurrencyKeyCountMismatch, QueueNormalizeReasonCustomConcurrencyKeyNotFoundOnShadowPartition}

var _QueueNormalizeReasonNameToValueMap = map[string]QueueNormalizeReason{
	_QueueNormalizeReasonName[0:9]:         QueueNormalizeReasonUnchanged,
	_QueueNormalizeReasonLowerName[0:9]:    QueueNormalizeReasonUnchanged,
	_QueueNormalizeReasonName[9:25]:        QueueNormalizeReasonThrottleRemoved,
	_QueueNormalizeReasonLowerName[9:25]:   QueueNormalizeReasonThrottleRemoved,
	_QueueNormalizeReasonName[25:45]:       QueueNormalizeReasonThrottleKeyChanged,
	_QueueNormalizeReasonLowerName[25:45]:  QueueNormalizeReasonThrottleKeyChanged,
	_QueueNormalizeReasonName[45:82]:       QueueNormalizeReasonCustomConcurrencyKeyCountMismatch,
	_QueueNormalizeReasonLowerName[45:82]:  QueueNormalizeReasonCustomConcurrencyKeyCountMismatch,
	_QueueNormalizeReasonName[82:134]:      QueueNormalizeReasonCustomConcurrencyKeyNotFoundOnShadowPartition,
	_QueueNormalizeReasonLowerName[82:134]: QueueNormalizeReasonCustomConcurrencyKeyNotFoundOnShadowPartition,
}

var _QueueNormalizeReasonNames = []string{
	_QueueNormalizeReasonName[0:9],
	_QueueNormalizeReasonName[9:25],
	_QueueNormalizeReasonName[25:45],
	_QueueNormalizeReasonName[45:82],
	_QueueNormalizeReasonName[82:134],
}

// QueueNormalizeReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func QueueNormalizeReasonString(s string) (QueueNormalizeReason, error) {
	if val, ok := _QueueNormalizeReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _QueueNormalizeReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to QueueNormalizeReason values", s)
}

// QueueNormalizeReasonValues returns all values of the enum
func QueueNormalizeReasonValues() []QueueNormalizeReason {
	return _QueueNormalizeReasonValues
}

// QueueNormalizeReasonStrings returns a slice of all String values of the enum
func QueueNormalizeReasonStrings() []string {
	strs := make([]string, len(_QueueNormalizeReasonNames))
	copy(strs, _QueueNormalizeReasonNames)
	return strs
}

// IsAQueueNormalizeReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i QueueNormalizeReason) IsAQueueNormalizeReason() bool {
	for _, v := range _QueueNormalizeReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for QueueNormalizeReason
func (i QueueNormalizeReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for QueueNormalizeReason
func (i *QueueNormalizeReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("QueueNormalizeReason should be a string, got %s", data)
	}

	var err error
	*i, err = QueueNormalizeReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for QueueNormalizeReason
func (i QueueNormalizeReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for QueueNormalizeReason
func (i *QueueNormalizeReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = QueueNormalizeReasonString(string(text))
	return err
}
