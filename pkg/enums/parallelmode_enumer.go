// Code generated by "enumer -trimprefix=ParallelMode -type=ParallelMode -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ParallelModeName = "NoneWaitRace"

var _ParallelModeIndex = [...]uint8{0, 4, 8, 12}

const _ParallelModeLowerName = "nonewaitrace"

func (i ParallelMode) String() string {
	if i < 0 || i >= ParallelMode(len(_ParallelModeIndex)-1) {
		return fmt.Sprintf("ParallelMode(%d)", i)
	}
	return _ParallelModeName[_ParallelModeIndex[i]:_ParallelModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ParallelModeNoOp() {
	var x [1]struct{}
	_ = x[ParallelModeNone-(0)]
	_ = x[ParallelModeWait-(1)]
	_ = x[ParallelModeRace-(2)]
}

var _ParallelModeValues = []ParallelMode{ParallelModeNone, ParallelModeWait, ParallelModeRace}

var _ParallelModeNameToValueMap = map[string]ParallelMode{
	_ParallelModeName[0:4]:       ParallelModeNone,
	_ParallelModeLowerName[0:4]:  ParallelModeNone,
	_ParallelModeName[4:8]:       ParallelModeWait,
	_ParallelModeLowerName[4:8]:  ParallelModeWait,
	_ParallelModeName[8:12]:      ParallelModeRace,
	_ParallelModeLowerName[8:12]: ParallelModeRace,
}

var _ParallelModeNames = []string{
	_ParallelModeName[0:4],
	_ParallelModeName[4:8],
	_ParallelModeName[8:12],
}

// ParallelModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParallelModeString(s string) (ParallelMode, error) {
	if val, ok := _ParallelModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ParallelModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ParallelMode values", s)
}

// ParallelModeValues returns all values of the enum
func ParallelModeValues() []ParallelMode {
	return _ParallelModeValues
}

// ParallelModeStrings returns a slice of all String values of the enum
func ParallelModeStrings() []string {
	strs := make([]string, len(_ParallelModeNames))
	copy(strs, _ParallelModeNames)
	return strs
}

// IsAParallelMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ParallelMode) IsAParallelMode() bool {
	for _, v := range _ParallelModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ParallelMode
func (i ParallelMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ParallelMode
func (i *ParallelMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ParallelMode should be a string, got %s", data)
	}

	var err error
	*i, err = ParallelModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ParallelMode
func (i ParallelMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ParallelMode
func (i *ParallelMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParallelModeString(string(text))
	return err
}
