// Code generated by "enumer -trimprefix=CancellationCause -type=CancellationCause -json -text -transform=snake"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CancellationCauseName = "noneeventmanualapi"

var _CancellationCauseIndex = [...]uint8{0, 4, 9, 15, 18}

const _CancellationCauseLowerName = "noneeventmanualapi"

func (i CancellationCause) String() string {
	if i < 0 || i >= CancellationCause(len(_CancellationCauseIndex)-1) {
		return fmt.Sprintf("CancellationCause(%d)", i)
	}
	return _CancellationCauseName[_CancellationCauseIndex[i]:_CancellationCauseIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CancellationCauseNoOp() {
	var x [1]struct{}
	_ = x[CancellationCauseNone-(0)]
	_ = x[CancellationCauseEvent-(1)]
	_ = x[CancellationCauseManual-(2)]
	_ = x[CancellationCauseAPI-(3)]
}

var _CancellationCauseValues = []CancellationCause{CancellationCauseNone, CancellationCauseEvent, CancellationCauseManual, CancellationCauseAPI}

var _CancellationCauseNameToValueMap = map[string]CancellationCause{
	_CancellationCauseName[0:4]:        CancellationCauseNone,
	_CancellationCauseLowerName[0:4]:   CancellationCauseNone,
	_CancellationCauseName[4:9]:        CancellationCauseEvent,
	_CancellationCauseLowerName[4:9]:   CancellationCauseEvent,
	_CancellationCauseName[9:15]:       CancellationCauseManual,
	_CancellationCauseLowerName[9:15]:  CancellationCauseManual,
	_CancellationCauseName[15:18]:      CancellationCauseAPI,
	_CancellationCauseLowerName[15:18]: CancellationCauseAPI,
}

var _CancellationCauseNames = []string{
	_CancellationCauseName[0:4],
	_CancellationCauseName[4:9],
	_CancellationCauseName[9:15],
	_CancellationCauseName[15:18],
}

// CancellationCauseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CancellationCauseString(s string) (CancellationCause, error) {
	if val, ok := _CancellationCauseNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CancellationCauseNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CancellationCause values", s)
}

// CancellationCauseValues returns all values of the enum
func CancellationCauseValues() []CancellationCause {
	return _CancellationCauseValues
}

// CancellationCauseStrings returns a slice of all String values of the enum
func CancellationCauseStrings() []string {
	strs := make([]string, len(_CancellationCauseNames))
	copy(strs, _CancellationCauseNames)
	return strs
}

// IsACancellationCause returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CancellationCause) IsACancellationCause() bool {
	for _, v := range _CancellationCauseValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CancellationCause
func (i CancellationCause) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CancellationCause
func (i *CancellationCause) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CancellationCause should be a string, got %s", data)
	}

	var err error
	*i, err = CancellationCauseString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CancellationCause
func (i CancellationCause) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CancellationCause
func (i *CancellationCause) UnmarshalText(text []byte) error {
	var err error
	*i, err = CancellationCauseString(string(text))
	return err
}
