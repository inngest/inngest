// Code generated by "enumer -trimprefix=OptKey -type=OptKey -json -text -transform=title-lower"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OptKeyName = "noneparallelMode"

var _OptKeyIndex = [...]uint8{0, 4, 16}

const _OptKeyLowerName = "noneparallelmode"

func (i OptKey) String() string {
	if i < 0 || i >= OptKey(len(_OptKeyIndex)-1) {
		return fmt.Sprintf("OptKey(%d)", i)
	}
	return _OptKeyName[_OptKeyIndex[i]:_OptKeyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OptKeyNoOp() {
	var x [1]struct{}
	_ = x[OptKeyNone-(0)]
	_ = x[OptKeyParallelMode-(1)]
}

var _OptKeyValues = []OptKey{OptKeyNone, OptKeyParallelMode}

var _OptKeyNameToValueMap = map[string]OptKey{
	_OptKeyName[0:4]:       OptKeyNone,
	_OptKeyLowerName[0:4]:  OptKeyNone,
	_OptKeyName[4:16]:      OptKeyParallelMode,
	_OptKeyLowerName[4:16]: OptKeyParallelMode,
}

var _OptKeyNames = []string{
	_OptKeyName[0:4],
	_OptKeyName[4:16],
}

// OptKeyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OptKeyString(s string) (OptKey, error) {
	if val, ok := _OptKeyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OptKeyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OptKey values", s)
}

// OptKeyValues returns all values of the enum
func OptKeyValues() []OptKey {
	return _OptKeyValues
}

// OptKeyStrings returns a slice of all String values of the enum
func OptKeyStrings() []string {
	strs := make([]string, len(_OptKeyNames))
	copy(strs, _OptKeyNames)
	return strs
}

// IsAOptKey returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OptKey) IsAOptKey() bool {
	for _, v := range _OptKeyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OptKey
func (i OptKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OptKey
func (i *OptKey) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OptKey should be a string, got %s", data)
	}

	var err error
	*i, err = OptKeyString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for OptKey
func (i OptKey) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OptKey
func (i *OptKey) UnmarshalText(text []byte) error {
	var err error
	*i, err = OptKeyString(string(text))
	return err
}
