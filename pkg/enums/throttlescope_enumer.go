// Code generated by "enumer -trimprefix=ThrottleScope -type=ThrottleScope -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _ThrottleScopeName = "FnEnvAccount"

var _ThrottleScopeIndex = [...]uint8{0, 2, 5, 12}

const _ThrottleScopeLowerName = "fnenvaccount"

func (i ThrottleScope) String() string {
	if i < 0 || i >= ThrottleScope(len(_ThrottleScopeIndex)-1) {
		return fmt.Sprintf("ThrottleScope(%d)", i)
	}
	return _ThrottleScopeName[_ThrottleScopeIndex[i]:_ThrottleScopeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ThrottleScopeNoOp() {
	var x [1]struct{}
	_ = x[ThrottleScopeFn-(0)]
	_ = x[ThrottleScopeEnv-(1)]
	_ = x[ThrottleScopeAccount-(2)]
}

var _ThrottleScopeValues = []ThrottleScope{ThrottleScopeFn, ThrottleScopeEnv, ThrottleScopeAccount}

var _ThrottleScopeNameToValueMap = map[string]ThrottleScope{
	_ThrottleScopeName[0:2]:       ThrottleScopeFn,
	_ThrottleScopeLowerName[0:2]:  ThrottleScopeFn,
	_ThrottleScopeName[2:5]:       ThrottleScopeEnv,
	_ThrottleScopeLowerName[2:5]:  ThrottleScopeEnv,
	_ThrottleScopeName[5:12]:      ThrottleScopeAccount,
	_ThrottleScopeLowerName[5:12]: ThrottleScopeAccount,
}

var _ThrottleScopeNames = []string{
	_ThrottleScopeName[0:2],
	_ThrottleScopeName[2:5],
	_ThrottleScopeName[5:12],
}

// ThrottleScopeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ThrottleScopeString(s string) (ThrottleScope, error) {
	if val, ok := _ThrottleScopeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ThrottleScopeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ThrottleScope values", s)
}

// ThrottleScopeValues returns all values of the enum
func ThrottleScopeValues() []ThrottleScope {
	return _ThrottleScopeValues
}

// ThrottleScopeStrings returns a slice of all String values of the enum
func ThrottleScopeStrings() []string {
	strs := make([]string, len(_ThrottleScopeNames))
	copy(strs, _ThrottleScopeNames)
	return strs
}

// IsAThrottleScope returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ThrottleScope) IsAThrottleScope() bool {
	for _, v := range _ThrottleScopeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ThrottleScope
func (i ThrottleScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ThrottleScope
func (i *ThrottleScope) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ThrottleScope should be a string, got %s", data)
	}

	var err error
	*i, err = ThrottleScopeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ThrottleScope
func (i ThrottleScope) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ThrottleScope
func (i *ThrottleScope) UnmarshalText(text []byte) error {
	var err error
	*i, err = ThrottleScopeString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for ThrottleScope
func (i ThrottleScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for ThrottleScope
func (i *ThrottleScope) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("ThrottleScope should be a string, got %T", value)
	}

	var err error
	*i, err = ThrottleScopeString(str)
	return err
}
