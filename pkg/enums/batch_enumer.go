// Code generated by "enumer -trimprefix=Batch -type=Batch -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BatchName = "AppendNewFull"

var _BatchIndex = [...]uint8{0, 6, 9, 13}

const _BatchLowerName = "appendnewfull"

func (i Batch) String() string {
	if i < 0 || i >= Batch(len(_BatchIndex)-1) {
		return fmt.Sprintf("Batch(%d)", i)
	}
	return _BatchName[_BatchIndex[i]:_BatchIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BatchNoOp() {
	var x [1]struct{}
	_ = x[BatchAppend-(0)]
	_ = x[BatchNew-(1)]
	_ = x[BatchFull-(2)]
}

var _BatchValues = []Batch{BatchAppend, BatchNew, BatchFull}

var _BatchNameToValueMap = map[string]Batch{
	_BatchName[0:6]:       BatchAppend,
	_BatchLowerName[0:6]:  BatchAppend,
	_BatchName[6:9]:       BatchNew,
	_BatchLowerName[6:9]:  BatchNew,
	_BatchName[9:13]:      BatchFull,
	_BatchLowerName[9:13]: BatchFull,
}

var _BatchNames = []string{
	_BatchName[0:6],
	_BatchName[6:9],
	_BatchName[9:13],
}

// BatchString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BatchString(s string) (Batch, error) {
	if val, ok := _BatchNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BatchNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Batch values", s)
}

// BatchValues returns all values of the enum
func BatchValues() []Batch {
	return _BatchValues
}

// BatchStrings returns a slice of all String values of the enum
func BatchStrings() []string {
	strs := make([]string, len(_BatchNames))
	copy(strs, _BatchNames)
	return strs
}

// IsABatch returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Batch) IsABatch() bool {
	for _, v := range _BatchValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Batch
func (i Batch) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Batch
func (i *Batch) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Batch should be a string, got %s", data)
	}

	var err error
	*i, err = BatchString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Batch
func (i Batch) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Batch
func (i *Batch) UnmarshalText(text []byte) error {
	var err error
	*i, err = BatchString(string(text))
	return err
}
