// Code generated by "enumer -trimprefix=SkipReason -type=SkipReason -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _SkipReasonName = "NoneFunctionPaused"

var _SkipReasonIndex = [...]uint8{0, 4, 18}

const _SkipReasonLowerName = "nonefunctionpaused"

func (i SkipReason) String() string {
	if i < 0 || i >= SkipReason(len(_SkipReasonIndex)-1) {
		return fmt.Sprintf("SkipReason(%d)", i)
	}
	return _SkipReasonName[_SkipReasonIndex[i]:_SkipReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SkipReasonNoOp() {
	var x [1]struct{}
	_ = x[SkipReasonNone-(0)]
	_ = x[SkipReasonFunctionPaused-(1)]
}

var _SkipReasonValues = []SkipReason{SkipReasonNone, SkipReasonFunctionPaused}

var _SkipReasonNameToValueMap = map[string]SkipReason{
	_SkipReasonName[0:4]:       SkipReasonNone,
	_SkipReasonLowerName[0:4]:  SkipReasonNone,
	_SkipReasonName[4:18]:      SkipReasonFunctionPaused,
	_SkipReasonLowerName[4:18]: SkipReasonFunctionPaused,
}

var _SkipReasonNames = []string{
	_SkipReasonName[0:4],
	_SkipReasonName[4:18],
}

// SkipReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SkipReasonString(s string) (SkipReason, error) {
	if val, ok := _SkipReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SkipReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SkipReason values", s)
}

// SkipReasonValues returns all values of the enum
func SkipReasonValues() []SkipReason {
	return _SkipReasonValues
}

// SkipReasonStrings returns a slice of all String values of the enum
func SkipReasonStrings() []string {
	strs := make([]string, len(_SkipReasonNames))
	copy(strs, _SkipReasonNames)
	return strs
}

// IsASkipReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SkipReason) IsASkipReason() bool {
	for _, v := range _SkipReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SkipReason
func (i SkipReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SkipReason
func (i *SkipReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SkipReason should be a string, got %s", data)
	}

	var err error
	*i, err = SkipReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SkipReason
func (i SkipReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SkipReason
func (i *SkipReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = SkipReasonString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for SkipReason
func (i SkipReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for SkipReason
func (i *SkipReason) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("SkipReason should be a string, got %T", value)
	}

	var err error
	*i, err = SkipReasonString(str)
	return err
}
