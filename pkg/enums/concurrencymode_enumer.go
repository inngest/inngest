// Code generated by "enumer -trimprefix=ConcurrencyMode -type=ConcurrencyMode -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _ConcurrencyModeName = "StepRun"

var _ConcurrencyModeIndex = [...]uint8{0, 4, 7}

const _ConcurrencyModeLowerName = "steprun"

func (i ConcurrencyMode) String() string {
	if i < 0 || i >= ConcurrencyMode(len(_ConcurrencyModeIndex)-1) {
		return fmt.Sprintf("ConcurrencyMode(%d)", i)
	}
	return _ConcurrencyModeName[_ConcurrencyModeIndex[i]:_ConcurrencyModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ConcurrencyModeNoOp() {
	var x [1]struct{}
	_ = x[ConcurrencyModeStep-(0)]
	_ = x[ConcurrencyModeRun-(1)]
}

var _ConcurrencyModeValues = []ConcurrencyMode{ConcurrencyModeStep, ConcurrencyModeRun}

var _ConcurrencyModeNameToValueMap = map[string]ConcurrencyMode{
	_ConcurrencyModeName[0:4]:      ConcurrencyModeStep,
	_ConcurrencyModeLowerName[0:4]: ConcurrencyModeStep,
	_ConcurrencyModeName[4:7]:      ConcurrencyModeRun,
	_ConcurrencyModeLowerName[4:7]: ConcurrencyModeRun,
}

var _ConcurrencyModeNames = []string{
	_ConcurrencyModeName[0:4],
	_ConcurrencyModeName[4:7],
}

// ConcurrencyModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConcurrencyModeString(s string) (ConcurrencyMode, error) {
	if val, ok := _ConcurrencyModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ConcurrencyModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ConcurrencyMode values", s)
}

// ConcurrencyModeValues returns all values of the enum
func ConcurrencyModeValues() []ConcurrencyMode {
	return _ConcurrencyModeValues
}

// ConcurrencyModeStrings returns a slice of all String values of the enum
func ConcurrencyModeStrings() []string {
	strs := make([]string, len(_ConcurrencyModeNames))
	copy(strs, _ConcurrencyModeNames)
	return strs
}

// IsAConcurrencyMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ConcurrencyMode) IsAConcurrencyMode() bool {
	for _, v := range _ConcurrencyModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ConcurrencyMode
func (i ConcurrencyMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConcurrencyMode
func (i *ConcurrencyMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ConcurrencyMode should be a string, got %s", data)
	}

	var err error
	*i, err = ConcurrencyModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ConcurrencyMode
func (i ConcurrencyMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ConcurrencyMode
func (i *ConcurrencyMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = ConcurrencyModeString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for ConcurrencyMode
func (i ConcurrencyMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for ConcurrencyMode
func (i *ConcurrencyMode) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("ConcurrencyMode should be a string, got %T", value)
	}

	var err error
	*i, err = ConcurrencyModeString(str)
	return err
}
