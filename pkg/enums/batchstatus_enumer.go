// Code generated by "enumer -trimprefix=BatchStatus -type=BatchStatus -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BatchStatusName = "PendingReadyStartedAbsent"

var _BatchStatusIndex = [...]uint8{0, 7, 12, 19, 25}

const _BatchStatusLowerName = "pendingreadystartedabsent"

func (i BatchStatus) String() string {
	if i < 0 || i >= BatchStatus(len(_BatchStatusIndex)-1) {
		return fmt.Sprintf("BatchStatus(%d)", i)
	}
	return _BatchStatusName[_BatchStatusIndex[i]:_BatchStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BatchStatusNoOp() {
	var x [1]struct{}
	_ = x[BatchStatusPending-(0)]
	_ = x[BatchStatusReady-(1)]
	_ = x[BatchStatusStarted-(2)]
	_ = x[BatchStatusAbsent-(3)]
}

var _BatchStatusValues = []BatchStatus{BatchStatusPending, BatchStatusReady, BatchStatusStarted, BatchStatusAbsent}

var _BatchStatusNameToValueMap = map[string]BatchStatus{
	_BatchStatusName[0:7]:        BatchStatusPending,
	_BatchStatusLowerName[0:7]:   BatchStatusPending,
	_BatchStatusName[7:12]:       BatchStatusReady,
	_BatchStatusLowerName[7:12]:  BatchStatusReady,
	_BatchStatusName[12:19]:      BatchStatusStarted,
	_BatchStatusLowerName[12:19]: BatchStatusStarted,
	_BatchStatusName[19:25]:      BatchStatusAbsent,
	_BatchStatusLowerName[19:25]: BatchStatusAbsent,
}

var _BatchStatusNames = []string{
	_BatchStatusName[0:7],
	_BatchStatusName[7:12],
	_BatchStatusName[12:19],
	_BatchStatusName[19:25],
}

// BatchStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BatchStatusString(s string) (BatchStatus, error) {
	if val, ok := _BatchStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BatchStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BatchStatus values", s)
}

// BatchStatusValues returns all values of the enum
func BatchStatusValues() []BatchStatus {
	return _BatchStatusValues
}

// BatchStatusStrings returns a slice of all String values of the enum
func BatchStatusStrings() []string {
	strs := make([]string, len(_BatchStatusNames))
	copy(strs, _BatchStatusNames)
	return strs
}

// IsABatchStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BatchStatus) IsABatchStatus() bool {
	for _, v := range _BatchStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BatchStatus
func (i BatchStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BatchStatus
func (i *BatchStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BatchStatus should be a string, got %s", data)
	}

	var err error
	*i, err = BatchStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for BatchStatus
func (i BatchStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for BatchStatus
func (i *BatchStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = BatchStatusString(string(text))
	return err
}
