// Code generated by "enumer -trimprefix=PartitionType -type=PartitionType -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PartitionTypeName = "DefaultConcurrencyKeyThrottle"

var _PartitionTypeIndex = [...]uint8{0, 7, 21, 29}

const _PartitionTypeLowerName = "defaultconcurrencykeythrottle"

func (i PartitionType) String() string {
	if i < 0 || i >= PartitionType(len(_PartitionTypeIndex)-1) {
		return fmt.Sprintf("PartitionType(%d)", i)
	}
	return _PartitionTypeName[_PartitionTypeIndex[i]:_PartitionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PartitionTypeNoOp() {
	var x [1]struct{}
	_ = x[PartitionTypeDefault-(0)]
	_ = x[PartitionTypeConcurrencyKey-(1)]
	_ = x[PartitionTypeThrottle-(2)]
}

var _PartitionTypeValues = []PartitionType{PartitionTypeDefault, PartitionTypeConcurrencyKey, PartitionTypeThrottle}

var _PartitionTypeNameToValueMap = map[string]PartitionType{
	_PartitionTypeName[0:7]:        PartitionTypeDefault,
	_PartitionTypeLowerName[0:7]:   PartitionTypeDefault,
	_PartitionTypeName[7:21]:       PartitionTypeConcurrencyKey,
	_PartitionTypeLowerName[7:21]:  PartitionTypeConcurrencyKey,
	_PartitionTypeName[21:29]:      PartitionTypeThrottle,
	_PartitionTypeLowerName[21:29]: PartitionTypeThrottle,
}

var _PartitionTypeNames = []string{
	_PartitionTypeName[0:7],
	_PartitionTypeName[7:21],
	_PartitionTypeName[21:29],
}

// PartitionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PartitionTypeString(s string) (PartitionType, error) {
	if val, ok := _PartitionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PartitionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PartitionType values", s)
}

// PartitionTypeValues returns all values of the enum
func PartitionTypeValues() []PartitionType {
	return _PartitionTypeValues
}

// PartitionTypeStrings returns a slice of all String values of the enum
func PartitionTypeStrings() []string {
	strs := make([]string, len(_PartitionTypeNames))
	copy(strs, _PartitionTypeNames)
	return strs
}

// IsAPartitionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PartitionType) IsAPartitionType() bool {
	for _, v := range _PartitionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PartitionType
func (i PartitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PartitionType
func (i *PartitionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PartitionType should be a string, got %s", data)
	}

	var err error
	*i, err = PartitionTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PartitionType
func (i PartitionType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PartitionType
func (i *PartitionType) UnmarshalText(text []byte) error {
	var err error
	*i, err = PartitionTypeString(string(text))
	return err
}
