// Code generated by "enumer -trimprefix=Opcode -type=Opcode -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OpcodeName = "NoneStepStepRunStepErrorStepPlannedSleepWaitForEventInvokeFunction"

var _OpcodeIndex = [...]uint8{0, 4, 8, 15, 24, 35, 40, 52, 66}

const _OpcodeLowerName = "nonestepsteprunsteperrorstepplannedsleepwaitforeventinvokefunction"

func (i Opcode) String() string {
	if i < 0 || i >= Opcode(len(_OpcodeIndex)-1) {
		return fmt.Sprintf("Opcode(%d)", i)
	}
	return _OpcodeName[_OpcodeIndex[i]:_OpcodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpcodeNoOp() {
	var x [1]struct{}
	_ = x[OpcodeNone-(0)]
	_ = x[OpcodeStep-(1)]
	_ = x[OpcodeStepRun-(2)]
	_ = x[OpcodeStepError-(3)]
	_ = x[OpcodeStepPlanned-(4)]
	_ = x[OpcodeSleep-(5)]
	_ = x[OpcodeWaitForEvent-(6)]
	_ = x[OpcodeInvokeFunction-(7)]
}

var _OpcodeValues = []Opcode{OpcodeNone, OpcodeStep, OpcodeStepRun, OpcodeStepError, OpcodeStepPlanned, OpcodeSleep, OpcodeWaitForEvent, OpcodeInvokeFunction}

var _OpcodeNameToValueMap = map[string]Opcode{
	_OpcodeName[0:4]:        OpcodeNone,
	_OpcodeLowerName[0:4]:   OpcodeNone,
	_OpcodeName[4:8]:        OpcodeStep,
	_OpcodeLowerName[4:8]:   OpcodeStep,
	_OpcodeName[8:15]:       OpcodeStepRun,
	_OpcodeLowerName[8:15]:  OpcodeStepRun,
	_OpcodeName[15:24]:      OpcodeStepError,
	_OpcodeLowerName[15:24]: OpcodeStepError,
	_OpcodeName[24:35]:      OpcodeStepPlanned,
	_OpcodeLowerName[24:35]: OpcodeStepPlanned,
	_OpcodeName[35:40]:      OpcodeSleep,
	_OpcodeLowerName[35:40]: OpcodeSleep,
	_OpcodeName[40:52]:      OpcodeWaitForEvent,
	_OpcodeLowerName[40:52]: OpcodeWaitForEvent,
	_OpcodeName[52:66]:      OpcodeInvokeFunction,
	_OpcodeLowerName[52:66]: OpcodeInvokeFunction,
}

var _OpcodeNames = []string{
	_OpcodeName[0:4],
	_OpcodeName[4:8],
	_OpcodeName[8:15],
	_OpcodeName[15:24],
	_OpcodeName[24:35],
	_OpcodeName[35:40],
	_OpcodeName[40:52],
	_OpcodeName[52:66],
}

// OpcodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpcodeString(s string) (Opcode, error) {
	if val, ok := _OpcodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpcodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Opcode values", s)
}

// OpcodeValues returns all values of the enum
func OpcodeValues() []Opcode {
	return _OpcodeValues
}

// OpcodeStrings returns a slice of all String values of the enum
func OpcodeStrings() []string {
	strs := make([]string, len(_OpcodeNames))
	copy(strs, _OpcodeNames)
	return strs
}

// IsAOpcode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Opcode) IsAOpcode() bool {
	for _, v := range _OpcodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Opcode
func (i Opcode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Opcode
func (i *Opcode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Opcode should be a string, got %s", data)
	}

	var err error
	*i, err = OpcodeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Opcode
func (i Opcode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Opcode
func (i *Opcode) UnmarshalText(text []byte) error {
	var err error
	*i, err = OpcodeString(string(text))
	return err
}
