// Code generated by "enumer -trimprefix=CancellationType -type=CancellationType -json -text -transform=snake"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CancellationTypeName = "runbacklog"

var _CancellationTypeIndex = [...]uint8{0, 3, 10}

const _CancellationTypeLowerName = "runbacklog"

func (i CancellationType) String() string {
	if i < 0 || i >= CancellationType(len(_CancellationTypeIndex)-1) {
		return fmt.Sprintf("CancellationType(%d)", i)
	}
	return _CancellationTypeName[_CancellationTypeIndex[i]:_CancellationTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CancellationTypeNoOp() {
	var x [1]struct{}
	_ = x[CancellationTypeRun-(0)]
	_ = x[CancellationTypeBacklog-(1)]
}

var _CancellationTypeValues = []CancellationType{CancellationTypeRun, CancellationTypeBacklog}

var _CancellationTypeNameToValueMap = map[string]CancellationType{
	_CancellationTypeName[0:3]:       CancellationTypeRun,
	_CancellationTypeLowerName[0:3]:  CancellationTypeRun,
	_CancellationTypeName[3:10]:      CancellationTypeBacklog,
	_CancellationTypeLowerName[3:10]: CancellationTypeBacklog,
}

var _CancellationTypeNames = []string{
	_CancellationTypeName[0:3],
	_CancellationTypeName[3:10],
}

// CancellationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CancellationTypeString(s string) (CancellationType, error) {
	if val, ok := _CancellationTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CancellationTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CancellationType values", s)
}

// CancellationTypeValues returns all values of the enum
func CancellationTypeValues() []CancellationType {
	return _CancellationTypeValues
}

// CancellationTypeStrings returns a slice of all String values of the enum
func CancellationTypeStrings() []string {
	strs := make([]string, len(_CancellationTypeNames))
	copy(strs, _CancellationTypeNames)
	return strs
}

// IsACancellationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CancellationType) IsACancellationType() bool {
	for _, v := range _CancellationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CancellationType
func (i CancellationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CancellationType
func (i *CancellationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CancellationType should be a string, got %s", data)
	}

	var err error
	*i, err = CancellationTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CancellationType
func (i CancellationType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CancellationType
func (i *CancellationType) UnmarshalText(text []byte) error {
	var err error
	*i, err = CancellationTypeString(string(text))
	return err
}
