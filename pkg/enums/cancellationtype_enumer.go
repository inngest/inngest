// Code generated by "enumer -trimprefix=CancellationType -type=CancellationType -json -text"; DO NOT EDIT.

//
package enums

import (
	"encoding/json"
	"fmt"
)

const _CancellationTypeName = "NoneEventManual"

var _CancellationTypeIndex = [...]uint8{0, 4, 9, 15}

func (i CancellationType) String() string {
	if i < 0 || i >= CancellationType(len(_CancellationTypeIndex)-1) {
		return fmt.Sprintf("CancellationType(%d)", i)
	}
	return _CancellationTypeName[_CancellationTypeIndex[i]:_CancellationTypeIndex[i+1]]
}

var _CancellationTypeValues = []CancellationType{0, 1, 2}

var _CancellationTypeNameToValueMap = map[string]CancellationType{
	_CancellationTypeName[0:4]:  0,
	_CancellationTypeName[4:9]:  1,
	_CancellationTypeName[9:15]: 2,
}

// CancellationTypeFromString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CancellationTypeFromString(s string) (CancellationType, error) {
	if val, ok := _CancellationTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CancellationType values", s)
}

// CancellationTypeValues returns all values of the enum
func CancellationTypeValues() []CancellationType {
	return _CancellationTypeValues
}

// IsACancellationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CancellationType) IsACancellationType() bool {
	for _, v := range _CancellationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CancellationType
func (i CancellationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CancellationType
func (i *CancellationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CancellationType should be a string, got %s", data)
	}

	var err error
	*i, err = CancellationTypeFromString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CancellationType
func (i CancellationType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CancellationType
func (i *CancellationType) UnmarshalText(text []byte) error {
	var err error
	*i, err = CancellationTypeFromString(string(text))
	return err
}
