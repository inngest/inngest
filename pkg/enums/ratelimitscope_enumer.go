// Code generated by "enumer -trimprefix=RateLimitScope -type=RateLimitScope -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _RateLimitScopeName = "FnEnvAccount"

var _RateLimitScopeIndex = [...]uint8{0, 2, 5, 12}

const _RateLimitScopeLowerName = "fnenvaccount"

func (i RateLimitScope) String() string {
	if i < 0 || i >= RateLimitScope(len(_RateLimitScopeIndex)-1) {
		return fmt.Sprintf("RateLimitScope(%d)", i)
	}
	return _RateLimitScopeName[_RateLimitScopeIndex[i]:_RateLimitScopeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RateLimitScopeNoOp() {
	var x [1]struct{}
	_ = x[RateLimitScopeFn-(0)]
	_ = x[RateLimitScopeEnv-(1)]
	_ = x[RateLimitScopeAccount-(2)]
}

var _RateLimitScopeValues = []RateLimitScope{RateLimitScopeFn, RateLimitScopeEnv, RateLimitScopeAccount}

var _RateLimitScopeNameToValueMap = map[string]RateLimitScope{
	_RateLimitScopeName[0:2]:       RateLimitScopeFn,
	_RateLimitScopeLowerName[0:2]:  RateLimitScopeFn,
	_RateLimitScopeName[2:5]:       RateLimitScopeEnv,
	_RateLimitScopeLowerName[2:5]:  RateLimitScopeEnv,
	_RateLimitScopeName[5:12]:      RateLimitScopeAccount,
	_RateLimitScopeLowerName[5:12]: RateLimitScopeAccount,
}

var _RateLimitScopeNames = []string{
	_RateLimitScopeName[0:2],
	_RateLimitScopeName[2:5],
	_RateLimitScopeName[5:12],
}

// RateLimitScopeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RateLimitScopeString(s string) (RateLimitScope, error) {
	if val, ok := _RateLimitScopeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RateLimitScopeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RateLimitScope values", s)
}

// RateLimitScopeValues returns all values of the enum
func RateLimitScopeValues() []RateLimitScope {
	return _RateLimitScopeValues
}

// RateLimitScopeStrings returns a slice of all String values of the enum
func RateLimitScopeStrings() []string {
	strs := make([]string, len(_RateLimitScopeNames))
	copy(strs, _RateLimitScopeNames)
	return strs
}

// IsARateLimitScope returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RateLimitScope) IsARateLimitScope() bool {
	for _, v := range _RateLimitScopeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RateLimitScope
func (i RateLimitScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RateLimitScope
func (i *RateLimitScope) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RateLimitScope should be a string, got %s", data)
	}

	var err error
	*i, err = RateLimitScopeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for RateLimitScope
func (i RateLimitScope) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for RateLimitScope
func (i *RateLimitScope) UnmarshalText(text []byte) error {
	var err error
	*i, err = RateLimitScopeString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for RateLimitScope
func (i RateLimitScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for RateLimitScope
func (i *RateLimitScope) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("RateLimitScope should be a string, got %T", value)
	}

	var err error
	*i, err = RateLimitScopeString(str)
	return err
}
