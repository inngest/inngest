// Code generated by "enumer -trimprefix=CronOp -type=CronOp -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CronOpName = "NewUpdateUnpauseProcessCronHealthCheckCronInit"

var _CronOpIndex = [...]uint8{0, 3, 9, 16, 23, 38, 46}

const _CronOpLowerName = "newupdateunpauseprocesscronhealthcheckcroninit"

func (i CronOp) String() string {
	if i < 0 || i >= CronOp(len(_CronOpIndex)-1) {
		return fmt.Sprintf("CronOp(%d)", i)
	}
	return _CronOpName[_CronOpIndex[i]:_CronOpIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CronOpNoOp() {
	var x [1]struct{}
	_ = x[CronOpNew-(0)]
	_ = x[CronOpUpdate-(1)]
	_ = x[CronOpUnpause-(2)]
	_ = x[CronOpProcess-(3)]
	_ = x[CronHealthCheck-(4)]
	_ = x[CronInit-(5)]
}

var _CronOpValues = []CronOp{CronOpNew, CronOpUpdate, CronOpUnpause, CronOpProcess, CronHealthCheck, CronInit}

var _CronOpNameToValueMap = map[string]CronOp{
	_CronOpName[0:3]:        CronOpNew,
	_CronOpLowerName[0:3]:   CronOpNew,
	_CronOpName[3:9]:        CronOpUpdate,
	_CronOpLowerName[3:9]:   CronOpUpdate,
	_CronOpName[9:16]:       CronOpUnpause,
	_CronOpLowerName[9:16]:  CronOpUnpause,
	_CronOpName[16:23]:      CronOpProcess,
	_CronOpLowerName[16:23]: CronOpProcess,
	_CronOpName[23:38]:      CronHealthCheck,
	_CronOpLowerName[23:38]: CronHealthCheck,
	_CronOpName[38:46]:      CronInit,
	_CronOpLowerName[38:46]: CronInit,
}

var _CronOpNames = []string{
	_CronOpName[0:3],
	_CronOpName[3:9],
	_CronOpName[9:16],
	_CronOpName[16:23],
	_CronOpName[23:38],
	_CronOpName[38:46],
}

// CronOpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CronOpString(s string) (CronOp, error) {
	if val, ok := _CronOpNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CronOpNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CronOp values", s)
}

// CronOpValues returns all values of the enum
func CronOpValues() []CronOp {
	return _CronOpValues
}

// CronOpStrings returns a slice of all String values of the enum
func CronOpStrings() []string {
	strs := make([]string, len(_CronOpNames))
	copy(strs, _CronOpNames)
	return strs
}

// IsACronOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CronOp) IsACronOp() bool {
	for _, v := range _CronOpValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CronOp
func (i CronOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CronOp
func (i *CronOp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CronOp should be a string, got %s", data)
	}

	var err error
	*i, err = CronOpString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CronOp
func (i CronOp) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CronOp
func (i *CronOp) UnmarshalText(text []byte) error {
	var err error
	*i, err = CronOpString(string(text))
	return err
}
