// Code generated by "enumer -trimprefix=GuaranteedCapacityScope -type=GuaranteedCapacityScope -json -text"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _GuaranteedCapacityScopeName = "Account"

var _GuaranteedCapacityScopeIndex = [...]uint8{0, 7}

const _GuaranteedCapacityScopeLowerName = "account"

func (i GuaranteedCapacityScope) String() string {
	if i < 0 || i >= GuaranteedCapacityScope(len(_GuaranteedCapacityScopeIndex)-1) {
		return fmt.Sprintf("GuaranteedCapacityScope(%d)", i)
	}
	return _GuaranteedCapacityScopeName[_GuaranteedCapacityScopeIndex[i]:_GuaranteedCapacityScopeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GuaranteedCapacityScopeNoOp() {
	var x [1]struct{}
	_ = x[GuaranteedCapacityScopeAccount-(0)]
}

var _GuaranteedCapacityScopeValues = []GuaranteedCapacityScope{GuaranteedCapacityScopeAccount}

var _GuaranteedCapacityScopeNameToValueMap = map[string]GuaranteedCapacityScope{
	_GuaranteedCapacityScopeName[0:7]:      GuaranteedCapacityScopeAccount,
	_GuaranteedCapacityScopeLowerName[0:7]: GuaranteedCapacityScopeAccount,
}

var _GuaranteedCapacityScopeNames = []string{
	_GuaranteedCapacityScopeName[0:7],
}

// GuaranteedCapacityScopeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GuaranteedCapacityScopeString(s string) (GuaranteedCapacityScope, error) {
	if val, ok := _GuaranteedCapacityScopeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GuaranteedCapacityScopeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GuaranteedCapacityScope values", s)
}

// GuaranteedCapacityScopeValues returns all values of the enum
func GuaranteedCapacityScopeValues() []GuaranteedCapacityScope {
	return _GuaranteedCapacityScopeValues
}

// GuaranteedCapacityScopeStrings returns a slice of all String values of the enum
func GuaranteedCapacityScopeStrings() []string {
	strs := make([]string, len(_GuaranteedCapacityScopeNames))
	copy(strs, _GuaranteedCapacityScopeNames)
	return strs
}

// IsAGuaranteedCapacityScope returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GuaranteedCapacityScope) IsAGuaranteedCapacityScope() bool {
	for _, v := range _GuaranteedCapacityScopeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for GuaranteedCapacityScope
func (i GuaranteedCapacityScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for GuaranteedCapacityScope
func (i *GuaranteedCapacityScope) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("GuaranteedCapacityScope should be a string, got %s", data)
	}

	var err error
	*i, err = GuaranteedCapacityScopeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for GuaranteedCapacityScope
func (i GuaranteedCapacityScope) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for GuaranteedCapacityScope
func (i *GuaranteedCapacityScope) UnmarshalText(text []byte) error {
	var err error
	*i, err = GuaranteedCapacityScopeString(string(text))
	return err
}
