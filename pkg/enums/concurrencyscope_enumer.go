// Code generated by "enumer -trimprefix=ConcurrencyScope -type=ConcurrencyScope -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _ConcurrencyScopeName = "FnEnvAccount"

var _ConcurrencyScopeIndex = [...]uint8{0, 2, 5, 12}

const _ConcurrencyScopeLowerName = "fnenvaccount"

func (i ConcurrencyScope) String() string {
	if i < 0 || i >= ConcurrencyScope(len(_ConcurrencyScopeIndex)-1) {
		return fmt.Sprintf("ConcurrencyScope(%d)", i)
	}
	return _ConcurrencyScopeName[_ConcurrencyScopeIndex[i]:_ConcurrencyScopeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ConcurrencyScopeNoOp() {
	var x [1]struct{}
	_ = x[ConcurrencyScopeFn-(0)]
	_ = x[ConcurrencyScopeEnv-(1)]
	_ = x[ConcurrencyScopeAccount-(2)]
}

var _ConcurrencyScopeValues = []ConcurrencyScope{ConcurrencyScopeFn, ConcurrencyScopeEnv, ConcurrencyScopeAccount}

var _ConcurrencyScopeNameToValueMap = map[string]ConcurrencyScope{
	_ConcurrencyScopeName[0:2]:       ConcurrencyScopeFn,
	_ConcurrencyScopeLowerName[0:2]:  ConcurrencyScopeFn,
	_ConcurrencyScopeName[2:5]:       ConcurrencyScopeEnv,
	_ConcurrencyScopeLowerName[2:5]:  ConcurrencyScopeEnv,
	_ConcurrencyScopeName[5:12]:      ConcurrencyScopeAccount,
	_ConcurrencyScopeLowerName[5:12]: ConcurrencyScopeAccount,
}

var _ConcurrencyScopeNames = []string{
	_ConcurrencyScopeName[0:2],
	_ConcurrencyScopeName[2:5],
	_ConcurrencyScopeName[5:12],
}

// ConcurrencyScopeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConcurrencyScopeString(s string) (ConcurrencyScope, error) {
	if val, ok := _ConcurrencyScopeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ConcurrencyScopeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ConcurrencyScope values", s)
}

// ConcurrencyScopeValues returns all values of the enum
func ConcurrencyScopeValues() []ConcurrencyScope {
	return _ConcurrencyScopeValues
}

// ConcurrencyScopeStrings returns a slice of all String values of the enum
func ConcurrencyScopeStrings() []string {
	strs := make([]string, len(_ConcurrencyScopeNames))
	copy(strs, _ConcurrencyScopeNames)
	return strs
}

// IsAConcurrencyScope returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ConcurrencyScope) IsAConcurrencyScope() bool {
	for _, v := range _ConcurrencyScopeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ConcurrencyScope
func (i ConcurrencyScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConcurrencyScope
func (i *ConcurrencyScope) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ConcurrencyScope should be a string, got %s", data)
	}

	var err error
	*i, err = ConcurrencyScopeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ConcurrencyScope
func (i ConcurrencyScope) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ConcurrencyScope
func (i *ConcurrencyScope) UnmarshalText(text []byte) error {
	var err error
	*i, err = ConcurrencyScopeString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for ConcurrencyScope
func (i ConcurrencyScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for ConcurrencyScope
func (i *ConcurrencyScope) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("ConcurrencyScope should be a string, got %T", value)
	}

	var err error
	*i, err = ConcurrencyScopeString(str)
	return err
}
