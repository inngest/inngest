// Code generated by "enumer -trimprefix=HistoryStepType -type=HistoryStepType -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _HistoryStepTypeName = "RunSendSleepWait"

var _HistoryStepTypeIndex = [...]uint8{0, 3, 7, 12, 16}

const _HistoryStepTypeLowerName = "runsendsleepwait"

func (i HistoryStepType) String() string {
	if i < 0 || i >= HistoryStepType(len(_HistoryStepTypeIndex)-1) {
		return fmt.Sprintf("HistoryStepType(%d)", i)
	}
	return _HistoryStepTypeName[_HistoryStepTypeIndex[i]:_HistoryStepTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HistoryStepTypeNoOp() {
	var x [1]struct{}
	_ = x[HistoryStepTypeRun-(0)]
	_ = x[HistoryStepTypeSend-(1)]
	_ = x[HistoryStepTypeSleep-(2)]
	_ = x[HistoryStepTypeWait-(3)]
}

var _HistoryStepTypeValues = []HistoryStepType{HistoryStepTypeRun, HistoryStepTypeSend, HistoryStepTypeSleep, HistoryStepTypeWait}

var _HistoryStepTypeNameToValueMap = map[string]HistoryStepType{
	_HistoryStepTypeName[0:3]:        HistoryStepTypeRun,
	_HistoryStepTypeLowerName[0:3]:   HistoryStepTypeRun,
	_HistoryStepTypeName[3:7]:        HistoryStepTypeSend,
	_HistoryStepTypeLowerName[3:7]:   HistoryStepTypeSend,
	_HistoryStepTypeName[7:12]:       HistoryStepTypeSleep,
	_HistoryStepTypeLowerName[7:12]:  HistoryStepTypeSleep,
	_HistoryStepTypeName[12:16]:      HistoryStepTypeWait,
	_HistoryStepTypeLowerName[12:16]: HistoryStepTypeWait,
}

var _HistoryStepTypeNames = []string{
	_HistoryStepTypeName[0:3],
	_HistoryStepTypeName[3:7],
	_HistoryStepTypeName[7:12],
	_HistoryStepTypeName[12:16],
}

// HistoryStepTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HistoryStepTypeString(s string) (HistoryStepType, error) {
	if val, ok := _HistoryStepTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HistoryStepTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HistoryStepType values", s)
}

// HistoryStepTypeValues returns all values of the enum
func HistoryStepTypeValues() []HistoryStepType {
	return _HistoryStepTypeValues
}

// HistoryStepTypeStrings returns a slice of all String values of the enum
func HistoryStepTypeStrings() []string {
	strs := make([]string, len(_HistoryStepTypeNames))
	copy(strs, _HistoryStepTypeNames)
	return strs
}

// IsAHistoryStepType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HistoryStepType) IsAHistoryStepType() bool {
	for _, v := range _HistoryStepTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HistoryStepType
func (i HistoryStepType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HistoryStepType
func (i *HistoryStepType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HistoryStepType should be a string, got %s", data)
	}

	var err error
	*i, err = HistoryStepTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for HistoryStepType
func (i HistoryStepType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for HistoryStepType
func (i *HistoryStepType) UnmarshalText(text []byte) error {
	var err error
	*i, err = HistoryStepTypeString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for HistoryStepType
func (i HistoryStepType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for HistoryStepType
func (i *HistoryStepType) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("HistoryStepType should be a string, got %T", value)
	}

	var err error
	*i, err = HistoryStepTypeString(str)
	return err
}
