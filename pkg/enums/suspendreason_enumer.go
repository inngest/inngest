// Code generated by "enumer -trimprefix=SuspendReason -type=SuspendReason -json -text -gqlgen"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _SuspendReasonName = "PauseMigrate"

var _SuspendReasonIndex = [...]uint8{0, 5, 12}

const _SuspendReasonLowerName = "pausemigrate"

func (i SuspendReason) String() string {
	if i < 0 || i >= SuspendReason(len(_SuspendReasonIndex)-1) {
		return fmt.Sprintf("SuspendReason(%d)", i)
	}
	return _SuspendReasonName[_SuspendReasonIndex[i]:_SuspendReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SuspendReasonNoOp() {
	var x [1]struct{}
	_ = x[SuspendReasonPause-(0)]
	_ = x[SuspendReasonMigrate-(1)]
}

var _SuspendReasonValues = []SuspendReason{SuspendReasonPause, SuspendReasonMigrate}

var _SuspendReasonNameToValueMap = map[string]SuspendReason{
	_SuspendReasonName[0:5]:       SuspendReasonPause,
	_SuspendReasonLowerName[0:5]:  SuspendReasonPause,
	_SuspendReasonName[5:12]:      SuspendReasonMigrate,
	_SuspendReasonLowerName[5:12]: SuspendReasonMigrate,
}

var _SuspendReasonNames = []string{
	_SuspendReasonName[0:5],
	_SuspendReasonName[5:12],
}

// SuspendReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SuspendReasonString(s string) (SuspendReason, error) {
	if val, ok := _SuspendReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SuspendReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SuspendReason values", s)
}

// SuspendReasonValues returns all values of the enum
func SuspendReasonValues() []SuspendReason {
	return _SuspendReasonValues
}

// SuspendReasonStrings returns a slice of all String values of the enum
func SuspendReasonStrings() []string {
	strs := make([]string, len(_SuspendReasonNames))
	copy(strs, _SuspendReasonNames)
	return strs
}

// IsASuspendReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SuspendReason) IsASuspendReason() bool {
	for _, v := range _SuspendReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SuspendReason
func (i SuspendReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SuspendReason
func (i *SuspendReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SuspendReason should be a string, got %s", data)
	}

	var err error
	*i, err = SuspendReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SuspendReason
func (i SuspendReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SuspendReason
func (i *SuspendReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = SuspendReasonString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for SuspendReason
func (i SuspendReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for SuspendReason
func (i *SuspendReason) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("SuspendReason should be a string, got %T", value)
	}

	var err error
	*i, err = SuspendReasonString(str)
	return err
}
