// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"

	"github.com/google/uuid"
	ulid "github.com/oklog/ulid/v2"
)

type Querier interface {
	DeleteApp(ctx context.Context, id uuid.UUID) error
	DeleteFunctionsByAppID(ctx context.Context, appID uuid.UUID) error
	DeleteFunctionsByIDs(ctx context.Context, ids []uuid.UUID) error
	DeleteOldQueueSnapshots(ctx context.Context, limit int64) (int64, error)
	GetAllApps(ctx context.Context) ([]*App, error)
	GetApp(ctx context.Context, id uuid.UUID) (*App, error)
	GetAppByChecksum(ctx context.Context, checksum string) (*App, error)
	GetAppByID(ctx context.Context, id uuid.UUID) (*App, error)
	GetAppByName(ctx context.Context, name string) (*App, error)
	GetAppByURL(ctx context.Context, url string) (*App, error)
	GetAppFunctions(ctx context.Context, appID uuid.UUID) ([]*Function, error)
	GetAppFunctionsBySlug(ctx context.Context, name string) ([]*Function, error)
	GetApps(ctx context.Context) ([]*App, error)
	GetEventBatchByRunID(ctx context.Context, runID ulid.ULID) (*EventBatch, error)
	GetEventBatchesByEventID(ctx context.Context, instr string) ([]*EventBatch, error)
	GetEventByInternalID(ctx context.Context, internalID ulid.ULID) (*Event, error)
	GetEventsByInternalIDs(ctx context.Context, ids []ulid.ULID) ([]*Event, error)
	GetEventsIDbound(ctx context.Context, arg GetEventsIDboundParams) ([]*Event, error)
	GetFunctionByID(ctx context.Context, id uuid.UUID) (*Function, error)
	GetFunctionBySlug(ctx context.Context, slug string) (*Function, error)
	GetFunctionRun(ctx context.Context, runID ulid.ULID) (*GetFunctionRunRow, error)
	GetFunctionRunFinishesByRunIDs(ctx context.Context, runIds []ulid.ULID) ([]*FunctionFinish, error)
	GetFunctionRunHistory(ctx context.Context, runID ulid.ULID) ([]*History, error)
	GetFunctionRuns(ctx context.Context) ([]*GetFunctionRunsRow, error)
	GetFunctionRunsFromEvents(ctx context.Context, eventIds []ulid.ULID) ([]*GetFunctionRunsFromEventsRow, error)
	GetFunctionRunsTimebound(ctx context.Context, arg GetFunctionRunsTimeboundParams) ([]*GetFunctionRunsTimeboundRow, error)
	GetFunctions(ctx context.Context) ([]*Function, error)
	GetHistoryItem(ctx context.Context, id ulid.ULID) (*History, error)
	GetLatestQueueSnapshotChunks(ctx context.Context) ([]*GetLatestQueueSnapshotChunksRow, error)
	//
	// Queue snapshots
	//
	GetQueueSnapshotChunks(ctx context.Context, snapshotID interface{}) ([]*GetQueueSnapshotChunksRow, error)
	GetTraceRun(ctx context.Context, runID ulid.ULID) (*TraceRun, error)
	GetTraceSpanOutput(ctx context.Context, arg GetTraceSpanOutputParams) ([]*Trace, error)
	GetTraceSpans(ctx context.Context, arg GetTraceSpansParams) ([]*Trace, error)
	GetWorkerConnection(ctx context.Context, arg GetWorkerConnectionParams) (*WorkerConnection, error)
	HistoryCountRuns(ctx context.Context) (int64, error)
	//
	// Events
	//
	InsertEvent(ctx context.Context, arg InsertEventParams) error
	InsertEventBatch(ctx context.Context, arg InsertEventBatchParams) error
	//
	// functions
	//
	// note - this is very basic right now.
	InsertFunction(ctx context.Context, arg InsertFunctionParams) (*Function, error)
	InsertFunctionFinish(ctx context.Context, arg InsertFunctionFinishParams) error
	//
	// function runs
	//
	InsertFunctionRun(ctx context.Context, arg InsertFunctionRunParams) error
	//
	// History
	//
	InsertHistory(ctx context.Context, arg InsertHistoryParams) error
	InsertQueueSnapshotChunk(ctx context.Context, arg InsertQueueSnapshotChunkParams) error
	//
	// Traces
	//
	InsertTrace(ctx context.Context, arg InsertTraceParams) error
	InsertTraceRun(ctx context.Context, arg InsertTraceRunParams) error
	//
	// Worker Connections
	//
	InsertWorkerConnection(ctx context.Context, arg InsertWorkerConnectionParams) error
	UpdateAppError(ctx context.Context, arg UpdateAppErrorParams) (*App, error)
	UpdateAppURL(ctx context.Context, arg UpdateAppURLParams) (*App, error)
	UpdateFunctionConfig(ctx context.Context, arg UpdateFunctionConfigParams) (*Function, error)
	UpsertApp(ctx context.Context, arg UpsertAppParams) (*App, error)
	WorkspaceEvents(ctx context.Context, arg WorkspaceEventsParams) ([]*Event, error)
	WorkspaceNamedEvents(ctx context.Context, arg WorkspaceNamedEventsParams) ([]*Event, error)
}

var _ Querier = (*Queries)(nil)
