// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: pb/pgcapture.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DBLogGateway_Capture_FullMethodName = "/pgcapture.DBLogGateway/Capture"
)

// DBLogGatewayClient is the client API for DBLogGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBLogGatewayClient interface {
	Capture(ctx context.Context, opts ...grpc.CallOption) (DBLogGateway_CaptureClient, error)
}

type dBLogGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewDBLogGatewayClient(cc grpc.ClientConnInterface) DBLogGatewayClient {
	return &dBLogGatewayClient{cc}
}

func (c *dBLogGatewayClient) Capture(ctx context.Context, opts ...grpc.CallOption) (DBLogGateway_CaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &DBLogGateway_ServiceDesc.Streams[0], DBLogGateway_Capture_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dBLogGatewayCaptureClient{stream}
	return x, nil
}

type DBLogGateway_CaptureClient interface {
	Send(*CaptureRequest) error
	Recv() (*CaptureMessage, error)
	grpc.ClientStream
}

type dBLogGatewayCaptureClient struct {
	grpc.ClientStream
}

func (x *dBLogGatewayCaptureClient) Send(m *CaptureRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBLogGatewayCaptureClient) Recv() (*CaptureMessage, error) {
	m := new(CaptureMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DBLogGatewayServer is the server API for DBLogGateway service.
// All implementations must embed UnimplementedDBLogGatewayServer
// for forward compatibility
type DBLogGatewayServer interface {
	Capture(DBLogGateway_CaptureServer) error
	mustEmbedUnimplementedDBLogGatewayServer()
}

// UnimplementedDBLogGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedDBLogGatewayServer struct {
}

func (UnimplementedDBLogGatewayServer) Capture(DBLogGateway_CaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedDBLogGatewayServer) mustEmbedUnimplementedDBLogGatewayServer() {}

// UnsafeDBLogGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBLogGatewayServer will
// result in compilation errors.
type UnsafeDBLogGatewayServer interface {
	mustEmbedUnimplementedDBLogGatewayServer()
}

func RegisterDBLogGatewayServer(s grpc.ServiceRegistrar, srv DBLogGatewayServer) {
	s.RegisterService(&DBLogGateway_ServiceDesc, srv)
}

func _DBLogGateway_Capture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBLogGatewayServer).Capture(&dBLogGatewayCaptureServer{stream})
}

type DBLogGateway_CaptureServer interface {
	Send(*CaptureMessage) error
	Recv() (*CaptureRequest, error)
	grpc.ServerStream
}

type dBLogGatewayCaptureServer struct {
	grpc.ServerStream
}

func (x *dBLogGatewayCaptureServer) Send(m *CaptureMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBLogGatewayCaptureServer) Recv() (*CaptureRequest, error) {
	m := new(CaptureRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DBLogGateway_ServiceDesc is the grpc.ServiceDesc for DBLogGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBLogGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgcapture.DBLogGateway",
	HandlerType: (*DBLogGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capture",
			Handler:       _DBLogGateway_Capture_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/pgcapture.proto",
}

const (
	DBLogController_PullDumpInfo_FullMethodName        = "/pgcapture.DBLogController/PullDumpInfo"
	DBLogController_Schedule_FullMethodName            = "/pgcapture.DBLogController/Schedule"
	DBLogController_StopSchedule_FullMethodName        = "/pgcapture.DBLogController/StopSchedule"
	DBLogController_SetScheduleCoolDown_FullMethodName = "/pgcapture.DBLogController/SetScheduleCoolDown"
)

// DBLogControllerClient is the client API for DBLogController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBLogControllerClient interface {
	PullDumpInfo(ctx context.Context, opts ...grpc.CallOption) (DBLogController_PullDumpInfoClient, error)
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	StopSchedule(ctx context.Context, in *StopScheduleRequest, opts ...grpc.CallOption) (*StopScheduleResponse, error)
	SetScheduleCoolDown(ctx context.Context, in *SetScheduleCoolDownRequest, opts ...grpc.CallOption) (*SetScheduleCoolDownResponse, error)
}

type dBLogControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDBLogControllerClient(cc grpc.ClientConnInterface) DBLogControllerClient {
	return &dBLogControllerClient{cc}
}

func (c *dBLogControllerClient) PullDumpInfo(ctx context.Context, opts ...grpc.CallOption) (DBLogController_PullDumpInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &DBLogController_ServiceDesc.Streams[0], DBLogController_PullDumpInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dBLogControllerPullDumpInfoClient{stream}
	return x, nil
}

type DBLogController_PullDumpInfoClient interface {
	Send(*DumpInfoRequest) error
	Recv() (*DumpInfoResponse, error)
	grpc.ClientStream
}

type dBLogControllerPullDumpInfoClient struct {
	grpc.ClientStream
}

func (x *dBLogControllerPullDumpInfoClient) Send(m *DumpInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBLogControllerPullDumpInfoClient) Recv() (*DumpInfoResponse, error) {
	m := new(DumpInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBLogControllerClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, DBLogController_Schedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBLogControllerClient) StopSchedule(ctx context.Context, in *StopScheduleRequest, opts ...grpc.CallOption) (*StopScheduleResponse, error) {
	out := new(StopScheduleResponse)
	err := c.cc.Invoke(ctx, DBLogController_StopSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBLogControllerClient) SetScheduleCoolDown(ctx context.Context, in *SetScheduleCoolDownRequest, opts ...grpc.CallOption) (*SetScheduleCoolDownResponse, error) {
	out := new(SetScheduleCoolDownResponse)
	err := c.cc.Invoke(ctx, DBLogController_SetScheduleCoolDown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBLogControllerServer is the server API for DBLogController service.
// All implementations must embed UnimplementedDBLogControllerServer
// for forward compatibility
type DBLogControllerServer interface {
	PullDumpInfo(DBLogController_PullDumpInfoServer) error
	Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	StopSchedule(context.Context, *StopScheduleRequest) (*StopScheduleResponse, error)
	SetScheduleCoolDown(context.Context, *SetScheduleCoolDownRequest) (*SetScheduleCoolDownResponse, error)
	mustEmbedUnimplementedDBLogControllerServer()
}

// UnimplementedDBLogControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDBLogControllerServer struct {
}

func (UnimplementedDBLogControllerServer) PullDumpInfo(DBLogController_PullDumpInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method PullDumpInfo not implemented")
}
func (UnimplementedDBLogControllerServer) Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedDBLogControllerServer) StopSchedule(context.Context, *StopScheduleRequest) (*StopScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSchedule not implemented")
}
func (UnimplementedDBLogControllerServer) SetScheduleCoolDown(context.Context, *SetScheduleCoolDownRequest) (*SetScheduleCoolDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScheduleCoolDown not implemented")
}
func (UnimplementedDBLogControllerServer) mustEmbedUnimplementedDBLogControllerServer() {}

// UnsafeDBLogControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBLogControllerServer will
// result in compilation errors.
type UnsafeDBLogControllerServer interface {
	mustEmbedUnimplementedDBLogControllerServer()
}

func RegisterDBLogControllerServer(s grpc.ServiceRegistrar, srv DBLogControllerServer) {
	s.RegisterService(&DBLogController_ServiceDesc, srv)
}

func _DBLogController_PullDumpInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBLogControllerServer).PullDumpInfo(&dBLogControllerPullDumpInfoServer{stream})
}

type DBLogController_PullDumpInfoServer interface {
	Send(*DumpInfoResponse) error
	Recv() (*DumpInfoRequest, error)
	grpc.ServerStream
}

type dBLogControllerPullDumpInfoServer struct {
	grpc.ServerStream
}

func (x *dBLogControllerPullDumpInfoServer) Send(m *DumpInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBLogControllerPullDumpInfoServer) Recv() (*DumpInfoRequest, error) {
	m := new(DumpInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DBLogController_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBLogControllerServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBLogController_Schedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBLogControllerServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBLogController_StopSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBLogControllerServer).StopSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBLogController_StopSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBLogControllerServer).StopSchedule(ctx, req.(*StopScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBLogController_SetScheduleCoolDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScheduleCoolDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBLogControllerServer).SetScheduleCoolDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBLogController_SetScheduleCoolDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBLogControllerServer).SetScheduleCoolDown(ctx, req.(*SetScheduleCoolDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBLogController_ServiceDesc is the grpc.ServiceDesc for DBLogController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBLogController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgcapture.DBLogController",
	HandlerType: (*DBLogControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Schedule",
			Handler:    _DBLogController_Schedule_Handler,
		},
		{
			MethodName: "StopSchedule",
			Handler:    _DBLogController_StopSchedule_Handler,
		},
		{
			MethodName: "SetScheduleCoolDown",
			Handler:    _DBLogController_SetScheduleCoolDown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDumpInfo",
			Handler:       _DBLogController_PullDumpInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/pgcapture.proto",
}

const (
	Agent_Configure_FullMethodName  = "/pgcapture.Agent/Configure"
	Agent_Dump_FullMethodName       = "/pgcapture.Agent/Dump"
	Agent_StreamDump_FullMethodName = "/pgcapture.Agent/StreamDump"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	Configure(ctx context.Context, in *AgentConfigRequest, opts ...grpc.CallOption) (*AgentConfigResponse, error)
	Dump(ctx context.Context, in *AgentDumpRequest, opts ...grpc.CallOption) (*AgentDumpResponse, error)
	StreamDump(ctx context.Context, in *AgentDumpRequest, opts ...grpc.CallOption) (Agent_StreamDumpClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Configure(ctx context.Context, in *AgentConfigRequest, opts ...grpc.CallOption) (*AgentConfigResponse, error) {
	out := new(AgentConfigResponse)
	err := c.cc.Invoke(ctx, Agent_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Dump(ctx context.Context, in *AgentDumpRequest, opts ...grpc.CallOption) (*AgentDumpResponse, error) {
	out := new(AgentDumpResponse)
	err := c.cc.Invoke(ctx, Agent_Dump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StreamDump(ctx context.Context, in *AgentDumpRequest, opts ...grpc.CallOption) (Agent_StreamDumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_StreamDump_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentStreamDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_StreamDumpClient interface {
	Recv() (*Change, error)
	grpc.ClientStream
}

type agentStreamDumpClient struct {
	grpc.ClientStream
}

func (x *agentStreamDumpClient) Recv() (*Change, error) {
	m := new(Change)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	Configure(context.Context, *AgentConfigRequest) (*AgentConfigResponse, error)
	Dump(context.Context, *AgentDumpRequest) (*AgentDumpResponse, error)
	StreamDump(*AgentDumpRequest, Agent_StreamDumpServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Configure(context.Context, *AgentConfigRequest) (*AgentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedAgentServer) Dump(context.Context, *AgentDumpRequest) (*AgentDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dump not implemented")
}
func (UnimplementedAgentServer) StreamDump(*AgentDumpRequest, Agent_StreamDumpServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDump not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Configure(ctx, req.(*AgentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Dump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Dump(ctx, req.(*AgentDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StreamDump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentDumpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).StreamDump(m, &agentStreamDumpServer{stream})
}

type Agent_StreamDumpServer interface {
	Send(*Change) error
	grpc.ServerStream
}

type agentStreamDumpServer struct {
	grpc.ServerStream
}

func (x *agentStreamDumpServer) Send(m *Change) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgcapture.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _Agent_Configure_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _Agent_Dump_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDump",
			Handler:       _Agent_StreamDump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/pgcapture.proto",
}
