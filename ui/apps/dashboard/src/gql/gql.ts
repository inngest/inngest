/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation CreateEnvironment($name: String!) {\n    createWorkspace(input: { name: $name }) {\n      id\n    }\n  }\n": types.CreateEnvironmentDocument,
    "\n  mutation ArchiveEnvironment($id: ID!) {\n    archiveEnvironment(id: $id) {\n      id\n    }\n  }\n": types.ArchiveEnvironmentDocument,
    "\n  mutation UnarchiveEnvironment($id: ID!) {\n    unarchiveEnvironment(id: $id) {\n      id\n    }\n  }\n": types.UnarchiveEnvironmentDocument,
    "\n  mutation DisableEnvironmentAutoArchiveDocument($id: ID!) {\n    disableEnvironmentAutoArchive(id: $id) {\n      id\n    }\n  }\n": types.DisableEnvironmentAutoArchiveDocumentDocument,
    "\n  mutation EnableEnvironmentAutoArchive($id: ID!) {\n    enableEnvironmentAutoArchive(id: $id) {\n      id\n    }\n  }\n": types.EnableEnvironmentAutoArchiveDocument,
    "\n  query Sync($envID: ID!, $externalAppID: String!, $syncID: ID!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        externalID\n        name\n      }\n    }\n    sync: deploy(id: $syncID) {\n      commitAuthor\n      commitHash\n      commitMessage\n      commitRef\n      error\n      framework\n      id\n      lastSyncedAt\n      platform\n      repoURL\n      sdkLanguage\n      sdkVersion\n      status\n      removedFunctions: removedFunctions {\n        id\n        name\n        slug\n      }\n      syncedFunctions: deployedFunctions {\n        id\n        name\n        slug\n      }\n      url\n      vercelDeploymentID\n      vercelDeploymentURL\n      vercelProjectID\n      vercelProjectURL\n    }\n  }\n": types.SyncDocument,
    "\n  query AppSyncs($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        syncs(first: 40) {\n          commitAuthor\n          commitHash\n          commitMessage\n          commitRef\n          framework\n          id\n          lastSyncedAt\n          platform\n          removedFunctions {\n            id\n            name\n            slug\n          }\n          repoURL\n          sdkLanguage\n          sdkVersion\n          status\n          syncedFunctions: deployedFunctions {\n            id\n            name\n            slug\n          }\n          url\n          vercelDeploymentID\n          vercelDeploymentURL\n          vercelProjectID\n          vercelProjectURL\n        }\n      }\n    }\n  }\n": types.AppSyncsDocument,
    "\n  query App($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        externalID\n        functions {\n          id\n          latestVersion {\n            triggers {\n              eventName\n              schedule\n            }\n          }\n          name\n          slug\n        }\n        name\n        latestSync {\n          commitAuthor\n          commitHash\n          commitMessage\n          commitRef\n          error\n          framework\n          id\n          lastSyncedAt\n          platform\n          repoURL\n          sdkLanguage\n          sdkVersion\n          status\n          url\n          vercelDeploymentID\n          vercelDeploymentURL\n          vercelProjectID\n          vercelProjectURL\n        }\n      }\n    }\n  }\n": types.AppDocument,
    "\n  query AppNavData($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        latestSync {\n          platform\n          url\n        }\n        name\n      }\n    }\n  }\n": types.AppNavDataDocument,
    "\n  query Apps($envID: ID!) {\n    environment: workspace(id: $envID) {\n      apps {\n        id\n        externalID\n        functionCount\n        name\n        latestSync {\n          error\n          framework\n          id\n          lastSyncedAt\n          platform\n          sdkLanguage\n          sdkVersion\n          status\n          url\n        }\n      }\n\n      unattachedSyncs(first: 1) {\n        lastSyncedAt\n      }\n    }\n  }\n": types.AppsDocument,
    "\n  query GetDeploy($deployID: ID!) {\n    deploy(id: $deployID) {\n      id\n      appName\n      authorID\n      checksum\n      createdAt\n      error\n      framework\n      metadata\n      sdkLanguage\n      sdkVersion\n      status\n      url\n\n      deployedFunctions {\n        slug\n        name\n      }\n\n      removedFunctions {\n        slug\n        name\n      }\n    }\n  }\n": types.GetDeployDocument,
    "\n  query SearchEvents($environmentID: ID!, $lowerTime: Time!, $query: String!, $upperTime: Time!) {\n    environment: workspace(id: $environmentID) {\n      id\n      eventSearch(filter: { lowerTime: $lowerTime, query: $query, upperTime: $upperTime }) {\n        edges {\n          node {\n            id\n            name\n            receivedAt\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": types.SearchEventsDocument,
    "\n  query GetEventSearchEvent($envID: ID!, $eventID: ULID!) {\n    environment: workspace(id: $envID) {\n      event: archivedEvent(id: $eventID) {\n        id\n        name\n        payload: event\n        receivedAt\n        runs: functionRuns {\n          function {\n            id\n            name\n          }\n          id\n          output\n          status\n        }\n      }\n    }\n  }\n": types.GetEventSearchEventDocument,
    "\n  query GetEventSearchRun($envID: ID!, $functionID: ID!, $runID: ULID!) {\n    environment: workspace(id: $envID) {\n      function: workflow(id: $functionID) {\n        name\n        run(id: $runID) {\n          canRerun\n          history {\n            attempt\n            cancel {\n              eventID\n              expression\n              userID\n            }\n            createdAt\n            functionVersion\n            groupID\n            id\n            sleep {\n              until\n            }\n            stepName\n            type\n            url\n            waitForEvent {\n              eventName\n              expression\n              timeout\n            }\n            waitResult {\n              eventID\n              timeout\n            }\n          }\n          id\n          status\n          startedAt\n          endedAt\n          output\n          version: workflowVersion {\n            deploy {\n              id\n              createdAt\n            }\n            triggers {\n              eventName\n              schedule\n            }\n            url\n            validFrom\n            version\n          }\n        }\n      }\n    }\n  }\n": types.GetEventSearchRunDocument,
    "\n  query GetEventKeysForBlankSlate($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKeys(filter: { source: \"key\" }) {\n        name\n        presharedKey\n        createdAt\n      }\n    }\n  }\n": types.GetEventKeysForBlankSlateDocument,
    "\n  mutation ArchiveEvent($environmentId: ID!, $name: String!) {\n    archiveEvent(workspaceID: $environmentId, name: $name) {\n      name\n    }\n  }\n": types.ArchiveEventDocument,
    "\n  query GetLatestEventLogs($name: String, $environmentID: ID!) {\n    events(query: { name: $name, workspaceID: $environmentID }) {\n      data {\n        recent(count: 5) {\n          id\n          receivedAt\n          event\n          source {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetLatestEventLogsDocument,
    "\n  query GetEventKeys($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      eventKeys: ingestKeys {\n        name\n        value: presharedKey\n      }\n    }\n  }\n": types.GetEventKeysDocument,
    "\n  query GetEventLog($environmentID: ID!, $eventName: String!, $cursor: String, $perPage: Int!) {\n    environment: workspace(id: $environmentID) {\n      eventType: event(name: $eventName) {\n        events: recent @cursored(cursor: $cursor, perPage: $perPage) {\n          id\n          receivedAt\n        }\n      }\n    }\n  }\n": types.GetEventLogDocument,
    "\n  fragment EventPayload on ArchivedEvent {\n    payload: event\n  }\n": types.EventPayloadFragmentDoc,
    "\n  query GetFunctionRunCard($environmentID: ID!, $functionID: ID!, $functionRunID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflow(id: $functionID) {\n        name\n        slug\n        run(id: $functionRunID) {\n          id\n          status\n          startedAt\n        }\n      }\n    }\n  }\n": types.GetFunctionRunCardDocument,
    "\n  query GetEvent($environmentID: ID!, $eventID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      event: archivedEvent(id: $eventID) {\n        receivedAt\n        ...EventPayload\n        functionRuns {\n          id\n          function {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetEventDocument,
    "\n  query GetBillingPlan {\n    account {\n      plan {\n        id\n        name\n        features\n      }\n    }\n\n    plans {\n      name\n      features\n    }\n  }\n": types.GetBillingPlanDocument,
    "\n  query GetFunctionRunsMetrics(\n    $environmentID: ID!\n    $functionSlug: String!\n    $startTime: Time!\n    $endTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        completed: usage(opts: { from: $startTime, to: $endTime }, event: \"completed\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        canceled: usage(opts: { from: $startTime, to: $endTime }, event: \"cancelled\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        failed: usage(opts: { from: $startTime, to: $endTime }, event: \"errored\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n      }\n    }\n  }\n": types.GetFunctionRunsMetricsDocument,
    "\n  query GetFnMetrics($environmentID: ID!, $fnSlug: String!, $startTime: Time!, $endTime: Time!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $fnSlug) {\n        queued: metrics(\n          opts: { name: \"function_run_scheduled_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        started: metrics(\n          opts: { name: \"function_run_started_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        ended: metrics(opts: { name: \"function_run_ended_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        concurrencyLimit: metrics(\n          opts: { name: \"concurrency_limit_reached_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n      }\n    }\n  }\n": types.GetFnMetricsDocument,
    "\n  query GetFailedFunctionRuns(\n    $environmentID: ID!\n    $functionSlug: String!\n    $lowerTime: Time!\n    $upperTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        failedRuns: runsV2(\n          filter: {\n            lowerTime: $lowerTime\n            status: [FAILED]\n            timeField: ENDED_AT\n            upperTime: $upperTime\n          }\n          first: 20\n        ) {\n          edges {\n            node {\n              id\n              endedAt\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetFailedFunctionRunsDocument,
    "\n  query GetSDKRequestMetrics(\n    $environmentID: ID!\n    $fnSlug: String!\n    $startTime: Time!\n    $endTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $fnSlug) {\n        queued: metrics(opts: { name: \"sdk_req_scheduled_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        started: metrics(opts: { name: \"sdk_req_started_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n\n        ended: metrics(opts: { name: \"sdk_req_ended_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n      }\n    }\n  }\n": types.GetSdkRequestMetricsDocument,
    "\n  mutation ArchiveFunction($input: ArchiveWorkflowInput!) {\n    archiveWorkflow(input: $input) {\n      workflow {\n        id\n      }\n    }\n  }\n": types.ArchiveFunctionDocument,
    "\n  query GetFunctionArchival($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        isArchived\n        name\n      }\n    }\n  }\n": types.GetFunctionArchivalDocument,
    "\n  query GetFunctionVersionNumber($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        archivedAt\n        current {\n          version\n        }\n        previous {\n          version\n        }\n      }\n    }\n  }\n": types.GetFunctionVersionNumberDocument,
    "\n  mutation PauseFunction($input: EditWorkflowInput!) {\n    editWorkflow(input: $input) {\n      workflow {\n        id\n        name\n      }\n    }\n  }\n": types.PauseFunctionDocument,
    "\n  mutation RerunFunctionRun($environmentID: ID!, $functionID: ID!, $functionRunID: ULID!) {\n    retryWorkflowRun(\n      input: { workspaceID: $environmentID, workflowID: $functionID }\n      workflowRunID: $functionRunID\n    ) {\n      id\n    }\n  }\n": types.RerunFunctionRunDocument,
    "\n  query GetHistoryItemOutput($envID: ID!, $functionID: ID!, $historyItemID: ULID!, $runID: ULID!) {\n    environment: workspace(id: $envID) {\n      function: workflow(id: $functionID) {\n        run(id: $runID) {\n          historyItemOutput(id: $historyItemID)\n        }\n      }\n    }\n  }\n": types.GetHistoryItemOutputDocument,
    "\n  query GetFunctionRunDetails($environmentID: ID!, $functionSlug: String!, $functionRunID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        name\n        run(id: $functionRunID) {\n          canRerun\n          events {\n            id\n            name\n            payload: event\n            receivedAt\n          }\n          history {\n            attempt\n            cancel {\n              eventID\n              expression\n              userID\n            }\n            createdAt\n            functionVersion\n            groupID\n            id\n            sleep {\n              until\n            }\n            stepName\n            type\n            url\n            waitForEvent {\n              eventName\n              expression\n              timeout\n            }\n            waitResult {\n              eventID\n              timeout\n            }\n            invokeFunction {\n              eventID\n              functionID\n              correlationID\n              timeout\n            }\n            invokeFunctionResult {\n              eventID\n              timeout\n              runID\n            }\n          }\n          id\n          status\n          startedAt\n          endedAt\n          output\n          version: workflowVersion {\n            deploy {\n              id\n              createdAt\n            }\n            triggers {\n              eventName\n              schedule\n            }\n            url\n            validFrom\n            version\n          }\n        }\n        slug\n      }\n    }\n  }\n": types.GetFunctionRunDetailsDocument,
    "\n  query GetFunctionRunTriggers($environmentID: ID!, $functionSlug: String!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        current {\n          triggers {\n            schedule\n          }\n        }\n      }\n    }\n  }\n": types.GetFunctionRunTriggersDocument,
    "\n  query GetFunctionRuns(\n    $environmentID: ID!\n    $functionSlug: String!\n    $functionRunStatuses: [FunctionRunStatus!]\n    $functionRunCursor: String\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n    $timeField: FunctionRunTimeField!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        runs: runsV2(\n          filter: {\n            status: $functionRunStatuses\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: $timeField\n          }\n          first: 20\n          after: $functionRunCursor\n        ) {\n          edges {\n            node {\n              id\n              status\n              startedAt\n              endedAt\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": types.GetFunctionRunsDocument,
    "\n  query GetFunctionEndedRunsCount(\n    $environmentID: ID!\n    $functionSlug: String!\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        failedRuns: runsV2(\n          filter: {\n            status: [FAILED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n        canceledRuns: runsV2(\n          filter: {\n            status: [CANCELLED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n        succeededRuns: runsV2(\n          filter: {\n            status: [COMPLETED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n      }\n    }\n  }\n": types.GetFunctionEndedRunsCountDocument,
    "\n  mutation CreateFunctionReplay(\n    $environmentID: UUID!\n    $functionID: UUID!\n    $name: String!\n    $fromRange: ULID!\n    $toRange: ULID!\n    $statuses: [FunctionRunStatus!]\n  ) {\n    createFunctionReplay(\n      input: {\n        workspaceID: $environmentID\n        workflowID: $functionID\n        name: $name\n        fromRange: $fromRange\n        toRange: $toRange\n        statuses: $statuses\n      }\n    ) {\n      id\n    }\n  }\n": types.CreateFunctionReplayDocument,
    "\n  query GetFunctionRunsCount(\n    $environmentID: ID!\n    $functionSlug: String!\n    $functionRunStatuses: [FunctionRunStatus!]\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n    $timeField: FunctionRunTimeField!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        runs: runsV2(\n          filter: {\n            status: $functionRunStatuses\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: $timeField\n          }\n        ) {\n          totalCount\n        }\n      }\n    }\n  }\n": types.GetFunctionRunsCountDocument,
    "\n  query GetReplays($environmentID: ID!, $functionSlug: String!) {\n    environment: workspace(id: $environmentID) {\n      id\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        replays {\n          id\n          name\n          createdAt\n          endedAt\n          functionRunsScheduledCount\n        }\n      }\n    }\n  }\n": types.GetReplaysDocument,
    "\n  mutation NewIngestKey($input: NewIngestKey!) {\n    key: createIngestKey(input: $input) {\n      id\n    }\n  }\n": types.NewIngestKeyDocument,
    "\n  query GetIngestKeys($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKeys {\n        id\n        name\n        createdAt\n        source\n      }\n    }\n  }\n": types.GetIngestKeysDocument,
    "\n  mutation UpdateIngestKey($id: ID!, $input: UpdateIngestKey!) {\n    updateIngestKey(id: $id, input: $input) {\n      id\n      name\n      createdAt\n      presharedKey\n      url\n      filter {\n        type\n        ips\n        events\n      }\n      metadata\n    }\n  }\n": types.UpdateIngestKeyDocument,
    "\n  mutation DeleteEventKey($input: DeleteIngestKey!) {\n    deleteIngestKey(input: $input) {\n      ids\n    }\n  }\n": types.DeleteEventKeyDocument,
    "\n  query GetIngestKey($environmentID: ID!, $keyID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKey(id: $keyID) {\n        id\n        name\n        createdAt\n        presharedKey\n        url\n        filter {\n          type\n          ips\n          events\n        }\n        metadata\n      }\n    }\n  }\n": types.GetIngestKeyDocument,
    "\n  query GetSigningKey($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      webhookSigningKey\n    }\n  }\n": types.GetSigningKeyDocument,
    "\n  query UnattachedSync($syncID: ID!) {\n    sync: deploy(id: $syncID) {\n      commitAuthor\n      commitHash\n      commitMessage\n      commitRef\n      error\n      framework\n      id\n      lastSyncedAt\n      platform\n      repoURL\n      sdkLanguage\n      sdkVersion\n      status\n      removedFunctions: removedFunctions {\n        id\n        name\n        slug\n      }\n      syncedFunctions: deployedFunctions {\n        id\n        name\n        slug\n      }\n      url\n      vercelDeploymentID\n      vercelDeploymentURL\n      vercelProjectID\n      vercelProjectURL\n    }\n  }\n": types.UnattachedSyncDocument,
    "\n  query UnattachedSyncs($envID: ID!) {\n    environment: workspace(id: $envID) {\n      syncs: unattachedSyncs(first: 40) {\n        commitAuthor\n        commitHash\n        commitMessage\n        commitRef\n        framework\n        id\n        lastSyncedAt\n        platform\n        repoURL\n        sdkLanguage\n        sdkVersion\n        status\n        url\n        vercelDeploymentID\n        vercelDeploymentURL\n        vercelProjectID\n        vercelProjectURL\n      }\n    }\n  }\n": types.UnattachedSyncsDocument,
    "\n  query GetBillableSteps($month: Int!, $year: Int!) {\n    billableStepTimeSeries(timeOptions: { month: $month, year: $year }) {\n      data {\n        time\n        value\n      }\n    }\n  }\n": types.GetBillableStepsDocument,
    "\n  mutation UpdateAccount($input: UpdateAccount!) {\n    account: updateAccount(input: $input) {\n      billingEmail\n      name\n    }\n  }\n": types.UpdateAccountDocument,
    "\n  mutation CreateStripeSubscription($input: StripeSubscriptionInput!) {\n    createStripeSubscription(input: $input) {\n      clientSecret\n      message\n    }\n  }\n": types.CreateStripeSubscriptionDocument,
    "\n  mutation UpdatePlan($planID: ID!) {\n    updatePlan(to: $planID) {\n      plan {\n        id\n        name\n      }\n    }\n  }\n": types.UpdatePlanDocument,
    "\n  query GetPaymentIntents {\n    account {\n      paymentIntents {\n        status\n        createdAt\n        amountLabel\n        description\n        invoiceURL\n      }\n    }\n  }\n": types.GetPaymentIntentsDocument,
    "\n  mutation UpdatePaymentMethod($token: String!) {\n    updatePaymentMethod(token: $token) {\n      brand\n      last4\n      expMonth\n      expYear\n      createdAt\n      default\n    }\n  }\n": types.UpdatePaymentMethodDocument,
    "\n  query GetBillingInfo {\n    account {\n      billingEmail\n      name\n      plan {\n        id\n        name\n        amount\n        billingPeriod\n        features\n      }\n      subscription {\n        nextInvoiceDate\n      }\n\n      paymentMethods {\n        brand\n        last4\n        expMonth\n        expYear\n        createdAt\n        default\n      }\n    }\n\n    plans {\n      id\n      name\n      amount\n      billingPeriod\n      features\n    }\n  }\n": types.GetBillingInfoDocument,
    "\n  query GetSavedVercelProjects($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      savedVercelProjects: vercelApps {\n        projectID\n        path\n      }\n    }\n  }\n": types.GetSavedVercelProjectsDocument,
    "\n  mutation CreateVercelApp($input: CreateVercelAppInput!) {\n    createVercelApp(input: $input) {\n      success\n    }\n  }\n": types.CreateVercelAppDocument,
    "\n  mutation UpdateVercelApp($input: UpdateVercelAppInput!) {\n    updateVercelApp(input: $input) {\n      success\n    }\n  }\n": types.UpdateVercelAppDocument,
    "\n  mutation RemoveVercelApp($input: RemoveVercelAppInput!) {\n    removeVercelApp(input: $input) {\n      success\n    }\n  }\n": types.RemoveVercelAppDocument,
    "\n  mutation DeleteUser($id: ID!) {\n    deleteUser(id: $id)\n  }\n": types.DeleteUserDocument,
    "\n  mutation CreateUser($input: NewUser!) {\n    createUser(input: $input) {\n      id\n    }\n  }\n": types.CreateUserDocument,
    "\n  query GetUsers {\n    account {\n      users {\n        createdAt\n        email\n        id\n        lastLoginAt\n        name\n      }\n    }\n\n    session {\n      user {\n        id\n      }\n    }\n  }\n": types.GetUsersDocument,
    "\n  mutation CreateWebhook($input: NewIngestKey!) {\n    key: createIngestKey(input: $input) {\n      id\n      url\n    }\n  }\n": types.CreateWebhookDocument,
    "\n  mutation CompleteAWSMarketplaceSetup($input: AWSMarketplaceSetupInput!) {\n    completeAWSMarketplaceSetup(input: $input) {\n      message\n    }\n  }\n": types.CompleteAwsMarketplaceSetupDocument,
    "\n  query GetAccountSupportInfo {\n    account {\n      id\n      plan {\n        id\n        name\n        amount\n        features\n      }\n    }\n  }\n": types.GetAccountSupportInfoDocument,
    "\n  query GetAccountCreationTime {\n    account {\n      createdAt\n    }\n  }\n": types.GetAccountCreationTimeDocument,
    "\n  query GetGlobalSearch($opts: SearchInput!) {\n    account {\n      search(opts: $opts) {\n        results {\n          env {\n            name\n            id\n            type\n          }\n          kind\n          value {\n            ... on ArchivedEvent {\n              id\n              name\n            }\n            ... on FunctionRun {\n              id\n              functionID: workflowID\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetGlobalSearchDocument,
    "\n  query GetFunctionSlug($environmentID: ID!, $functionID: ID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflow(id: $functionID) {\n        slug\n        name\n      }\n    }\n  }\n": types.GetFunctionSlugDocument,
    "\n  query GetDeployss($environmentID: ID!) {\n    deploys(workspaceID: $environmentID) {\n      id\n      appName\n      authorID\n      checksum\n      createdAt\n      error\n      framework\n      metadata\n      sdkLanguage\n      sdkVersion\n      status\n\n      deployedFunctions {\n        id\n        name\n      }\n\n      removedFunctions {\n        id\n        name\n      }\n    }\n  }\n": types.GetDeployssDocument,
    "\n  query GetEnvironments {\n    workspaces {\n      id\n      name\n      parentID\n      test\n      type\n      webhookSigningKey\n      createdAt\n      isArchived\n      functionCount\n      isAutoArchiveEnabled\n      lastDeployedAt\n    }\n  }\n": types.GetEnvironmentsDocument,
    "\n  query GetEventTypes($environmentID: ID!, $page: Int) {\n    workspace(id: $environmentID) {\n      events @paginated(perPage: 50, page: $page) {\n        data {\n          name\n          functions: workflows {\n            id\n            slug\n            name\n          }\n          dailyVolume: usage(opts: { period: \"hour\", range: \"day\" }) {\n            total\n            data {\n              count\n            }\n          }\n        }\n        page {\n          page\n          totalPages\n        }\n      }\n    }\n  }\n": types.GetEventTypesDocument,
    "\n  query GetEventType($eventName: String, $environmentID: ID!) {\n    events(query: { name: $eventName, workspaceID: $environmentID }) {\n      data {\n        name\n        usage(opts: { period: \"hour\", range: \"day\" }) {\n          total\n          data {\n            slot\n            count\n          }\n        }\n        workflows {\n          id\n          slug\n          name\n          current {\n            createdAt\n          }\n        }\n      }\n    }\n  }\n": types.GetEventTypeDocument,
    "\n  query GetFunctionsUsage($environmentID: ID!, $page: Int, $archived: Boolean, $pageSize: Int) {\n    workspace(id: $environmentID) {\n      workflows(archived: $archived) @paginated(perPage: $pageSize, page: $page) {\n        page {\n          page\n          perPage\n          totalItems\n          totalPages\n        }\n        data {\n          id\n          slug\n          dailyStarts: usage(opts: { period: \"hour\", range: \"day\" }, event: \"started\") {\n            total\n            data {\n              count\n            }\n          }\n          dailyFailures: usage(opts: { period: \"hour\", range: \"day\" }, event: \"errored\") {\n            total\n            data {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetFunctionsUsageDocument,
    "\n  query GetFunctions($environmentID: ID!, $page: Int, $archived: Boolean, $pageSize: Int) {\n    workspace(id: $environmentID) {\n      workflows(archived: $archived) @paginated(perPage: $pageSize, page: $page) {\n        page {\n          page\n          perPage\n          totalItems\n          totalPages\n        }\n        data {\n          appName\n          id\n          slug\n          name\n          isArchived\n          current {\n            triggers {\n              eventName\n              schedule\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetFunctionsDocument,
    "\n  query GetFunction($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      id\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        name\n        slug\n        isArchived\n        appName\n        current {\n          triggers {\n            eventName\n            schedule\n            condition\n          }\n          deploy {\n            id\n            createdAt\n          }\n        }\n        failureHandler {\n          slug\n          name\n        }\n        configuration {\n          cancellations {\n            event\n            timeout\n            condition\n          }\n          retries {\n            value\n            isDefault\n          }\n          priority\n          eventsBatch {\n            maxSize\n            timeout\n          }\n          concurrency {\n            scope\n            limit {\n              value\n              isPlanLimit\n            }\n            key\n          }\n          rateLimit {\n            limit\n            period\n            key\n          }\n          debounce {\n            period\n            key\n          }\n        }\n      }\n    }\n  }\n": types.GetFunctionDocument,
    "\n  query GetFunctionUsage($id: ID!, $environmentID: ID!, $startTime: Time!, $endTime: Time!) {\n    workspace(id: $environmentID) {\n      workflow(id: $id) {\n        dailyStarts: usage(opts: { from: $startTime, to: $endTime }, event: \"started\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        dailyFailures: usage(opts: { from: $startTime, to: $endTime }, event: \"errored\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n      }\n    }\n  }\n": types.GetFunctionUsageDocument,
    "\n  query GetAllEnvironments {\n    workspaces {\n      id\n      name\n      parentID\n      test\n      type\n      createdAt\n      lastDeployedAt\n      isArchived\n      isAutoArchiveEnabled\n    }\n  }\n": types.GetAllEnvironmentsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateEnvironment($name: String!) {\n    createWorkspace(input: { name: $name }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEnvironment($name: String!) {\n    createWorkspace(input: { name: $name }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ArchiveEnvironment($id: ID!) {\n    archiveEnvironment(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveEnvironment($id: ID!) {\n    archiveEnvironment(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UnarchiveEnvironment($id: ID!) {\n    unarchiveEnvironment(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UnarchiveEnvironment($id: ID!) {\n    unarchiveEnvironment(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DisableEnvironmentAutoArchiveDocument($id: ID!) {\n    disableEnvironmentAutoArchive(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DisableEnvironmentAutoArchiveDocument($id: ID!) {\n    disableEnvironmentAutoArchive(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EnableEnvironmentAutoArchive($id: ID!) {\n    enableEnvironmentAutoArchive(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation EnableEnvironmentAutoArchive($id: ID!) {\n    enableEnvironmentAutoArchive(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Sync($envID: ID!, $externalAppID: String!, $syncID: ID!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        externalID\n        name\n      }\n    }\n    sync: deploy(id: $syncID) {\n      commitAuthor\n      commitHash\n      commitMessage\n      commitRef\n      error\n      framework\n      id\n      lastSyncedAt\n      platform\n      repoURL\n      sdkLanguage\n      sdkVersion\n      status\n      removedFunctions: removedFunctions {\n        id\n        name\n        slug\n      }\n      syncedFunctions: deployedFunctions {\n        id\n        name\n        slug\n      }\n      url\n      vercelDeploymentID\n      vercelDeploymentURL\n      vercelProjectID\n      vercelProjectURL\n    }\n  }\n"): (typeof documents)["\n  query Sync($envID: ID!, $externalAppID: String!, $syncID: ID!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        externalID\n        name\n      }\n    }\n    sync: deploy(id: $syncID) {\n      commitAuthor\n      commitHash\n      commitMessage\n      commitRef\n      error\n      framework\n      id\n      lastSyncedAt\n      platform\n      repoURL\n      sdkLanguage\n      sdkVersion\n      status\n      removedFunctions: removedFunctions {\n        id\n        name\n        slug\n      }\n      syncedFunctions: deployedFunctions {\n        id\n        name\n        slug\n      }\n      url\n      vercelDeploymentID\n      vercelDeploymentURL\n      vercelProjectID\n      vercelProjectURL\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AppSyncs($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        syncs(first: 40) {\n          commitAuthor\n          commitHash\n          commitMessage\n          commitRef\n          framework\n          id\n          lastSyncedAt\n          platform\n          removedFunctions {\n            id\n            name\n            slug\n          }\n          repoURL\n          sdkLanguage\n          sdkVersion\n          status\n          syncedFunctions: deployedFunctions {\n            id\n            name\n            slug\n          }\n          url\n          vercelDeploymentID\n          vercelDeploymentURL\n          vercelProjectID\n          vercelProjectURL\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AppSyncs($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        syncs(first: 40) {\n          commitAuthor\n          commitHash\n          commitMessage\n          commitRef\n          framework\n          id\n          lastSyncedAt\n          platform\n          removedFunctions {\n            id\n            name\n            slug\n          }\n          repoURL\n          sdkLanguage\n          sdkVersion\n          status\n          syncedFunctions: deployedFunctions {\n            id\n            name\n            slug\n          }\n          url\n          vercelDeploymentID\n          vercelDeploymentURL\n          vercelProjectID\n          vercelProjectURL\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query App($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        externalID\n        functions {\n          id\n          latestVersion {\n            triggers {\n              eventName\n              schedule\n            }\n          }\n          name\n          slug\n        }\n        name\n        latestSync {\n          commitAuthor\n          commitHash\n          commitMessage\n          commitRef\n          error\n          framework\n          id\n          lastSyncedAt\n          platform\n          repoURL\n          sdkLanguage\n          sdkVersion\n          status\n          url\n          vercelDeploymentID\n          vercelDeploymentURL\n          vercelProjectID\n          vercelProjectURL\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query App($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        id\n        externalID\n        functions {\n          id\n          latestVersion {\n            triggers {\n              eventName\n              schedule\n            }\n          }\n          name\n          slug\n        }\n        name\n        latestSync {\n          commitAuthor\n          commitHash\n          commitMessage\n          commitRef\n          error\n          framework\n          id\n          lastSyncedAt\n          platform\n          repoURL\n          sdkLanguage\n          sdkVersion\n          status\n          url\n          vercelDeploymentID\n          vercelDeploymentURL\n          vercelProjectID\n          vercelProjectURL\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AppNavData($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        latestSync {\n          platform\n          url\n        }\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query AppNavData($envID: ID!, $externalAppID: String!) {\n    environment: workspace(id: $envID) {\n      app: appByExternalID(externalID: $externalAppID) {\n        latestSync {\n          platform\n          url\n        }\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Apps($envID: ID!) {\n    environment: workspace(id: $envID) {\n      apps {\n        id\n        externalID\n        functionCount\n        name\n        latestSync {\n          error\n          framework\n          id\n          lastSyncedAt\n          platform\n          sdkLanguage\n          sdkVersion\n          status\n          url\n        }\n      }\n\n      unattachedSyncs(first: 1) {\n        lastSyncedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query Apps($envID: ID!) {\n    environment: workspace(id: $envID) {\n      apps {\n        id\n        externalID\n        functionCount\n        name\n        latestSync {\n          error\n          framework\n          id\n          lastSyncedAt\n          platform\n          sdkLanguage\n          sdkVersion\n          status\n          url\n        }\n      }\n\n      unattachedSyncs(first: 1) {\n        lastSyncedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDeploy($deployID: ID!) {\n    deploy(id: $deployID) {\n      id\n      appName\n      authorID\n      checksum\n      createdAt\n      error\n      framework\n      metadata\n      sdkLanguage\n      sdkVersion\n      status\n      url\n\n      deployedFunctions {\n        slug\n        name\n      }\n\n      removedFunctions {\n        slug\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDeploy($deployID: ID!) {\n    deploy(id: $deployID) {\n      id\n      appName\n      authorID\n      checksum\n      createdAt\n      error\n      framework\n      metadata\n      sdkLanguage\n      sdkVersion\n      status\n      url\n\n      deployedFunctions {\n        slug\n        name\n      }\n\n      removedFunctions {\n        slug\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchEvents($environmentID: ID!, $lowerTime: Time!, $query: String!, $upperTime: Time!) {\n    environment: workspace(id: $environmentID) {\n      id\n      eventSearch(filter: { lowerTime: $lowerTime, query: $query, upperTime: $upperTime }) {\n        edges {\n          node {\n            id\n            name\n            receivedAt\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchEvents($environmentID: ID!, $lowerTime: Time!, $query: String!, $upperTime: Time!) {\n    environment: workspace(id: $environmentID) {\n      id\n      eventSearch(filter: { lowerTime: $lowerTime, query: $query, upperTime: $upperTime }) {\n        edges {\n          node {\n            id\n            name\n            receivedAt\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventSearchEvent($envID: ID!, $eventID: ULID!) {\n    environment: workspace(id: $envID) {\n      event: archivedEvent(id: $eventID) {\n        id\n        name\n        payload: event\n        receivedAt\n        runs: functionRuns {\n          function {\n            id\n            name\n          }\n          id\n          output\n          status\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventSearchEvent($envID: ID!, $eventID: ULID!) {\n    environment: workspace(id: $envID) {\n      event: archivedEvent(id: $eventID) {\n        id\n        name\n        payload: event\n        receivedAt\n        runs: functionRuns {\n          function {\n            id\n            name\n          }\n          id\n          output\n          status\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventSearchRun($envID: ID!, $functionID: ID!, $runID: ULID!) {\n    environment: workspace(id: $envID) {\n      function: workflow(id: $functionID) {\n        name\n        run(id: $runID) {\n          canRerun\n          history {\n            attempt\n            cancel {\n              eventID\n              expression\n              userID\n            }\n            createdAt\n            functionVersion\n            groupID\n            id\n            sleep {\n              until\n            }\n            stepName\n            type\n            url\n            waitForEvent {\n              eventName\n              expression\n              timeout\n            }\n            waitResult {\n              eventID\n              timeout\n            }\n          }\n          id\n          status\n          startedAt\n          endedAt\n          output\n          version: workflowVersion {\n            deploy {\n              id\n              createdAt\n            }\n            triggers {\n              eventName\n              schedule\n            }\n            url\n            validFrom\n            version\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventSearchRun($envID: ID!, $functionID: ID!, $runID: ULID!) {\n    environment: workspace(id: $envID) {\n      function: workflow(id: $functionID) {\n        name\n        run(id: $runID) {\n          canRerun\n          history {\n            attempt\n            cancel {\n              eventID\n              expression\n              userID\n            }\n            createdAt\n            functionVersion\n            groupID\n            id\n            sleep {\n              until\n            }\n            stepName\n            type\n            url\n            waitForEvent {\n              eventName\n              expression\n              timeout\n            }\n            waitResult {\n              eventID\n              timeout\n            }\n          }\n          id\n          status\n          startedAt\n          endedAt\n          output\n          version: workflowVersion {\n            deploy {\n              id\n              createdAt\n            }\n            triggers {\n              eventName\n              schedule\n            }\n            url\n            validFrom\n            version\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventKeysForBlankSlate($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKeys(filter: { source: \"key\" }) {\n        name\n        presharedKey\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventKeysForBlankSlate($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKeys(filter: { source: \"key\" }) {\n        name\n        presharedKey\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ArchiveEvent($environmentId: ID!, $name: String!) {\n    archiveEvent(workspaceID: $environmentId, name: $name) {\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveEvent($environmentId: ID!, $name: String!) {\n    archiveEvent(workspaceID: $environmentId, name: $name) {\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLatestEventLogs($name: String, $environmentID: ID!) {\n    events(query: { name: $name, workspaceID: $environmentID }) {\n      data {\n        recent(count: 5) {\n          id\n          receivedAt\n          event\n          source {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestEventLogs($name: String, $environmentID: ID!) {\n    events(query: { name: $name, workspaceID: $environmentID }) {\n      data {\n        recent(count: 5) {\n          id\n          receivedAt\n          event\n          source {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventKeys($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      eventKeys: ingestKeys {\n        name\n        value: presharedKey\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventKeys($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      eventKeys: ingestKeys {\n        name\n        value: presharedKey\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventLog($environmentID: ID!, $eventName: String!, $cursor: String, $perPage: Int!) {\n    environment: workspace(id: $environmentID) {\n      eventType: event(name: $eventName) {\n        events: recent @cursored(cursor: $cursor, perPage: $perPage) {\n          id\n          receivedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventLog($environmentID: ID!, $eventName: String!, $cursor: String, $perPage: Int!) {\n    environment: workspace(id: $environmentID) {\n      eventType: event(name: $eventName) {\n        events: recent @cursored(cursor: $cursor, perPage: $perPage) {\n          id\n          receivedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EventPayload on ArchivedEvent {\n    payload: event\n  }\n"): (typeof documents)["\n  fragment EventPayload on ArchivedEvent {\n    payload: event\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionRunCard($environmentID: ID!, $functionID: ID!, $functionRunID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflow(id: $functionID) {\n        name\n        slug\n        run(id: $functionRunID) {\n          id\n          status\n          startedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionRunCard($environmentID: ID!, $functionID: ID!, $functionRunID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflow(id: $functionID) {\n        name\n        slug\n        run(id: $functionRunID) {\n          id\n          status\n          startedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEvent($environmentID: ID!, $eventID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      event: archivedEvent(id: $eventID) {\n        receivedAt\n        ...EventPayload\n        functionRuns {\n          id\n          function {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEvent($environmentID: ID!, $eventID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      event: archivedEvent(id: $eventID) {\n        receivedAt\n        ...EventPayload\n        functionRuns {\n          id\n          function {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBillingPlan {\n    account {\n      plan {\n        id\n        name\n        features\n      }\n    }\n\n    plans {\n      name\n      features\n    }\n  }\n"): (typeof documents)["\n  query GetBillingPlan {\n    account {\n      plan {\n        id\n        name\n        features\n      }\n    }\n\n    plans {\n      name\n      features\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionRunsMetrics(\n    $environmentID: ID!\n    $functionSlug: String!\n    $startTime: Time!\n    $endTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        completed: usage(opts: { from: $startTime, to: $endTime }, event: \"completed\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        canceled: usage(opts: { from: $startTime, to: $endTime }, event: \"cancelled\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        failed: usage(opts: { from: $startTime, to: $endTime }, event: \"errored\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionRunsMetrics(\n    $environmentID: ID!\n    $functionSlug: String!\n    $startTime: Time!\n    $endTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        completed: usage(opts: { from: $startTime, to: $endTime }, event: \"completed\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        canceled: usage(opts: { from: $startTime, to: $endTime }, event: \"cancelled\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        failed: usage(opts: { from: $startTime, to: $endTime }, event: \"errored\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFnMetrics($environmentID: ID!, $fnSlug: String!, $startTime: Time!, $endTime: Time!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $fnSlug) {\n        queued: metrics(\n          opts: { name: \"function_run_scheduled_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        started: metrics(\n          opts: { name: \"function_run_started_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        ended: metrics(opts: { name: \"function_run_ended_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        concurrencyLimit: metrics(\n          opts: { name: \"concurrency_limit_reached_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFnMetrics($environmentID: ID!, $fnSlug: String!, $startTime: Time!, $endTime: Time!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $fnSlug) {\n        queued: metrics(\n          opts: { name: \"function_run_scheduled_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        started: metrics(\n          opts: { name: \"function_run_started_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        ended: metrics(opts: { name: \"function_run_ended_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        concurrencyLimit: metrics(\n          opts: { name: \"concurrency_limit_reached_total\", from: $startTime, to: $endTime }\n        ) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFailedFunctionRuns(\n    $environmentID: ID!\n    $functionSlug: String!\n    $lowerTime: Time!\n    $upperTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        failedRuns: runsV2(\n          filter: {\n            lowerTime: $lowerTime\n            status: [FAILED]\n            timeField: ENDED_AT\n            upperTime: $upperTime\n          }\n          first: 20\n        ) {\n          edges {\n            node {\n              id\n              endedAt\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFailedFunctionRuns(\n    $environmentID: ID!\n    $functionSlug: String!\n    $lowerTime: Time!\n    $upperTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        failedRuns: runsV2(\n          filter: {\n            lowerTime: $lowerTime\n            status: [FAILED]\n            timeField: ENDED_AT\n            upperTime: $upperTime\n          }\n          first: 20\n        ) {\n          edges {\n            node {\n              id\n              endedAt\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSDKRequestMetrics(\n    $environmentID: ID!\n    $fnSlug: String!\n    $startTime: Time!\n    $endTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $fnSlug) {\n        queued: metrics(opts: { name: \"sdk_req_scheduled_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        started: metrics(opts: { name: \"sdk_req_started_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n\n        ended: metrics(opts: { name: \"sdk_req_ended_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSDKRequestMetrics(\n    $environmentID: ID!\n    $fnSlug: String!\n    $startTime: Time!\n    $endTime: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $fnSlug) {\n        queued: metrics(opts: { name: \"sdk_req_scheduled_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n        started: metrics(opts: { name: \"sdk_req_started_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n\n        ended: metrics(opts: { name: \"sdk_req_ended_total\", from: $startTime, to: $endTime }) {\n          from\n          to\n          granularity\n          data {\n            bucket\n            value\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ArchiveFunction($input: ArchiveWorkflowInput!) {\n    archiveWorkflow(input: $input) {\n      workflow {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveFunction($input: ArchiveWorkflowInput!) {\n    archiveWorkflow(input: $input) {\n      workflow {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionArchival($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        isArchived\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionArchival($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        isArchived\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionVersionNumber($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        archivedAt\n        current {\n          version\n        }\n        previous {\n          version\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionVersionNumber($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        archivedAt\n        current {\n          version\n        }\n        previous {\n          version\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PauseFunction($input: EditWorkflowInput!) {\n    editWorkflow(input: $input) {\n      workflow {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PauseFunction($input: EditWorkflowInput!) {\n    editWorkflow(input: $input) {\n      workflow {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RerunFunctionRun($environmentID: ID!, $functionID: ID!, $functionRunID: ULID!) {\n    retryWorkflowRun(\n      input: { workspaceID: $environmentID, workflowID: $functionID }\n      workflowRunID: $functionRunID\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RerunFunctionRun($environmentID: ID!, $functionID: ID!, $functionRunID: ULID!) {\n    retryWorkflowRun(\n      input: { workspaceID: $environmentID, workflowID: $functionID }\n      workflowRunID: $functionRunID\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHistoryItemOutput($envID: ID!, $functionID: ID!, $historyItemID: ULID!, $runID: ULID!) {\n    environment: workspace(id: $envID) {\n      function: workflow(id: $functionID) {\n        run(id: $runID) {\n          historyItemOutput(id: $historyItemID)\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHistoryItemOutput($envID: ID!, $functionID: ID!, $historyItemID: ULID!, $runID: ULID!) {\n    environment: workspace(id: $envID) {\n      function: workflow(id: $functionID) {\n        run(id: $runID) {\n          historyItemOutput(id: $historyItemID)\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionRunDetails($environmentID: ID!, $functionSlug: String!, $functionRunID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        name\n        run(id: $functionRunID) {\n          canRerun\n          events {\n            id\n            name\n            payload: event\n            receivedAt\n          }\n          history {\n            attempt\n            cancel {\n              eventID\n              expression\n              userID\n            }\n            createdAt\n            functionVersion\n            groupID\n            id\n            sleep {\n              until\n            }\n            stepName\n            type\n            url\n            waitForEvent {\n              eventName\n              expression\n              timeout\n            }\n            waitResult {\n              eventID\n              timeout\n            }\n            invokeFunction {\n              eventID\n              functionID\n              correlationID\n              timeout\n            }\n            invokeFunctionResult {\n              eventID\n              timeout\n              runID\n            }\n          }\n          id\n          status\n          startedAt\n          endedAt\n          output\n          version: workflowVersion {\n            deploy {\n              id\n              createdAt\n            }\n            triggers {\n              eventName\n              schedule\n            }\n            url\n            validFrom\n            version\n          }\n        }\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionRunDetails($environmentID: ID!, $functionSlug: String!, $functionRunID: ULID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        name\n        run(id: $functionRunID) {\n          canRerun\n          events {\n            id\n            name\n            payload: event\n            receivedAt\n          }\n          history {\n            attempt\n            cancel {\n              eventID\n              expression\n              userID\n            }\n            createdAt\n            functionVersion\n            groupID\n            id\n            sleep {\n              until\n            }\n            stepName\n            type\n            url\n            waitForEvent {\n              eventName\n              expression\n              timeout\n            }\n            waitResult {\n              eventID\n              timeout\n            }\n            invokeFunction {\n              eventID\n              functionID\n              correlationID\n              timeout\n            }\n            invokeFunctionResult {\n              eventID\n              timeout\n              runID\n            }\n          }\n          id\n          status\n          startedAt\n          endedAt\n          output\n          version: workflowVersion {\n            deploy {\n              id\n              createdAt\n            }\n            triggers {\n              eventName\n              schedule\n            }\n            url\n            validFrom\n            version\n          }\n        }\n        slug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionRunTriggers($environmentID: ID!, $functionSlug: String!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        current {\n          triggers {\n            schedule\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionRunTriggers($environmentID: ID!, $functionSlug: String!) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        current {\n          triggers {\n            schedule\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionRuns(\n    $environmentID: ID!\n    $functionSlug: String!\n    $functionRunStatuses: [FunctionRunStatus!]\n    $functionRunCursor: String\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n    $timeField: FunctionRunTimeField!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        runs: runsV2(\n          filter: {\n            status: $functionRunStatuses\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: $timeField\n          }\n          first: 20\n          after: $functionRunCursor\n        ) {\n          edges {\n            node {\n              id\n              status\n              startedAt\n              endedAt\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionRuns(\n    $environmentID: ID!\n    $functionSlug: String!\n    $functionRunStatuses: [FunctionRunStatus!]\n    $functionRunCursor: String\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n    $timeField: FunctionRunTimeField!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        runs: runsV2(\n          filter: {\n            status: $functionRunStatuses\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: $timeField\n          }\n          first: 20\n          after: $functionRunCursor\n        ) {\n          edges {\n            node {\n              id\n              status\n              startedAt\n              endedAt\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionEndedRunsCount(\n    $environmentID: ID!\n    $functionSlug: String!\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        failedRuns: runsV2(\n          filter: {\n            status: [FAILED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n        canceledRuns: runsV2(\n          filter: {\n            status: [CANCELLED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n        succeededRuns: runsV2(\n          filter: {\n            status: [COMPLETED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionEndedRunsCount(\n    $environmentID: ID!\n    $functionSlug: String!\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        failedRuns: runsV2(\n          filter: {\n            status: [FAILED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n        canceledRuns: runsV2(\n          filter: {\n            status: [CANCELLED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n        succeededRuns: runsV2(\n          filter: {\n            status: [COMPLETED]\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: STARTED_AT\n          }\n        ) {\n          totalCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateFunctionReplay(\n    $environmentID: UUID!\n    $functionID: UUID!\n    $name: String!\n    $fromRange: ULID!\n    $toRange: ULID!\n    $statuses: [FunctionRunStatus!]\n  ) {\n    createFunctionReplay(\n      input: {\n        workspaceID: $environmentID\n        workflowID: $functionID\n        name: $name\n        fromRange: $fromRange\n        toRange: $toRange\n        statuses: $statuses\n      }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateFunctionReplay(\n    $environmentID: UUID!\n    $functionID: UUID!\n    $name: String!\n    $fromRange: ULID!\n    $toRange: ULID!\n    $statuses: [FunctionRunStatus!]\n  ) {\n    createFunctionReplay(\n      input: {\n        workspaceID: $environmentID\n        workflowID: $functionID\n        name: $name\n        fromRange: $fromRange\n        toRange: $toRange\n        statuses: $statuses\n      }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionRunsCount(\n    $environmentID: ID!\n    $functionSlug: String!\n    $functionRunStatuses: [FunctionRunStatus!]\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n    $timeField: FunctionRunTimeField!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        runs: runsV2(\n          filter: {\n            status: $functionRunStatuses\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: $timeField\n          }\n        ) {\n          totalCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionRunsCount(\n    $environmentID: ID!\n    $functionSlug: String!\n    $functionRunStatuses: [FunctionRunStatus!]\n    $timeRangeStart: Time!\n    $timeRangeEnd: Time!\n    $timeField: FunctionRunTimeField!\n  ) {\n    environment: workspace(id: $environmentID) {\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        runs: runsV2(\n          filter: {\n            status: $functionRunStatuses\n            lowerTime: $timeRangeStart\n            upperTime: $timeRangeEnd\n            timeField: $timeField\n          }\n        ) {\n          totalCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetReplays($environmentID: ID!, $functionSlug: String!) {\n    environment: workspace(id: $environmentID) {\n      id\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        replays {\n          id\n          name\n          createdAt\n          endedAt\n          functionRunsScheduledCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReplays($environmentID: ID!, $functionSlug: String!) {\n    environment: workspace(id: $environmentID) {\n      id\n      function: workflowBySlug(slug: $functionSlug) {\n        id\n        replays {\n          id\n          name\n          createdAt\n          endedAt\n          functionRunsScheduledCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation NewIngestKey($input: NewIngestKey!) {\n    key: createIngestKey(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation NewIngestKey($input: NewIngestKey!) {\n    key: createIngestKey(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetIngestKeys($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKeys {\n        id\n        name\n        createdAt\n        source\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetIngestKeys($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKeys {\n        id\n        name\n        createdAt\n        source\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateIngestKey($id: ID!, $input: UpdateIngestKey!) {\n    updateIngestKey(id: $id, input: $input) {\n      id\n      name\n      createdAt\n      presharedKey\n      url\n      filter {\n        type\n        ips\n        events\n      }\n      metadata\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateIngestKey($id: ID!, $input: UpdateIngestKey!) {\n    updateIngestKey(id: $id, input: $input) {\n      id\n      name\n      createdAt\n      presharedKey\n      url\n      filter {\n        type\n        ips\n        events\n      }\n      metadata\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteEventKey($input: DeleteIngestKey!) {\n    deleteIngestKey(input: $input) {\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteEventKey($input: DeleteIngestKey!) {\n    deleteIngestKey(input: $input) {\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetIngestKey($environmentID: ID!, $keyID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKey(id: $keyID) {\n        id\n        name\n        createdAt\n        presharedKey\n        url\n        filter {\n          type\n          ips\n          events\n        }\n        metadata\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetIngestKey($environmentID: ID!, $keyID: ID!) {\n    environment: workspace(id: $environmentID) {\n      ingestKey(id: $keyID) {\n        id\n        name\n        createdAt\n        presharedKey\n        url\n        filter {\n          type\n          ips\n          events\n        }\n        metadata\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSigningKey($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      webhookSigningKey\n    }\n  }\n"): (typeof documents)["\n  query GetSigningKey($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      webhookSigningKey\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UnattachedSync($syncID: ID!) {\n    sync: deploy(id: $syncID) {\n      commitAuthor\n      commitHash\n      commitMessage\n      commitRef\n      error\n      framework\n      id\n      lastSyncedAt\n      platform\n      repoURL\n      sdkLanguage\n      sdkVersion\n      status\n      removedFunctions: removedFunctions {\n        id\n        name\n        slug\n      }\n      syncedFunctions: deployedFunctions {\n        id\n        name\n        slug\n      }\n      url\n      vercelDeploymentID\n      vercelDeploymentURL\n      vercelProjectID\n      vercelProjectURL\n    }\n  }\n"): (typeof documents)["\n  query UnattachedSync($syncID: ID!) {\n    sync: deploy(id: $syncID) {\n      commitAuthor\n      commitHash\n      commitMessage\n      commitRef\n      error\n      framework\n      id\n      lastSyncedAt\n      platform\n      repoURL\n      sdkLanguage\n      sdkVersion\n      status\n      removedFunctions: removedFunctions {\n        id\n        name\n        slug\n      }\n      syncedFunctions: deployedFunctions {\n        id\n        name\n        slug\n      }\n      url\n      vercelDeploymentID\n      vercelDeploymentURL\n      vercelProjectID\n      vercelProjectURL\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UnattachedSyncs($envID: ID!) {\n    environment: workspace(id: $envID) {\n      syncs: unattachedSyncs(first: 40) {\n        commitAuthor\n        commitHash\n        commitMessage\n        commitRef\n        framework\n        id\n        lastSyncedAt\n        platform\n        repoURL\n        sdkLanguage\n        sdkVersion\n        status\n        url\n        vercelDeploymentID\n        vercelDeploymentURL\n        vercelProjectID\n        vercelProjectURL\n      }\n    }\n  }\n"): (typeof documents)["\n  query UnattachedSyncs($envID: ID!) {\n    environment: workspace(id: $envID) {\n      syncs: unattachedSyncs(first: 40) {\n        commitAuthor\n        commitHash\n        commitMessage\n        commitRef\n        framework\n        id\n        lastSyncedAt\n        platform\n        repoURL\n        sdkLanguage\n        sdkVersion\n        status\n        url\n        vercelDeploymentID\n        vercelDeploymentURL\n        vercelProjectID\n        vercelProjectURL\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBillableSteps($month: Int!, $year: Int!) {\n    billableStepTimeSeries(timeOptions: { month: $month, year: $year }) {\n      data {\n        time\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBillableSteps($month: Int!, $year: Int!) {\n    billableStepTimeSeries(timeOptions: { month: $month, year: $year }) {\n      data {\n        time\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAccount($input: UpdateAccount!) {\n    account: updateAccount(input: $input) {\n      billingEmail\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAccount($input: UpdateAccount!) {\n    account: updateAccount(input: $input) {\n      billingEmail\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateStripeSubscription($input: StripeSubscriptionInput!) {\n    createStripeSubscription(input: $input) {\n      clientSecret\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStripeSubscription($input: StripeSubscriptionInput!) {\n    createStripeSubscription(input: $input) {\n      clientSecret\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePlan($planID: ID!) {\n    updatePlan(to: $planID) {\n      plan {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePlan($planID: ID!) {\n    updatePlan(to: $planID) {\n      plan {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPaymentIntents {\n    account {\n      paymentIntents {\n        status\n        createdAt\n        amountLabel\n        description\n        invoiceURL\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPaymentIntents {\n    account {\n      paymentIntents {\n        status\n        createdAt\n        amountLabel\n        description\n        invoiceURL\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePaymentMethod($token: String!) {\n    updatePaymentMethod(token: $token) {\n      brand\n      last4\n      expMonth\n      expYear\n      createdAt\n      default\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePaymentMethod($token: String!) {\n    updatePaymentMethod(token: $token) {\n      brand\n      last4\n      expMonth\n      expYear\n      createdAt\n      default\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBillingInfo {\n    account {\n      billingEmail\n      name\n      plan {\n        id\n        name\n        amount\n        billingPeriod\n        features\n      }\n      subscription {\n        nextInvoiceDate\n      }\n\n      paymentMethods {\n        brand\n        last4\n        expMonth\n        expYear\n        createdAt\n        default\n      }\n    }\n\n    plans {\n      id\n      name\n      amount\n      billingPeriod\n      features\n    }\n  }\n"): (typeof documents)["\n  query GetBillingInfo {\n    account {\n      billingEmail\n      name\n      plan {\n        id\n        name\n        amount\n        billingPeriod\n        features\n      }\n      subscription {\n        nextInvoiceDate\n      }\n\n      paymentMethods {\n        brand\n        last4\n        expMonth\n        expYear\n        createdAt\n        default\n      }\n    }\n\n    plans {\n      id\n      name\n      amount\n      billingPeriod\n      features\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSavedVercelProjects($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      savedVercelProjects: vercelApps {\n        projectID\n        path\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSavedVercelProjects($environmentID: ID!) {\n    environment: workspace(id: $environmentID) {\n      savedVercelProjects: vercelApps {\n        projectID\n        path\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateVercelApp($input: CreateVercelAppInput!) {\n    createVercelApp(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation CreateVercelApp($input: CreateVercelAppInput!) {\n    createVercelApp(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateVercelApp($input: UpdateVercelAppInput!) {\n    updateVercelApp(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateVercelApp($input: UpdateVercelAppInput!) {\n    updateVercelApp(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveVercelApp($input: RemoveVercelAppInput!) {\n    removeVercelApp(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveVercelApp($input: RemoveVercelAppInput!) {\n    removeVercelApp(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUser($id: ID!) {\n    deleteUser(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteUser($id: ID!) {\n    deleteUser(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUser($input: NewUser!) {\n    createUser(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUser($input: NewUser!) {\n    createUser(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsers {\n    account {\n      users {\n        createdAt\n        email\n        id\n        lastLoginAt\n        name\n      }\n    }\n\n    session {\n      user {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUsers {\n    account {\n      users {\n        createdAt\n        email\n        id\n        lastLoginAt\n        name\n      }\n    }\n\n    session {\n      user {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWebhook($input: NewIngestKey!) {\n    key: createIngestKey(input: $input) {\n      id\n      url\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWebhook($input: NewIngestKey!) {\n    key: createIngestKey(input: $input) {\n      id\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CompleteAWSMarketplaceSetup($input: AWSMarketplaceSetupInput!) {\n    completeAWSMarketplaceSetup(input: $input) {\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation CompleteAWSMarketplaceSetup($input: AWSMarketplaceSetupInput!) {\n    completeAWSMarketplaceSetup(input: $input) {\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAccountSupportInfo {\n    account {\n      id\n      plan {\n        id\n        name\n        amount\n        features\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAccountSupportInfo {\n    account {\n      id\n      plan {\n        id\n        name\n        amount\n        features\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAccountCreationTime {\n    account {\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetAccountCreationTime {\n    account {\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetGlobalSearch($opts: SearchInput!) {\n    account {\n      search(opts: $opts) {\n        results {\n          env {\n            name\n            id\n            type\n          }\n          kind\n          value {\n            ... on ArchivedEvent {\n              id\n              name\n            }\n            ... on FunctionRun {\n              id\n              functionID: workflowID\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGlobalSearch($opts: SearchInput!) {\n    account {\n      search(opts: $opts) {\n        results {\n          env {\n            name\n            id\n            type\n          }\n          kind\n          value {\n            ... on ArchivedEvent {\n              id\n              name\n            }\n            ... on FunctionRun {\n              id\n              functionID: workflowID\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionSlug($environmentID: ID!, $functionID: ID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflow(id: $functionID) {\n        slug\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionSlug($environmentID: ID!, $functionID: ID!) {\n    environment: workspace(id: $environmentID) {\n      function: workflow(id: $functionID) {\n        slug\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDeployss($environmentID: ID!) {\n    deploys(workspaceID: $environmentID) {\n      id\n      appName\n      authorID\n      checksum\n      createdAt\n      error\n      framework\n      metadata\n      sdkLanguage\n      sdkVersion\n      status\n\n      deployedFunctions {\n        id\n        name\n      }\n\n      removedFunctions {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDeployss($environmentID: ID!) {\n    deploys(workspaceID: $environmentID) {\n      id\n      appName\n      authorID\n      checksum\n      createdAt\n      error\n      framework\n      metadata\n      sdkLanguage\n      sdkVersion\n      status\n\n      deployedFunctions {\n        id\n        name\n      }\n\n      removedFunctions {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEnvironments {\n    workspaces {\n      id\n      name\n      parentID\n      test\n      type\n      webhookSigningKey\n      createdAt\n      isArchived\n      functionCount\n      isAutoArchiveEnabled\n      lastDeployedAt\n    }\n  }\n"): (typeof documents)["\n  query GetEnvironments {\n    workspaces {\n      id\n      name\n      parentID\n      test\n      type\n      webhookSigningKey\n      createdAt\n      isArchived\n      functionCount\n      isAutoArchiveEnabled\n      lastDeployedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventTypes($environmentID: ID!, $page: Int) {\n    workspace(id: $environmentID) {\n      events @paginated(perPage: 50, page: $page) {\n        data {\n          name\n          functions: workflows {\n            id\n            slug\n            name\n          }\n          dailyVolume: usage(opts: { period: \"hour\", range: \"day\" }) {\n            total\n            data {\n              count\n            }\n          }\n        }\n        page {\n          page\n          totalPages\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventTypes($environmentID: ID!, $page: Int) {\n    workspace(id: $environmentID) {\n      events @paginated(perPage: 50, page: $page) {\n        data {\n          name\n          functions: workflows {\n            id\n            slug\n            name\n          }\n          dailyVolume: usage(opts: { period: \"hour\", range: \"day\" }) {\n            total\n            data {\n              count\n            }\n          }\n        }\n        page {\n          page\n          totalPages\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventType($eventName: String, $environmentID: ID!) {\n    events(query: { name: $eventName, workspaceID: $environmentID }) {\n      data {\n        name\n        usage(opts: { period: \"hour\", range: \"day\" }) {\n          total\n          data {\n            slot\n            count\n          }\n        }\n        workflows {\n          id\n          slug\n          name\n          current {\n            createdAt\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventType($eventName: String, $environmentID: ID!) {\n    events(query: { name: $eventName, workspaceID: $environmentID }) {\n      data {\n        name\n        usage(opts: { period: \"hour\", range: \"day\" }) {\n          total\n          data {\n            slot\n            count\n          }\n        }\n        workflows {\n          id\n          slug\n          name\n          current {\n            createdAt\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionsUsage($environmentID: ID!, $page: Int, $archived: Boolean, $pageSize: Int) {\n    workspace(id: $environmentID) {\n      workflows(archived: $archived) @paginated(perPage: $pageSize, page: $page) {\n        page {\n          page\n          perPage\n          totalItems\n          totalPages\n        }\n        data {\n          id\n          slug\n          dailyStarts: usage(opts: { period: \"hour\", range: \"day\" }, event: \"started\") {\n            total\n            data {\n              count\n            }\n          }\n          dailyFailures: usage(opts: { period: \"hour\", range: \"day\" }, event: \"errored\") {\n            total\n            data {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionsUsage($environmentID: ID!, $page: Int, $archived: Boolean, $pageSize: Int) {\n    workspace(id: $environmentID) {\n      workflows(archived: $archived) @paginated(perPage: $pageSize, page: $page) {\n        page {\n          page\n          perPage\n          totalItems\n          totalPages\n        }\n        data {\n          id\n          slug\n          dailyStarts: usage(opts: { period: \"hour\", range: \"day\" }, event: \"started\") {\n            total\n            data {\n              count\n            }\n          }\n          dailyFailures: usage(opts: { period: \"hour\", range: \"day\" }, event: \"errored\") {\n            total\n            data {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctions($environmentID: ID!, $page: Int, $archived: Boolean, $pageSize: Int) {\n    workspace(id: $environmentID) {\n      workflows(archived: $archived) @paginated(perPage: $pageSize, page: $page) {\n        page {\n          page\n          perPage\n          totalItems\n          totalPages\n        }\n        data {\n          appName\n          id\n          slug\n          name\n          isArchived\n          current {\n            triggers {\n              eventName\n              schedule\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctions($environmentID: ID!, $page: Int, $archived: Boolean, $pageSize: Int) {\n    workspace(id: $environmentID) {\n      workflows(archived: $archived) @paginated(perPage: $pageSize, page: $page) {\n        page {\n          page\n          perPage\n          totalItems\n          totalPages\n        }\n        data {\n          appName\n          id\n          slug\n          name\n          isArchived\n          current {\n            triggers {\n              eventName\n              schedule\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunction($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      id\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        name\n        slug\n        isArchived\n        appName\n        current {\n          triggers {\n            eventName\n            schedule\n            condition\n          }\n          deploy {\n            id\n            createdAt\n          }\n        }\n        failureHandler {\n          slug\n          name\n        }\n        configuration {\n          cancellations {\n            event\n            timeout\n            condition\n          }\n          retries {\n            value\n            isDefault\n          }\n          priority\n          eventsBatch {\n            maxSize\n            timeout\n          }\n          concurrency {\n            scope\n            limit {\n              value\n              isPlanLimit\n            }\n            key\n          }\n          rateLimit {\n            limit\n            period\n            key\n          }\n          debounce {\n            period\n            key\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunction($slug: String!, $environmentID: ID!) {\n    workspace(id: $environmentID) {\n      id\n      workflow: workflowBySlug(slug: $slug) {\n        id\n        name\n        slug\n        isArchived\n        appName\n        current {\n          triggers {\n            eventName\n            schedule\n            condition\n          }\n          deploy {\n            id\n            createdAt\n          }\n        }\n        failureHandler {\n          slug\n          name\n        }\n        configuration {\n          cancellations {\n            event\n            timeout\n            condition\n          }\n          retries {\n            value\n            isDefault\n          }\n          priority\n          eventsBatch {\n            maxSize\n            timeout\n          }\n          concurrency {\n            scope\n            limit {\n              value\n              isPlanLimit\n            }\n            key\n          }\n          rateLimit {\n            limit\n            period\n            key\n          }\n          debounce {\n            period\n            key\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFunctionUsage($id: ID!, $environmentID: ID!, $startTime: Time!, $endTime: Time!) {\n    workspace(id: $environmentID) {\n      workflow(id: $id) {\n        dailyStarts: usage(opts: { from: $startTime, to: $endTime }, event: \"started\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        dailyFailures: usage(opts: { from: $startTime, to: $endTime }, event: \"errored\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFunctionUsage($id: ID!, $environmentID: ID!, $startTime: Time!, $endTime: Time!) {\n    workspace(id: $environmentID) {\n      workflow(id: $id) {\n        dailyStarts: usage(opts: { from: $startTime, to: $endTime }, event: \"started\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n        dailyFailures: usage(opts: { from: $startTime, to: $endTime }, event: \"errored\") {\n          period\n          total\n          data {\n            slot\n            count\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllEnvironments {\n    workspaces {\n      id\n      name\n      parentID\n      test\n      type\n      createdAt\n      lastDeployedAt\n      isArchived\n      isAutoArchiveEnabled\n    }\n  }\n"): (typeof documents)["\n  query GetAllEnvironments {\n    workspaces {\n      id\n      name\n      parentID\n      test\n      type\n      createdAt\n      lastDeployedAt\n      isArchived\n      isAutoArchiveEnabled\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;