// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: run/v2/run.proto

package runv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpanStatus int32

const (
	SpanStatus_UNKNOWN SpanStatus = 0
	SpanStatus_OK      SpanStatus = 10
	SpanStatus_ERORR   SpanStatus = 20
	// inngest status
	SpanStatus_SCHEDULED SpanStatus = 100
	SpanStatus_QUEUED    SpanStatus = 110
	SpanStatus_RUNNING   SpanStatus = 200
	SpanStatus_WAITING   SpanStatus = 210
	SpanStatus_COMPLETED SpanStatus = 300
	SpanStatus_FAILED    SpanStatus = 400
	SpanStatus_CANCELLED SpanStatus = 500
	SpanStatus_SKIPPED   SpanStatus = 600
)

// Enum value maps for SpanStatus.
var (
	SpanStatus_name = map[int32]string{
		0:   "UNKNOWN",
		10:  "OK",
		20:  "ERORR",
		100: "SCHEDULED",
		110: "QUEUED",
		200: "RUNNING",
		210: "WAITING",
		300: "COMPLETED",
		400: "FAILED",
		500: "CANCELLED",
		600: "SKIPPED",
	}
	SpanStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"OK":        10,
		"ERORR":     20,
		"SCHEDULED": 100,
		"QUEUED":    110,
		"RUNNING":   200,
		"WAITING":   210,
		"COMPLETED": 300,
		"FAILED":    400,
		"CANCELLED": 500,
		"SKIPPED":   600,
	}
)

func (x SpanStatus) Enum() *SpanStatus {
	p := new(SpanStatus)
	*p = x
	return p
}

func (x SpanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_run_v2_run_proto_enumTypes[0].Descriptor()
}

func (SpanStatus) Type() protoreflect.EnumType {
	return &file_run_v2_run_proto_enumTypes[0]
}

func (x SpanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanStatus.Descriptor instead.
func (SpanStatus) EnumDescriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{0}
}

type SpanStepOp int32

const (
	SpanStepOp_RUN            SpanStepOp = 0
	SpanStepOp_INVOKE         SpanStepOp = 1
	SpanStepOp_SLEEP          SpanStepOp = 2
	SpanStepOp_WAIT_FOR_EVENT SpanStepOp = 3
	SpanStepOp_STEP           SpanStepOp = 4
	SpanStepOp_STEP_ERROR     SpanStepOp = 5
	SpanStepOp_NONE           SpanStepOp = 6
	SpanStepOp_AI_GATEWAY     SpanStepOp = 7
)

// Enum value maps for SpanStepOp.
var (
	SpanStepOp_name = map[int32]string{
		0: "RUN",
		1: "INVOKE",
		2: "SLEEP",
		3: "WAIT_FOR_EVENT",
		4: "STEP",
		5: "STEP_ERROR",
		6: "NONE",
		7: "AI_GATEWAY",
	}
	SpanStepOp_value = map[string]int32{
		"RUN":            0,
		"INVOKE":         1,
		"SLEEP":          2,
		"WAIT_FOR_EVENT": 3,
		"STEP":           4,
		"STEP_ERROR":     5,
		"NONE":           6,
		"AI_GATEWAY":     7,
	}
)

func (x SpanStepOp) Enum() *SpanStepOp {
	p := new(SpanStepOp)
	*p = x
	return p
}

func (x SpanStepOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanStepOp) Descriptor() protoreflect.EnumDescriptor {
	return file_run_v2_run_proto_enumTypes[1].Descriptor()
}

func (SpanStepOp) Type() protoreflect.EnumType {
	return &file_run_v2_run_proto_enumTypes[1]
}

func (x SpanStepOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanStepOp.Descriptor instead.
func (SpanStepOp) EnumDescriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{1}
}

type RunSpan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WorkspaceId   string                 `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	AppId         string                 `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	FunctionId    string                 `protobuf:"bytes,4,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	RunId         string                 `protobuf:"bytes,5,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TraceId       string                 `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	ParentSpanId  *string                `protobuf:"bytes,7,opt,name=parent_span_id,json=parentSpanId,proto3,oneof" json:"parent_span_id,omitempty"`
	SpanId        string                 `protobuf:"bytes,8,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Name          string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Status        SpanStatus             `protobuf:"varint,10,opt,name=status,proto3,enum=run.v2.SpanStatus" json:"status,omitempty"`
	Attempts      int32                  `protobuf:"varint,11,opt,name=attempts,proto3" json:"attempts,omitempty"`
	DurationMs    int64                  `protobuf:"varint,12,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	IsRoot        bool                   `protobuf:"varint,13,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	QueuedAt      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=ended_at,json=endedAt,proto3,oneof" json:"ended_at,omitempty"`
	OutputId      *string                `protobuf:"bytes,17,opt,name=output_id,json=outputId,proto3,oneof" json:"output_id,omitempty"`
	StepOp        *SpanStepOp            `protobuf:"varint,18,opt,name=step_op,json=stepOp,proto3,enum=run.v2.SpanStepOp,oneof" json:"step_op,omitempty"`
	StepInfo      *StepInfo              `protobuf:"bytes,19,opt,name=step_info,json=stepInfo,proto3,oneof" json:"step_info,omitempty"`
	Children      []*RunSpan             `protobuf:"bytes,20,rep,name=children,proto3" json:"children,omitempty"`
	StepId        *string                `protobuf:"bytes,21,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunSpan) Reset() {
	*x = RunSpan{}
	mi := &file_run_v2_run_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSpan) ProtoMessage() {}

func (x *RunSpan) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSpan.ProtoReflect.Descriptor instead.
func (*RunSpan) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{0}
}

func (x *RunSpan) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RunSpan) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *RunSpan) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RunSpan) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *RunSpan) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunSpan) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *RunSpan) GetParentSpanId() string {
	if x != nil && x.ParentSpanId != nil {
		return *x.ParentSpanId
	}
	return ""
}

func (x *RunSpan) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *RunSpan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunSpan) GetStatus() SpanStatus {
	if x != nil {
		return x.Status
	}
	return SpanStatus_UNKNOWN
}

func (x *RunSpan) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *RunSpan) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *RunSpan) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *RunSpan) GetQueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QueuedAt
	}
	return nil
}

func (x *RunSpan) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *RunSpan) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *RunSpan) GetOutputId() string {
	if x != nil && x.OutputId != nil {
		return *x.OutputId
	}
	return ""
}

func (x *RunSpan) GetStepOp() SpanStepOp {
	if x != nil && x.StepOp != nil {
		return *x.StepOp
	}
	return SpanStepOp_RUN
}

func (x *RunSpan) GetStepInfo() *StepInfo {
	if x != nil {
		return x.StepInfo
	}
	return nil
}

func (x *RunSpan) GetChildren() []*RunSpan {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *RunSpan) GetStepId() string {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return ""
}

type StepInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Info:
	//
	//	*StepInfo_Sleep
	//	*StepInfo_Wait
	//	*StepInfo_Invoke
	//	*StepInfo_Run
	Info          isStepInfo_Info `protobuf_oneof:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepInfo) Reset() {
	*x = StepInfo{}
	mi := &file_run_v2_run_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfo) ProtoMessage() {}

func (x *StepInfo) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfo.ProtoReflect.Descriptor instead.
func (*StepInfo) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{1}
}

func (x *StepInfo) GetInfo() isStepInfo_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *StepInfo) GetSleep() *StepInfoSleep {
	if x != nil {
		if x, ok := x.Info.(*StepInfo_Sleep); ok {
			return x.Sleep
		}
	}
	return nil
}

func (x *StepInfo) GetWait() *StepInfoWaitForEvent {
	if x != nil {
		if x, ok := x.Info.(*StepInfo_Wait); ok {
			return x.Wait
		}
	}
	return nil
}

func (x *StepInfo) GetInvoke() *StepInfoInvoke {
	if x != nil {
		if x, ok := x.Info.(*StepInfo_Invoke); ok {
			return x.Invoke
		}
	}
	return nil
}

func (x *StepInfo) GetRun() *StepInfoRun {
	if x != nil {
		if x, ok := x.Info.(*StepInfo_Run); ok {
			return x.Run
		}
	}
	return nil
}

type isStepInfo_Info interface {
	isStepInfo_Info()
}

type StepInfo_Sleep struct {
	Sleep *StepInfoSleep `protobuf:"bytes,1,opt,name=sleep,proto3,oneof"`
}

type StepInfo_Wait struct {
	Wait *StepInfoWaitForEvent `protobuf:"bytes,2,opt,name=wait,proto3,oneof"`
}

type StepInfo_Invoke struct {
	Invoke *StepInfoInvoke `protobuf:"bytes,3,opt,name=invoke,proto3,oneof"`
}

type StepInfo_Run struct {
	Run *StepInfoRun `protobuf:"bytes,4,opt,name=run,proto3,oneof"`
}

func (*StepInfo_Sleep) isStepInfo_Info() {}

func (*StepInfo_Wait) isStepInfo_Info() {}

func (*StepInfo_Invoke) isStepInfo_Info() {}

func (*StepInfo_Run) isStepInfo_Info() {}

type StepInfoInvoke struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TriggeringEventId string                 `protobuf:"bytes,1,opt,name=triggering_event_id,json=triggeringEventId,proto3" json:"triggering_event_id,omitempty"`
	FunctionId        string                 `protobuf:"bytes,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	Timeout           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ReturnEventId     *string                `protobuf:"bytes,4,opt,name=return_event_id,json=returnEventId,proto3,oneof" json:"return_event_id,omitempty"`
	RunId             *string                `protobuf:"bytes,5,opt,name=run_id,json=runId,proto3,oneof" json:"run_id,omitempty"`
	TimedOut          *bool                  `protobuf:"varint,6,opt,name=timed_out,json=timedOut,proto3,oneof" json:"timed_out,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StepInfoInvoke) Reset() {
	*x = StepInfoInvoke{}
	mi := &file_run_v2_run_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoInvoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoInvoke) ProtoMessage() {}

func (x *StepInfoInvoke) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoInvoke.ProtoReflect.Descriptor instead.
func (*StepInfoInvoke) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{2}
}

func (x *StepInfoInvoke) GetTriggeringEventId() string {
	if x != nil {
		return x.TriggeringEventId
	}
	return ""
}

func (x *StepInfoInvoke) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *StepInfoInvoke) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *StepInfoInvoke) GetReturnEventId() string {
	if x != nil && x.ReturnEventId != nil {
		return *x.ReturnEventId
	}
	return ""
}

func (x *StepInfoInvoke) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *StepInfoInvoke) GetTimedOut() bool {
	if x != nil && x.TimedOut != nil {
		return *x.TimedOut
	}
	return false
}

type StepInfoSleep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SleepUntil    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=sleep_until,json=sleepUntil,proto3" json:"sleep_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepInfoSleep) Reset() {
	*x = StepInfoSleep{}
	mi := &file_run_v2_run_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoSleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoSleep) ProtoMessage() {}

func (x *StepInfoSleep) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoSleep.ProtoReflect.Descriptor instead.
func (*StepInfoSleep) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{3}
}

func (x *StepInfoSleep) GetSleepUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.SleepUntil
	}
	return nil
}

type StepInfoWaitForEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventName     string                 `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Timeout       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Expression    *string                `protobuf:"bytes,3,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	FoundEventId  *string                `protobuf:"bytes,4,opt,name=found_event_id,json=foundEventId,proto3,oneof" json:"found_event_id,omitempty"`
	TimedOut      *bool                  `protobuf:"varint,5,opt,name=timed_out,json=timedOut,proto3,oneof" json:"timed_out,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepInfoWaitForEvent) Reset() {
	*x = StepInfoWaitForEvent{}
	mi := &file_run_v2_run_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoWaitForEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoWaitForEvent) ProtoMessage() {}

func (x *StepInfoWaitForEvent) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoWaitForEvent.ProtoReflect.Descriptor instead.
func (*StepInfoWaitForEvent) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{4}
}

func (x *StepInfoWaitForEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *StepInfoWaitForEvent) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *StepInfoWaitForEvent) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

func (x *StepInfoWaitForEvent) GetFoundEventId() string {
	if x != nil && x.FoundEventId != nil {
		return *x.FoundEventId
	}
	return ""
}

func (x *StepInfoWaitForEvent) GetTimedOut() bool {
	if x != nil && x.TimedOut != nil {
		return *x.TimedOut
	}
	return false
}

type StepInfoRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepInfoRun) Reset() {
	*x = StepInfoRun{}
	mi := &file_run_v2_run_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoRun) ProtoMessage() {}

func (x *StepInfoRun) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoRun.ProtoReflect.Descriptor instead.
func (*StepInfoRun) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{5}
}

func (x *StepInfoRun) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type RunSpanOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
	Error         *StepError             `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunSpanOutput) Reset() {
	*x = RunSpanOutput{}
	mi := &file_run_v2_run_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSpanOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSpanOutput) ProtoMessage() {}

func (x *RunSpanOutput) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSpanOutput.ProtoReflect.Descriptor instead.
func (*RunSpanOutput) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{6}
}

func (x *RunSpanOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RunSpanOutput) GetError() *StepError {
	if x != nil {
		return x.Error
	}
	return nil
}

type StepError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Stack         *string                `protobuf:"bytes,3,opt,name=stack,proto3,oneof" json:"stack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepError) Reset() {
	*x = StepError{}
	mi := &file_run_v2_run_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepError) ProtoMessage() {}

func (x *StepError) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepError.ProtoReflect.Descriptor instead.
func (*StepError) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{7}
}

func (x *StepError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StepError) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StepError) GetStack() string {
	if x != nil && x.Stack != nil {
		return *x.Stack
	}
	return ""
}

type RunTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventName     string                 `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Ids           []string               `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Payloads      [][]byte               `protobuf:"bytes,3,rep,name=payloads,proto3" json:"payloads,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsBatch       bool                   `protobuf:"varint,5,opt,name=is_batch,json=isBatch,proto3" json:"is_batch,omitempty"`
	BatchId       *string                `protobuf:"bytes,6,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	Cron          *string                `protobuf:"bytes,7,opt,name=cron,proto3,oneof" json:"cron,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTrigger) Reset() {
	*x = RunTrigger{}
	mi := &file_run_v2_run_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTrigger) ProtoMessage() {}

func (x *RunTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTrigger.ProtoReflect.Descriptor instead.
func (*RunTrigger) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{8}
}

func (x *RunTrigger) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *RunTrigger) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *RunTrigger) GetPayloads() [][]byte {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *RunTrigger) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RunTrigger) GetIsBatch() bool {
	if x != nil {
		return x.IsBatch
	}
	return false
}

func (x *RunTrigger) GetBatchId() string {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return ""
}

func (x *RunTrigger) GetCron() string {
	if x != nil && x.Cron != nil {
		return *x.Cron
	}
	return ""
}

var File_run_v2_run_proto protoreflect.FileDescriptor

const file_run_v2_run_proto_rawDesc = "" +
	"\n" +
	"\x10run/v2/run.proto\x12\x06run.v2\x1a\x1fgoogle/protobuf/timestamp.proto\"\xfa\x06\n" +
	"\aRunSpan\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12!\n" +
	"\fworkspace_id\x18\x02 \x01(\tR\vworkspaceId\x12\x15\n" +
	"\x06app_id\x18\x03 \x01(\tR\x05appId\x12\x1f\n" +
	"\vfunction_id\x18\x04 \x01(\tR\n" +
	"functionId\x12\x15\n" +
	"\x06run_id\x18\x05 \x01(\tR\x05runId\x12\x19\n" +
	"\btrace_id\x18\x06 \x01(\tR\atraceId\x12)\n" +
	"\x0eparent_span_id\x18\a \x01(\tH\x00R\fparentSpanId\x88\x01\x01\x12\x17\n" +
	"\aspan_id\x18\b \x01(\tR\x06spanId\x12\x12\n" +
	"\x04name\x18\t \x01(\tR\x04name\x12*\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x12.run.v2.SpanStatusR\x06status\x12\x1a\n" +
	"\battempts\x18\v \x01(\x05R\battempts\x12\x1f\n" +
	"\vduration_ms\x18\f \x01(\x03R\n" +
	"durationMs\x12\x17\n" +
	"\ais_root\x18\r \x01(\bR\x06isRoot\x127\n" +
	"\tqueued_at\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\bqueuedAt\x12>\n" +
	"\n" +
	"started_at\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampH\x01R\tstartedAt\x88\x01\x01\x12:\n" +
	"\bended_at\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampH\x02R\aendedAt\x88\x01\x01\x12 \n" +
	"\toutput_id\x18\x11 \x01(\tH\x03R\boutputId\x88\x01\x01\x120\n" +
	"\astep_op\x18\x12 \x01(\x0e2\x12.run.v2.SpanStepOpH\x04R\x06stepOp\x88\x01\x01\x122\n" +
	"\tstep_info\x18\x13 \x01(\v2\x10.run.v2.StepInfoH\x05R\bstepInfo\x88\x01\x01\x12+\n" +
	"\bchildren\x18\x14 \x03(\v2\x0f.run.v2.RunSpanR\bchildren\x12\x1c\n" +
	"\astep_id\x18\x15 \x01(\tH\x06R\x06stepId\x88\x01\x01B\x11\n" +
	"\x0f_parent_span_idB\r\n" +
	"\v_started_atB\v\n" +
	"\t_ended_atB\f\n" +
	"\n" +
	"_output_idB\n" +
	"\n" +
	"\b_step_opB\f\n" +
	"\n" +
	"_step_infoB\n" +
	"\n" +
	"\b_step_id\"\xd0\x01\n" +
	"\bStepInfo\x12-\n" +
	"\x05sleep\x18\x01 \x01(\v2\x15.run.v2.StepInfoSleepH\x00R\x05sleep\x122\n" +
	"\x04wait\x18\x02 \x01(\v2\x1c.run.v2.StepInfoWaitForEventH\x00R\x04wait\x120\n" +
	"\x06invoke\x18\x03 \x01(\v2\x16.run.v2.StepInfoInvokeH\x00R\x06invoke\x12'\n" +
	"\x03run\x18\x04 \x01(\v2\x13.run.v2.StepInfoRunH\x00R\x03runB\x06\n" +
	"\x04info\"\xaf\x02\n" +
	"\x0eStepInfoInvoke\x12.\n" +
	"\x13triggering_event_id\x18\x01 \x01(\tR\x11triggeringEventId\x12\x1f\n" +
	"\vfunction_id\x18\x02 \x01(\tR\n" +
	"functionId\x124\n" +
	"\atimeout\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\atimeout\x12+\n" +
	"\x0freturn_event_id\x18\x04 \x01(\tH\x00R\rreturnEventId\x88\x01\x01\x12\x1a\n" +
	"\x06run_id\x18\x05 \x01(\tH\x01R\x05runId\x88\x01\x01\x12 \n" +
	"\ttimed_out\x18\x06 \x01(\bH\x02R\btimedOut\x88\x01\x01B\x12\n" +
	"\x10_return_event_idB\t\n" +
	"\a_run_idB\f\n" +
	"\n" +
	"_timed_out\"L\n" +
	"\rStepInfoSleep\x12;\n" +
	"\vsleep_until\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"sleepUntil\"\x8d\x02\n" +
	"\x14StepInfoWaitForEvent\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x124\n" +
	"\atimeout\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\atimeout\x12#\n" +
	"\n" +
	"expression\x18\x03 \x01(\tH\x00R\n" +
	"expression\x88\x01\x01\x12)\n" +
	"\x0efound_event_id\x18\x04 \x01(\tH\x01R\ffoundEventId\x88\x01\x01\x12 \n" +
	"\ttimed_out\x18\x05 \x01(\bH\x02R\btimedOut\x88\x01\x01B\r\n" +
	"\v_expressionB\x11\n" +
	"\x0f_found_event_idB\f\n" +
	"\n" +
	"_timed_out\"/\n" +
	"\vStepInfoRun\x12\x17\n" +
	"\x04type\x18\x01 \x01(\tH\x00R\x04type\x88\x01\x01B\a\n" +
	"\x05_type\"i\n" +
	"\rRunSpanOutput\x12\x17\n" +
	"\x04data\x18\x01 \x01(\fH\x00R\x04data\x88\x01\x01\x12,\n" +
	"\x05error\x18\x02 \x01(\v2\x11.run.v2.StepErrorH\x01R\x05error\x88\x01\x01B\a\n" +
	"\x05_dataB\b\n" +
	"\x06_error\"l\n" +
	"\tStepError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x17\n" +
	"\x04name\x18\x02 \x01(\tH\x00R\x04name\x88\x01\x01\x12\x19\n" +
	"\x05stack\x18\x03 \x01(\tH\x01R\x05stack\x88\x01\x01B\a\n" +
	"\x05_nameB\b\n" +
	"\x06_stack\"\xfd\x01\n" +
	"\n" +
	"RunTrigger\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x10\n" +
	"\x03ids\x18\x02 \x03(\tR\x03ids\x12\x1a\n" +
	"\bpayloads\x18\x03 \x03(\fR\bpayloads\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x19\n" +
	"\bis_batch\x18\x05 \x01(\bR\aisBatch\x12\x1e\n" +
	"\bbatch_id\x18\x06 \x01(\tH\x00R\abatchId\x88\x01\x01\x12\x17\n" +
	"\x04cron\x18\a \x01(\tH\x01R\x04cron\x88\x01\x01B\v\n" +
	"\t_batch_idB\a\n" +
	"\x05_cron*\x9e\x01\n" +
	"\n" +
	"SpanStatus\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x06\n" +
	"\x02OK\x10\n" +
	"\x12\t\n" +
	"\x05ERORR\x10\x14\x12\r\n" +
	"\tSCHEDULED\x10d\x12\n" +
	"\n" +
	"\x06QUEUED\x10n\x12\f\n" +
	"\aRUNNING\x10\xc8\x01\x12\f\n" +
	"\aWAITING\x10\xd2\x01\x12\x0e\n" +
	"\tCOMPLETED\x10\xac\x02\x12\v\n" +
	"\x06FAILED\x10\x90\x03\x12\x0e\n" +
	"\tCANCELLED\x10\xf4\x03\x12\f\n" +
	"\aSKIPPED\x10\xd8\x04*t\n" +
	"\n" +
	"SpanStepOp\x12\a\n" +
	"\x03RUN\x10\x00\x12\n" +
	"\n" +
	"\x06INVOKE\x10\x01\x12\t\n" +
	"\x05SLEEP\x10\x02\x12\x12\n" +
	"\x0eWAIT_FOR_EVENT\x10\x03\x12\b\n" +
	"\x04STEP\x10\x04\x12\x0e\n" +
	"\n" +
	"STEP_ERROR\x10\x05\x12\b\n" +
	"\x04NONE\x10\x06\x12\x0e\n" +
	"\n" +
	"AI_GATEWAY\x10\aB3Z1github.com/inngest/inngest/proto/gen/run/v2;runv2b\x06proto3"

var (
	file_run_v2_run_proto_rawDescOnce sync.Once
	file_run_v2_run_proto_rawDescData []byte
)

func file_run_v2_run_proto_rawDescGZIP() []byte {
	file_run_v2_run_proto_rawDescOnce.Do(func() {
		file_run_v2_run_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_run_v2_run_proto_rawDesc), len(file_run_v2_run_proto_rawDesc)))
	})
	return file_run_v2_run_proto_rawDescData
}

var file_run_v2_run_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_run_v2_run_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_run_v2_run_proto_goTypes = []any{
	(SpanStatus)(0),               // 0: run.v2.SpanStatus
	(SpanStepOp)(0),               // 1: run.v2.SpanStepOp
	(*RunSpan)(nil),               // 2: run.v2.RunSpan
	(*StepInfo)(nil),              // 3: run.v2.StepInfo
	(*StepInfoInvoke)(nil),        // 4: run.v2.StepInfoInvoke
	(*StepInfoSleep)(nil),         // 5: run.v2.StepInfoSleep
	(*StepInfoWaitForEvent)(nil),  // 6: run.v2.StepInfoWaitForEvent
	(*StepInfoRun)(nil),           // 7: run.v2.StepInfoRun
	(*RunSpanOutput)(nil),         // 8: run.v2.RunSpanOutput
	(*StepError)(nil),             // 9: run.v2.StepError
	(*RunTrigger)(nil),            // 10: run.v2.RunTrigger
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_run_v2_run_proto_depIdxs = []int32{
	0,  // 0: run.v2.RunSpan.status:type_name -> run.v2.SpanStatus
	11, // 1: run.v2.RunSpan.queued_at:type_name -> google.protobuf.Timestamp
	11, // 2: run.v2.RunSpan.started_at:type_name -> google.protobuf.Timestamp
	11, // 3: run.v2.RunSpan.ended_at:type_name -> google.protobuf.Timestamp
	1,  // 4: run.v2.RunSpan.step_op:type_name -> run.v2.SpanStepOp
	3,  // 5: run.v2.RunSpan.step_info:type_name -> run.v2.StepInfo
	2,  // 6: run.v2.RunSpan.children:type_name -> run.v2.RunSpan
	5,  // 7: run.v2.StepInfo.sleep:type_name -> run.v2.StepInfoSleep
	6,  // 8: run.v2.StepInfo.wait:type_name -> run.v2.StepInfoWaitForEvent
	4,  // 9: run.v2.StepInfo.invoke:type_name -> run.v2.StepInfoInvoke
	7,  // 10: run.v2.StepInfo.run:type_name -> run.v2.StepInfoRun
	11, // 11: run.v2.StepInfoInvoke.timeout:type_name -> google.protobuf.Timestamp
	11, // 12: run.v2.StepInfoSleep.sleep_until:type_name -> google.protobuf.Timestamp
	11, // 13: run.v2.StepInfoWaitForEvent.timeout:type_name -> google.protobuf.Timestamp
	9,  // 14: run.v2.RunSpanOutput.error:type_name -> run.v2.StepError
	11, // 15: run.v2.RunTrigger.timestamp:type_name -> google.protobuf.Timestamp
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_run_v2_run_proto_init() }
func file_run_v2_run_proto_init() {
	if File_run_v2_run_proto != nil {
		return
	}
	file_run_v2_run_proto_msgTypes[0].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[1].OneofWrappers = []any{
		(*StepInfo_Sleep)(nil),
		(*StepInfo_Wait)(nil),
		(*StepInfo_Invoke)(nil),
		(*StepInfo_Run)(nil),
	}
	file_run_v2_run_proto_msgTypes[2].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[4].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[5].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[6].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[7].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_run_v2_run_proto_rawDesc), len(file_run_v2_run_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_run_v2_run_proto_goTypes,
		DependencyIndexes: file_run_v2_run_proto_depIdxs,
		EnumInfos:         file_run_v2_run_proto_enumTypes,
		MessageInfos:      file_run_v2_run_proto_msgTypes,
	}.Build()
	File_run_v2_run_proto = out.File
	file_run_v2_run_proto_goTypes = nil
	file_run_v2_run_proto_depIdxs = nil
}
