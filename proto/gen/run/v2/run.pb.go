// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: run/v2/run.proto

package runv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpanStatus int32

const (
	SpanStatus_UNKNOWN SpanStatus = 0
	SpanStatus_OK      SpanStatus = 10
	SpanStatus_ERORR   SpanStatus = 20
	// inngest status
	SpanStatus_SCHEDULED SpanStatus = 100
	SpanStatus_QUEUED    SpanStatus = 110
	SpanStatus_RUNNING   SpanStatus = 200
	SpanStatus_WAITING   SpanStatus = 210
	SpanStatus_COMPLETED SpanStatus = 300
	SpanStatus_FAILED    SpanStatus = 400
	SpanStatus_CANCELLED SpanStatus = 500
	SpanStatus_SKIPPED   SpanStatus = 600
)

// Enum value maps for SpanStatus.
var (
	SpanStatus_name = map[int32]string{
		0:   "UNKNOWN",
		10:  "OK",
		20:  "ERORR",
		100: "SCHEDULED",
		110: "QUEUED",
		200: "RUNNING",
		210: "WAITING",
		300: "COMPLETED",
		400: "FAILED",
		500: "CANCELLED",
		600: "SKIPPED",
	}
	SpanStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"OK":        10,
		"ERORR":     20,
		"SCHEDULED": 100,
		"QUEUED":    110,
		"RUNNING":   200,
		"WAITING":   210,
		"COMPLETED": 300,
		"FAILED":    400,
		"CANCELLED": 500,
		"SKIPPED":   600,
	}
)

func (x SpanStatus) Enum() *SpanStatus {
	p := new(SpanStatus)
	*p = x
	return p
}

func (x SpanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_run_v2_run_proto_enumTypes[0].Descriptor()
}

func (SpanStatus) Type() protoreflect.EnumType {
	return &file_run_v2_run_proto_enumTypes[0]
}

func (x SpanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanStatus.Descriptor instead.
func (SpanStatus) EnumDescriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{0}
}

type SpanStepOp int32

const (
	SpanStepOp_RUN            SpanStepOp = 0
	SpanStepOp_INVOKE         SpanStepOp = 1
	SpanStepOp_SLEEP          SpanStepOp = 2
	SpanStepOp_WAIT_FOR_EVENT SpanStepOp = 3
	SpanStepOp_STEP           SpanStepOp = 4
	SpanStepOp_STEP_ERROR     SpanStepOp = 5
	SpanStepOp_NONE           SpanStepOp = 6
	SpanStepOp_AI_GATEWAY     SpanStepOp = 7
)

// Enum value maps for SpanStepOp.
var (
	SpanStepOp_name = map[int32]string{
		0: "RUN",
		1: "INVOKE",
		2: "SLEEP",
		3: "WAIT_FOR_EVENT",
		4: "STEP",
		5: "STEP_ERROR",
		6: "NONE",
		7: "AI_GATEWAY",
	}
	SpanStepOp_value = map[string]int32{
		"RUN":            0,
		"INVOKE":         1,
		"SLEEP":          2,
		"WAIT_FOR_EVENT": 3,
		"STEP":           4,
		"STEP_ERROR":     5,
		"NONE":           6,
		"AI_GATEWAY":     7,
	}
)

func (x SpanStepOp) Enum() *SpanStepOp {
	p := new(SpanStepOp)
	*p = x
	return p
}

func (x SpanStepOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanStepOp) Descriptor() protoreflect.EnumDescriptor {
	return file_run_v2_run_proto_enumTypes[1].Descriptor()
}

func (SpanStepOp) Type() protoreflect.EnumType {
	return &file_run_v2_run_proto_enumTypes[1]
}

func (x SpanStepOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanStepOp.Descriptor instead.
func (SpanStepOp) EnumDescriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{1}
}

type RunSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WorkspaceId  string                 `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	AppId        string                 `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	FunctionId   string                 `protobuf:"bytes,4,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	RunId        string                 `protobuf:"bytes,5,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TraceId      string                 `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	ParentSpanId *string                `protobuf:"bytes,7,opt,name=parent_span_id,json=parentSpanId,proto3,oneof" json:"parent_span_id,omitempty"`
	SpanId       string                 `protobuf:"bytes,8,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Name         string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Status       SpanStatus             `protobuf:"varint,10,opt,name=status,proto3,enum=run.v2.SpanStatus" json:"status,omitempty"`
	Attempts     int32                  `protobuf:"varint,11,opt,name=attempts,proto3" json:"attempts,omitempty"`
	DurationMs   int64                  `protobuf:"varint,12,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	IsRoot       bool                   `protobuf:"varint,13,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	QueuedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	StartedAt    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	EndedAt      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=ended_at,json=endedAt,proto3,oneof" json:"ended_at,omitempty"`
	OutputId     *string                `protobuf:"bytes,17,opt,name=output_id,json=outputId,proto3,oneof" json:"output_id,omitempty"`
	StepOp       *SpanStepOp            `protobuf:"varint,18,opt,name=step_op,json=stepOp,proto3,enum=run.v2.SpanStepOp,oneof" json:"step_op,omitempty"`
	StepInfo     *StepInfo              `protobuf:"bytes,19,opt,name=step_info,json=stepInfo,proto3,oneof" json:"step_info,omitempty"`
	Children     []*RunSpan             `protobuf:"bytes,20,rep,name=children,proto3" json:"children,omitempty"`
	StepId       *string                `protobuf:"bytes,21,opt,name=step_id,json=stepId,proto3,oneof" json:"step_id,omitempty"`
}

func (x *RunSpan) Reset() {
	*x = RunSpan{}
	mi := &file_run_v2_run_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSpan) ProtoMessage() {}

func (x *RunSpan) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSpan.ProtoReflect.Descriptor instead.
func (*RunSpan) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{0}
}

func (x *RunSpan) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RunSpan) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *RunSpan) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RunSpan) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *RunSpan) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunSpan) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *RunSpan) GetParentSpanId() string {
	if x != nil && x.ParentSpanId != nil {
		return *x.ParentSpanId
	}
	return ""
}

func (x *RunSpan) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *RunSpan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunSpan) GetStatus() SpanStatus {
	if x != nil {
		return x.Status
	}
	return SpanStatus_UNKNOWN
}

func (x *RunSpan) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *RunSpan) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *RunSpan) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *RunSpan) GetQueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QueuedAt
	}
	return nil
}

func (x *RunSpan) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *RunSpan) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *RunSpan) GetOutputId() string {
	if x != nil && x.OutputId != nil {
		return *x.OutputId
	}
	return ""
}

func (x *RunSpan) GetStepOp() SpanStepOp {
	if x != nil && x.StepOp != nil {
		return *x.StepOp
	}
	return SpanStepOp_RUN
}

func (x *RunSpan) GetStepInfo() *StepInfo {
	if x != nil {
		return x.StepInfo
	}
	return nil
}

func (x *RunSpan) GetChildren() []*RunSpan {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *RunSpan) GetStepId() string {
	if x != nil && x.StepId != nil {
		return *x.StepId
	}
	return ""
}

type StepInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Info:
	//
	//	*StepInfo_Sleep
	//	*StepInfo_Wait
	//	*StepInfo_Invoke
	//	*StepInfo_Run
	Info isStepInfo_Info `protobuf_oneof:"info"`
}

func (x *StepInfo) Reset() {
	*x = StepInfo{}
	mi := &file_run_v2_run_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfo) ProtoMessage() {}

func (x *StepInfo) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfo.ProtoReflect.Descriptor instead.
func (*StepInfo) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{1}
}

func (m *StepInfo) GetInfo() isStepInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *StepInfo) GetSleep() *StepInfoSleep {
	if x, ok := x.GetInfo().(*StepInfo_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *StepInfo) GetWait() *StepInfoWaitForEvent {
	if x, ok := x.GetInfo().(*StepInfo_Wait); ok {
		return x.Wait
	}
	return nil
}

func (x *StepInfo) GetInvoke() *StepInfoInvoke {
	if x, ok := x.GetInfo().(*StepInfo_Invoke); ok {
		return x.Invoke
	}
	return nil
}

func (x *StepInfo) GetRun() *StepInfoRun {
	if x, ok := x.GetInfo().(*StepInfo_Run); ok {
		return x.Run
	}
	return nil
}

type isStepInfo_Info interface {
	isStepInfo_Info()
}

type StepInfo_Sleep struct {
	Sleep *StepInfoSleep `protobuf:"bytes,1,opt,name=sleep,proto3,oneof"`
}

type StepInfo_Wait struct {
	Wait *StepInfoWaitForEvent `protobuf:"bytes,2,opt,name=wait,proto3,oneof"`
}

type StepInfo_Invoke struct {
	Invoke *StepInfoInvoke `protobuf:"bytes,3,opt,name=invoke,proto3,oneof"`
}

type StepInfo_Run struct {
	Run *StepInfoRun `protobuf:"bytes,4,opt,name=run,proto3,oneof"`
}

func (*StepInfo_Sleep) isStepInfo_Info() {}

func (*StepInfo_Wait) isStepInfo_Info() {}

func (*StepInfo_Invoke) isStepInfo_Info() {}

func (*StepInfo_Run) isStepInfo_Info() {}

type StepInfoInvoke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggeringEventId string                 `protobuf:"bytes,1,opt,name=triggering_event_id,json=triggeringEventId,proto3" json:"triggering_event_id,omitempty"`
	FunctionId        string                 `protobuf:"bytes,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	Timeout           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ReturnEventId     *string                `protobuf:"bytes,4,opt,name=return_event_id,json=returnEventId,proto3,oneof" json:"return_event_id,omitempty"`
	RunId             *string                `protobuf:"bytes,5,opt,name=run_id,json=runId,proto3,oneof" json:"run_id,omitempty"`
	TimedOut          *bool                  `protobuf:"varint,6,opt,name=timed_out,json=timedOut,proto3,oneof" json:"timed_out,omitempty"`
}

func (x *StepInfoInvoke) Reset() {
	*x = StepInfoInvoke{}
	mi := &file_run_v2_run_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoInvoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoInvoke) ProtoMessage() {}

func (x *StepInfoInvoke) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoInvoke.ProtoReflect.Descriptor instead.
func (*StepInfoInvoke) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{2}
}

func (x *StepInfoInvoke) GetTriggeringEventId() string {
	if x != nil {
		return x.TriggeringEventId
	}
	return ""
}

func (x *StepInfoInvoke) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *StepInfoInvoke) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *StepInfoInvoke) GetReturnEventId() string {
	if x != nil && x.ReturnEventId != nil {
		return *x.ReturnEventId
	}
	return ""
}

func (x *StepInfoInvoke) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *StepInfoInvoke) GetTimedOut() bool {
	if x != nil && x.TimedOut != nil {
		return *x.TimedOut
	}
	return false
}

type StepInfoSleep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SleepUntil *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=sleep_until,json=sleepUntil,proto3" json:"sleep_until,omitempty"`
}

func (x *StepInfoSleep) Reset() {
	*x = StepInfoSleep{}
	mi := &file_run_v2_run_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoSleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoSleep) ProtoMessage() {}

func (x *StepInfoSleep) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoSleep.ProtoReflect.Descriptor instead.
func (*StepInfoSleep) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{3}
}

func (x *StepInfoSleep) GetSleepUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.SleepUntil
	}
	return nil
}

type StepInfoWaitForEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName    string                 `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Timeout      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Expression   *string                `protobuf:"bytes,3,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	FoundEventId *string                `protobuf:"bytes,4,opt,name=found_event_id,json=foundEventId,proto3,oneof" json:"found_event_id,omitempty"`
	TimedOut     *bool                  `protobuf:"varint,5,opt,name=timed_out,json=timedOut,proto3,oneof" json:"timed_out,omitempty"`
}

func (x *StepInfoWaitForEvent) Reset() {
	*x = StepInfoWaitForEvent{}
	mi := &file_run_v2_run_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoWaitForEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoWaitForEvent) ProtoMessage() {}

func (x *StepInfoWaitForEvent) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoWaitForEvent.ProtoReflect.Descriptor instead.
func (*StepInfoWaitForEvent) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{4}
}

func (x *StepInfoWaitForEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *StepInfoWaitForEvent) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *StepInfoWaitForEvent) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

func (x *StepInfoWaitForEvent) GetFoundEventId() string {
	if x != nil && x.FoundEventId != nil {
		return *x.FoundEventId
	}
	return ""
}

func (x *StepInfoWaitForEvent) GetTimedOut() bool {
	if x != nil && x.TimedOut != nil {
		return *x.TimedOut
	}
	return false
}

type StepInfoRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *StepInfoRun) Reset() {
	*x = StepInfoRun{}
	mi := &file_run_v2_run_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepInfoRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepInfoRun) ProtoMessage() {}

func (x *StepInfoRun) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepInfoRun.ProtoReflect.Descriptor instead.
func (*StepInfoRun) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{5}
}

func (x *StepInfoRun) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type RunSpanOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []byte     `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
	Error *StepError `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *RunSpanOutput) Reset() {
	*x = RunSpanOutput{}
	mi := &file_run_v2_run_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSpanOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSpanOutput) ProtoMessage() {}

func (x *RunSpanOutput) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSpanOutput.ProtoReflect.Descriptor instead.
func (*RunSpanOutput) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{6}
}

func (x *RunSpanOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RunSpanOutput) GetError() *StepError {
	if x != nil {
		return x.Error
	}
	return nil
}

type StepError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string  `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Stack   *string `protobuf:"bytes,3,opt,name=stack,proto3,oneof" json:"stack,omitempty"`
}

func (x *StepError) Reset() {
	*x = StepError{}
	mi := &file_run_v2_run_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepError) ProtoMessage() {}

func (x *StepError) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepError.ProtoReflect.Descriptor instead.
func (*StepError) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{7}
}

func (x *StepError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StepError) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StepError) GetStack() string {
	if x != nil && x.Stack != nil {
		return *x.Stack
	}
	return ""
}

type RunTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName string                 `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Ids       []string               `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Payloads  [][]byte               `protobuf:"bytes,3,rep,name=payloads,proto3" json:"payloads,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsBatch   bool                   `protobuf:"varint,5,opt,name=is_batch,json=isBatch,proto3" json:"is_batch,omitempty"`
	BatchId   *string                `protobuf:"bytes,6,opt,name=batch_id,json=batchId,proto3,oneof" json:"batch_id,omitempty"`
	Cron      *string                `protobuf:"bytes,7,opt,name=cron,proto3,oneof" json:"cron,omitempty"`
}

func (x *RunTrigger) Reset() {
	*x = RunTrigger{}
	mi := &file_run_v2_run_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTrigger) ProtoMessage() {}

func (x *RunTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_run_v2_run_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTrigger.ProtoReflect.Descriptor instead.
func (*RunTrigger) Descriptor() ([]byte, []int) {
	return file_run_v2_run_proto_rawDescGZIP(), []int{8}
}

func (x *RunTrigger) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *RunTrigger) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *RunTrigger) GetPayloads() [][]byte {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *RunTrigger) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RunTrigger) GetIsBatch() bool {
	if x != nil {
		return x.IsBatch
	}
	return false
}

func (x *RunTrigger) GetBatchId() string {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return ""
}

func (x *RunTrigger) GetCron() string {
	if x != nil && x.Cron != nil {
		return *x.Cron
	}
	return ""
}

var File_run_v2_run_proto protoreflect.FileDescriptor

var file_run_v2_run_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x06, 0x0a, 0x07,
	0x52, 0x75, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x75,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6f, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x70, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x65,
	0x70, 0x4f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x75, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x05, 0x52, 0x08, 0x73,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72,
	0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6f, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x72, 0x75,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x03,
	0x72, 0x75, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x0e,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x22, 0x4c, 0x0a,
	0x0d, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x3b,
	0x0a, 0x0b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x8d, 0x02, 0x0a, 0x14,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x22, 0x2f, 0x0a, 0x0b, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x75, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x0d,
	0x52, 0x75, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x17, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x09, 0x53, 0x74, 0x65, 0x70, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xfd, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x2a, 0x9e, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x4f,
	0x52, 0x52, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x44, 0x10, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x6e, 0x12,
	0x0c, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xc8, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0xd2, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xac, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x90, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xf4, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50,
	0x50, 0x45, 0x44, 0x10, 0xd8, 0x04, 0x2a, 0x74, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45,
	0x45, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x45, 0x50,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x07, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2f, 0x69, 0x6e, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x72, 0x75, 0x6e, 0x76,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_run_v2_run_proto_rawDescOnce sync.Once
	file_run_v2_run_proto_rawDescData = file_run_v2_run_proto_rawDesc
)

func file_run_v2_run_proto_rawDescGZIP() []byte {
	file_run_v2_run_proto_rawDescOnce.Do(func() {
		file_run_v2_run_proto_rawDescData = protoimpl.X.CompressGZIP(file_run_v2_run_proto_rawDescData)
	})
	return file_run_v2_run_proto_rawDescData
}

var file_run_v2_run_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_run_v2_run_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_run_v2_run_proto_goTypes = []any{
	(SpanStatus)(0),               // 0: run.v2.SpanStatus
	(SpanStepOp)(0),               // 1: run.v2.SpanStepOp
	(*RunSpan)(nil),               // 2: run.v2.RunSpan
	(*StepInfo)(nil),              // 3: run.v2.StepInfo
	(*StepInfoInvoke)(nil),        // 4: run.v2.StepInfoInvoke
	(*StepInfoSleep)(nil),         // 5: run.v2.StepInfoSleep
	(*StepInfoWaitForEvent)(nil),  // 6: run.v2.StepInfoWaitForEvent
	(*StepInfoRun)(nil),           // 7: run.v2.StepInfoRun
	(*RunSpanOutput)(nil),         // 8: run.v2.RunSpanOutput
	(*StepError)(nil),             // 9: run.v2.StepError
	(*RunTrigger)(nil),            // 10: run.v2.RunTrigger
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_run_v2_run_proto_depIdxs = []int32{
	0,  // 0: run.v2.RunSpan.status:type_name -> run.v2.SpanStatus
	11, // 1: run.v2.RunSpan.queued_at:type_name -> google.protobuf.Timestamp
	11, // 2: run.v2.RunSpan.started_at:type_name -> google.protobuf.Timestamp
	11, // 3: run.v2.RunSpan.ended_at:type_name -> google.protobuf.Timestamp
	1,  // 4: run.v2.RunSpan.step_op:type_name -> run.v2.SpanStepOp
	3,  // 5: run.v2.RunSpan.step_info:type_name -> run.v2.StepInfo
	2,  // 6: run.v2.RunSpan.children:type_name -> run.v2.RunSpan
	5,  // 7: run.v2.StepInfo.sleep:type_name -> run.v2.StepInfoSleep
	6,  // 8: run.v2.StepInfo.wait:type_name -> run.v2.StepInfoWaitForEvent
	4,  // 9: run.v2.StepInfo.invoke:type_name -> run.v2.StepInfoInvoke
	7,  // 10: run.v2.StepInfo.run:type_name -> run.v2.StepInfoRun
	11, // 11: run.v2.StepInfoInvoke.timeout:type_name -> google.protobuf.Timestamp
	11, // 12: run.v2.StepInfoSleep.sleep_until:type_name -> google.protobuf.Timestamp
	11, // 13: run.v2.StepInfoWaitForEvent.timeout:type_name -> google.protobuf.Timestamp
	9,  // 14: run.v2.RunSpanOutput.error:type_name -> run.v2.StepError
	11, // 15: run.v2.RunTrigger.timestamp:type_name -> google.protobuf.Timestamp
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_run_v2_run_proto_init() }
func file_run_v2_run_proto_init() {
	if File_run_v2_run_proto != nil {
		return
	}
	file_run_v2_run_proto_msgTypes[0].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[1].OneofWrappers = []any{
		(*StepInfo_Sleep)(nil),
		(*StepInfo_Wait)(nil),
		(*StepInfo_Invoke)(nil),
		(*StepInfo_Run)(nil),
	}
	file_run_v2_run_proto_msgTypes[2].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[4].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[5].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[6].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[7].OneofWrappers = []any{}
	file_run_v2_run_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_run_v2_run_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_run_v2_run_proto_goTypes,
		DependencyIndexes: file_run_v2_run_proto_depIdxs,
		EnumInfos:         file_run_v2_run_proto_enumTypes,
		MessageInfos:      file_run_v2_run_proto_msgTypes,
	}.Build()
	File_run_v2_run_proto = out.File
	file_run_v2_run_proto_rawDesc = nil
	file_run_v2_run_proto_goTypes = nil
	file_run_v2_run_proto_depIdxs = nil
}
