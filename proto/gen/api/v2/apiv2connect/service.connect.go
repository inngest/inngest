// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/service.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/inngest/inngest/proto/gen/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// V2Name is the fully-qualified name of the V2 service.
	V2Name = "api.v2.V2"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// V2HealthProcedure is the fully-qualified name of the V2's Health RPC.
	V2HealthProcedure = "/api.v2.V2/Health"
	// V2XSchemaOnlyProcedure is the fully-qualified name of the V2's _SchemaOnly RPC.
	V2XSchemaOnlyProcedure = "/api.v2.V2/_SchemaOnly"
	// V2CreateAccountProcedure is the fully-qualified name of the V2's CreateAccount RPC.
	V2CreateAccountProcedure = "/api.v2.V2/CreateAccount"
	// V2CreateEnvProcedure is the fully-qualified name of the V2's CreateEnv RPC.
	V2CreateEnvProcedure = "/api.v2.V2/CreateEnv"
	// V2FetchAccountsProcedure is the fully-qualified name of the V2's FetchAccounts RPC.
	V2FetchAccountsProcedure = "/api.v2.V2/FetchAccounts"
	// V2FetchAccountProcedure is the fully-qualified name of the V2's FetchAccount RPC.
	V2FetchAccountProcedure = "/api.v2.V2/FetchAccount"
	// V2FetchAccountEnvsProcedure is the fully-qualified name of the V2's FetchAccountEnvs RPC.
	V2FetchAccountEnvsProcedure = "/api.v2.V2/FetchAccountEnvs"
	// V2FetchAccountSigningKeysProcedure is the fully-qualified name of the V2's
	// FetchAccountSigningKeys RPC.
	V2FetchAccountSigningKeysProcedure = "/api.v2.V2/FetchAccountSigningKeys"
)

// V2Client is a client for the api.v2.V2 service.
type V2Client interface {
	Health(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error)
	// Internal method to ensure ErrorResponse schema generation (not exposed via HTTP)
	XSchemaOnly(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.ErrorResponse], error)
	CreateAccount(context.Context, *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error)
	CreateEnv(context.Context, *connect.Request[v2.CreateEnvRequest]) (*connect.Response[v2.CreateEnvResponse], error)
	FetchAccounts(context.Context, *connect.Request[v2.FetchAccountsRequest]) (*connect.Response[v2.FetchAccountsResponse], error)
	FetchAccount(context.Context, *connect.Request[v2.FetchAccountRequest]) (*connect.Response[v2.FetchAccountResponse], error)
	FetchAccountEnvs(context.Context, *connect.Request[v2.FetchAccountEnvsRequest]) (*connect.Response[v2.FetchAccountEnvsResponse], error)
	FetchAccountSigningKeys(context.Context, *connect.Request[v2.FetchAccountSigningKeysRequest]) (*connect.Response[v2.FetchAccountSigningKeysResponse], error)
}

// NewV2Client constructs a client for the api.v2.V2 service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewV2Client(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) V2Client {
	baseURL = strings.TrimRight(baseURL, "/")
	v2Methods := v2.File_api_v2_service_proto.Services().ByName("V2").Methods()
	return &v2Client{
		health: connect.NewClient[v2.HealthRequest, v2.HealthResponse](
			httpClient,
			baseURL+V2HealthProcedure,
			connect.WithSchema(v2Methods.ByName("Health")),
			connect.WithClientOptions(opts...),
		),
		xSchemaOnly: connect.NewClient[v2.HealthRequest, v2.ErrorResponse](
			httpClient,
			baseURL+V2XSchemaOnlyProcedure,
			connect.WithSchema(v2Methods.ByName("_SchemaOnly")),
			connect.WithClientOptions(opts...),
		),
		createAccount: connect.NewClient[v2.CreateAccountRequest, v2.CreateAccountResponse](
			httpClient,
			baseURL+V2CreateAccountProcedure,
			connect.WithSchema(v2Methods.ByName("CreateAccount")),
			connect.WithClientOptions(opts...),
		),
		createEnv: connect.NewClient[v2.CreateEnvRequest, v2.CreateEnvResponse](
			httpClient,
			baseURL+V2CreateEnvProcedure,
			connect.WithSchema(v2Methods.ByName("CreateEnv")),
			connect.WithClientOptions(opts...),
		),
		fetchAccounts: connect.NewClient[v2.FetchAccountsRequest, v2.FetchAccountsResponse](
			httpClient,
			baseURL+V2FetchAccountsProcedure,
			connect.WithSchema(v2Methods.ByName("FetchAccounts")),
			connect.WithClientOptions(opts...),
		),
		fetchAccount: connect.NewClient[v2.FetchAccountRequest, v2.FetchAccountResponse](
			httpClient,
			baseURL+V2FetchAccountProcedure,
			connect.WithSchema(v2Methods.ByName("FetchAccount")),
			connect.WithClientOptions(opts...),
		),
		fetchAccountEnvs: connect.NewClient[v2.FetchAccountEnvsRequest, v2.FetchAccountEnvsResponse](
			httpClient,
			baseURL+V2FetchAccountEnvsProcedure,
			connect.WithSchema(v2Methods.ByName("FetchAccountEnvs")),
			connect.WithClientOptions(opts...),
		),
		fetchAccountSigningKeys: connect.NewClient[v2.FetchAccountSigningKeysRequest, v2.FetchAccountSigningKeysResponse](
			httpClient,
			baseURL+V2FetchAccountSigningKeysProcedure,
			connect.WithSchema(v2Methods.ByName("FetchAccountSigningKeys")),
			connect.WithClientOptions(opts...),
		),
	}
}

// v2Client implements V2Client.
type v2Client struct {
	health                  *connect.Client[v2.HealthRequest, v2.HealthResponse]
	xSchemaOnly             *connect.Client[v2.HealthRequest, v2.ErrorResponse]
	createAccount           *connect.Client[v2.CreateAccountRequest, v2.CreateAccountResponse]
	createEnv               *connect.Client[v2.CreateEnvRequest, v2.CreateEnvResponse]
	fetchAccounts           *connect.Client[v2.FetchAccountsRequest, v2.FetchAccountsResponse]
	fetchAccount            *connect.Client[v2.FetchAccountRequest, v2.FetchAccountResponse]
	fetchAccountEnvs        *connect.Client[v2.FetchAccountEnvsRequest, v2.FetchAccountEnvsResponse]
	fetchAccountSigningKeys *connect.Client[v2.FetchAccountSigningKeysRequest, v2.FetchAccountSigningKeysResponse]
}

// Health calls api.v2.V2.Health.
func (c *v2Client) Health(ctx context.Context, req *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// XSchemaOnly calls api.v2.V2._SchemaOnly.
func (c *v2Client) XSchemaOnly(ctx context.Context, req *connect.Request[v2.HealthRequest]) (*connect.Response[v2.ErrorResponse], error) {
	return c.xSchemaOnly.CallUnary(ctx, req)
}

// CreateAccount calls api.v2.V2.CreateAccount.
func (c *v2Client) CreateAccount(ctx context.Context, req *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// CreateEnv calls api.v2.V2.CreateEnv.
func (c *v2Client) CreateEnv(ctx context.Context, req *connect.Request[v2.CreateEnvRequest]) (*connect.Response[v2.CreateEnvResponse], error) {
	return c.createEnv.CallUnary(ctx, req)
}

// FetchAccounts calls api.v2.V2.FetchAccounts.
func (c *v2Client) FetchAccounts(ctx context.Context, req *connect.Request[v2.FetchAccountsRequest]) (*connect.Response[v2.FetchAccountsResponse], error) {
	return c.fetchAccounts.CallUnary(ctx, req)
}

// FetchAccount calls api.v2.V2.FetchAccount.
func (c *v2Client) FetchAccount(ctx context.Context, req *connect.Request[v2.FetchAccountRequest]) (*connect.Response[v2.FetchAccountResponse], error) {
	return c.fetchAccount.CallUnary(ctx, req)
}

// FetchAccountEnvs calls api.v2.V2.FetchAccountEnvs.
func (c *v2Client) FetchAccountEnvs(ctx context.Context, req *connect.Request[v2.FetchAccountEnvsRequest]) (*connect.Response[v2.FetchAccountEnvsResponse], error) {
	return c.fetchAccountEnvs.CallUnary(ctx, req)
}

// FetchAccountSigningKeys calls api.v2.V2.FetchAccountSigningKeys.
func (c *v2Client) FetchAccountSigningKeys(ctx context.Context, req *connect.Request[v2.FetchAccountSigningKeysRequest]) (*connect.Response[v2.FetchAccountSigningKeysResponse], error) {
	return c.fetchAccountSigningKeys.CallUnary(ctx, req)
}

// V2Handler is an implementation of the api.v2.V2 service.
type V2Handler interface {
	Health(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error)
	// Internal method to ensure ErrorResponse schema generation (not exposed via HTTP)
	XSchemaOnly(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.ErrorResponse], error)
	CreateAccount(context.Context, *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error)
	CreateEnv(context.Context, *connect.Request[v2.CreateEnvRequest]) (*connect.Response[v2.CreateEnvResponse], error)
	FetchAccounts(context.Context, *connect.Request[v2.FetchAccountsRequest]) (*connect.Response[v2.FetchAccountsResponse], error)
	FetchAccount(context.Context, *connect.Request[v2.FetchAccountRequest]) (*connect.Response[v2.FetchAccountResponse], error)
	FetchAccountEnvs(context.Context, *connect.Request[v2.FetchAccountEnvsRequest]) (*connect.Response[v2.FetchAccountEnvsResponse], error)
	FetchAccountSigningKeys(context.Context, *connect.Request[v2.FetchAccountSigningKeysRequest]) (*connect.Response[v2.FetchAccountSigningKeysResponse], error)
}

// NewV2Handler builds an HTTP handler from the service implementation. It returns the path on which
// to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewV2Handler(svc V2Handler, opts ...connect.HandlerOption) (string, http.Handler) {
	v2Methods := v2.File_api_v2_service_proto.Services().ByName("V2").Methods()
	v2HealthHandler := connect.NewUnaryHandler(
		V2HealthProcedure,
		svc.Health,
		connect.WithSchema(v2Methods.ByName("Health")),
		connect.WithHandlerOptions(opts...),
	)
	v2XSchemaOnlyHandler := connect.NewUnaryHandler(
		V2XSchemaOnlyProcedure,
		svc.XSchemaOnly,
		connect.WithSchema(v2Methods.ByName("_SchemaOnly")),
		connect.WithHandlerOptions(opts...),
	)
	v2CreateAccountHandler := connect.NewUnaryHandler(
		V2CreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(v2Methods.ByName("CreateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	v2CreateEnvHandler := connect.NewUnaryHandler(
		V2CreateEnvProcedure,
		svc.CreateEnv,
		connect.WithSchema(v2Methods.ByName("CreateEnv")),
		connect.WithHandlerOptions(opts...),
	)
	v2FetchAccountsHandler := connect.NewUnaryHandler(
		V2FetchAccountsProcedure,
		svc.FetchAccounts,
		connect.WithSchema(v2Methods.ByName("FetchAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	v2FetchAccountHandler := connect.NewUnaryHandler(
		V2FetchAccountProcedure,
		svc.FetchAccount,
		connect.WithSchema(v2Methods.ByName("FetchAccount")),
		connect.WithHandlerOptions(opts...),
	)
	v2FetchAccountEnvsHandler := connect.NewUnaryHandler(
		V2FetchAccountEnvsProcedure,
		svc.FetchAccountEnvs,
		connect.WithSchema(v2Methods.ByName("FetchAccountEnvs")),
		connect.WithHandlerOptions(opts...),
	)
	v2FetchAccountSigningKeysHandler := connect.NewUnaryHandler(
		V2FetchAccountSigningKeysProcedure,
		svc.FetchAccountSigningKeys,
		connect.WithSchema(v2Methods.ByName("FetchAccountSigningKeys")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.V2/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case V2HealthProcedure:
			v2HealthHandler.ServeHTTP(w, r)
		case V2XSchemaOnlyProcedure:
			v2XSchemaOnlyHandler.ServeHTTP(w, r)
		case V2CreateAccountProcedure:
			v2CreateAccountHandler.ServeHTTP(w, r)
		case V2CreateEnvProcedure:
			v2CreateEnvHandler.ServeHTTP(w, r)
		case V2FetchAccountsProcedure:
			v2FetchAccountsHandler.ServeHTTP(w, r)
		case V2FetchAccountProcedure:
			v2FetchAccountHandler.ServeHTTP(w, r)
		case V2FetchAccountEnvsProcedure:
			v2FetchAccountEnvsHandler.ServeHTTP(w, r)
		case V2FetchAccountSigningKeysProcedure:
			v2FetchAccountSigningKeysHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedV2Handler returns CodeUnimplemented from all methods.
type UnimplementedV2Handler struct{}

func (UnimplementedV2Handler) Health(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.Health is not implemented"))
}

func (UnimplementedV2Handler) XSchemaOnly(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.ErrorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2._SchemaOnly is not implemented"))
}

func (UnimplementedV2Handler) CreateAccount(context.Context, *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.CreateAccount is not implemented"))
}

func (UnimplementedV2Handler) CreateEnv(context.Context, *connect.Request[v2.CreateEnvRequest]) (*connect.Response[v2.CreateEnvResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.CreateEnv is not implemented"))
}

func (UnimplementedV2Handler) FetchAccounts(context.Context, *connect.Request[v2.FetchAccountsRequest]) (*connect.Response[v2.FetchAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.FetchAccounts is not implemented"))
}

func (UnimplementedV2Handler) FetchAccount(context.Context, *connect.Request[v2.FetchAccountRequest]) (*connect.Response[v2.FetchAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.FetchAccount is not implemented"))
}

func (UnimplementedV2Handler) FetchAccountEnvs(context.Context, *connect.Request[v2.FetchAccountEnvsRequest]) (*connect.Response[v2.FetchAccountEnvsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.FetchAccountEnvs is not implemented"))
}

func (UnimplementedV2Handler) FetchAccountSigningKeys(context.Context, *connect.Request[v2.FetchAccountSigningKeysRequest]) (*connect.Response[v2.FetchAccountSigningKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.FetchAccountSigningKeys is not implemented"))
}
