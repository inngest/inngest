// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v2/service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	V2_Hello_FullMethodName     = "/api.v2.V2/Hello"
	V2_Greetings_FullMethodName = "/api.v2.V2/Greetings"
)

// V2Client is the client API for V2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V2Client interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	Greetings(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
}

type v2Client struct {
	cc grpc.ClientConnInterface
}

func NewV2Client(cc grpc.ClientConnInterface) V2Client {
	return &v2Client{cc}
}

func (c *v2Client) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, V2_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v2Client) Greetings(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, V2_Greetings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V2Server is the server API for V2 service.
// All implementations must embed UnimplementedV2Server
// for forward compatibility.
type V2Server interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	Greetings(context.Context, *GreetRequest) (*GreetResponse, error)
	mustEmbedUnimplementedV2Server()
}

// UnimplementedV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedV2Server struct{}

func (UnimplementedV2Server) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedV2Server) Greetings(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greetings not implemented")
}
func (UnimplementedV2Server) mustEmbedUnimplementedV2Server() {}
func (UnimplementedV2Server) testEmbeddedByValue()            {}

// UnsafeV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V2Server will
// result in compilation errors.
type UnsafeV2Server interface {
	mustEmbedUnimplementedV2Server()
}

func RegisterV2Server(s grpc.ServiceRegistrar, srv V2Server) {
	// If the following call pancis, it indicates UnimplementedV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&V2_ServiceDesc, srv)
}

func _V2_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V2_Greetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V2Server).Greetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V2_Greetings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V2Server).Greetings(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V2_ServiceDesc is the grpc.ServiceDesc for V2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v2.V2",
	HandlerType: (*V2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _V2_Hello_Handler,
		},
		{
			MethodName: "Greetings",
			Handler:    _V2_Greetings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/service.proto",
}
