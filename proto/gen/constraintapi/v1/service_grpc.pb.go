// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: constraintapi/v1/service.proto

package constraintapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConstraintAPI_Check_FullMethodName       = "/constraintapi.v1.ConstraintAPI/Check"
	ConstraintAPI_Acquire_FullMethodName     = "/constraintapi.v1.ConstraintAPI/Acquire"
	ConstraintAPI_ExtendLease_FullMethodName = "/constraintapi.v1.ConstraintAPI/ExtendLease"
	ConstraintAPI_Release_FullMethodName     = "/constraintapi.v1.ConstraintAPI/Release"
)

// ConstraintAPIClient is the client API for ConstraintAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConstraintAPIClient interface {
	Check(ctx context.Context, in *CapacityCheckRequest, opts ...grpc.CallOption) (*CapacityCheckResponse, error)
	Acquire(ctx context.Context, in *CapacityAcquireRequest, opts ...grpc.CallOption) (*CapacityAcquireResponse, error)
	ExtendLease(ctx context.Context, in *CapacityExtendLeaseRequest, opts ...grpc.CallOption) (*CapacityExtendLeaseResponse, error)
	Release(ctx context.Context, in *CapacityReleaseRequest, opts ...grpc.CallOption) (*CapacityReleaseResponse, error)
}

type constraintAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewConstraintAPIClient(cc grpc.ClientConnInterface) ConstraintAPIClient {
	return &constraintAPIClient{cc}
}

func (c *constraintAPIClient) Check(ctx context.Context, in *CapacityCheckRequest, opts ...grpc.CallOption) (*CapacityCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapacityCheckResponse)
	err := c.cc.Invoke(ctx, ConstraintAPI_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constraintAPIClient) Acquire(ctx context.Context, in *CapacityAcquireRequest, opts ...grpc.CallOption) (*CapacityAcquireResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapacityAcquireResponse)
	err := c.cc.Invoke(ctx, ConstraintAPI_Acquire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constraintAPIClient) ExtendLease(ctx context.Context, in *CapacityExtendLeaseRequest, opts ...grpc.CallOption) (*CapacityExtendLeaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapacityExtendLeaseResponse)
	err := c.cc.Invoke(ctx, ConstraintAPI_ExtendLease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constraintAPIClient) Release(ctx context.Context, in *CapacityReleaseRequest, opts ...grpc.CallOption) (*CapacityReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapacityReleaseResponse)
	err := c.cc.Invoke(ctx, ConstraintAPI_Release_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConstraintAPIServer is the server API for ConstraintAPI service.
// All implementations must embed UnimplementedConstraintAPIServer
// for forward compatibility.
type ConstraintAPIServer interface {
	Check(context.Context, *CapacityCheckRequest) (*CapacityCheckResponse, error)
	Acquire(context.Context, *CapacityAcquireRequest) (*CapacityAcquireResponse, error)
	ExtendLease(context.Context, *CapacityExtendLeaseRequest) (*CapacityExtendLeaseResponse, error)
	Release(context.Context, *CapacityReleaseRequest) (*CapacityReleaseResponse, error)
	mustEmbedUnimplementedConstraintAPIServer()
}

// UnimplementedConstraintAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConstraintAPIServer struct{}

func (UnimplementedConstraintAPIServer) Check(context.Context, *CapacityCheckRequest) (*CapacityCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedConstraintAPIServer) Acquire(context.Context, *CapacityAcquireRequest) (*CapacityAcquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acquire not implemented")
}
func (UnimplementedConstraintAPIServer) ExtendLease(context.Context, *CapacityExtendLeaseRequest) (*CapacityExtendLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendLease not implemented")
}
func (UnimplementedConstraintAPIServer) Release(context.Context, *CapacityReleaseRequest) (*CapacityReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedConstraintAPIServer) mustEmbedUnimplementedConstraintAPIServer() {}
func (UnimplementedConstraintAPIServer) testEmbeddedByValue()                       {}

// UnsafeConstraintAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConstraintAPIServer will
// result in compilation errors.
type UnsafeConstraintAPIServer interface {
	mustEmbedUnimplementedConstraintAPIServer()
}

func RegisterConstraintAPIServer(s grpc.ServiceRegistrar, srv ConstraintAPIServer) {
	// If the following call pancis, it indicates UnimplementedConstraintAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConstraintAPI_ServiceDesc, srv)
}

func _ConstraintAPI_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapacityCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstraintAPIServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConstraintAPI_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstraintAPIServer).Check(ctx, req.(*CapacityCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstraintAPI_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapacityAcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstraintAPIServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConstraintAPI_Acquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstraintAPIServer).Acquire(ctx, req.(*CapacityAcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstraintAPI_ExtendLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapacityExtendLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstraintAPIServer).ExtendLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConstraintAPI_ExtendLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstraintAPIServer).ExtendLease(ctx, req.(*CapacityExtendLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstraintAPI_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapacityReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstraintAPIServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConstraintAPI_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstraintAPIServer).Release(ctx, req.(*CapacityReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConstraintAPI_ServiceDesc is the grpc.ServiceDesc for ConstraintAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConstraintAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "constraintapi.v1.ConstraintAPI",
	HandlerType: (*ConstraintAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ConstraintAPI_Check_Handler,
		},
		{
			MethodName: "Acquire",
			Handler:    _ConstraintAPI_Acquire_Handler,
		},
		{
			MethodName: "ExtendLease",
			Handler:    _ConstraintAPI_ExtendLease_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _ConstraintAPI_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "constraintapi/v1/service.proto",
}
