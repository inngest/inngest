// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: constraintapi/v1/service.proto

package constraintapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/inngest/inngest/proto/gen/constraintapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConstraintAPIName is the fully-qualified name of the ConstraintAPI service.
	ConstraintAPIName = "constraintapi.v1.ConstraintAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConstraintAPICheckProcedure is the fully-qualified name of the ConstraintAPI's Check RPC.
	ConstraintAPICheckProcedure = "/constraintapi.v1.ConstraintAPI/Check"
	// ConstraintAPILeaseProcedure is the fully-qualified name of the ConstraintAPI's Lease RPC.
	ConstraintAPILeaseProcedure = "/constraintapi.v1.ConstraintAPI/Lease"
	// ConstraintAPIExtendLeaseProcedure is the fully-qualified name of the ConstraintAPI's ExtendLease
	// RPC.
	ConstraintAPIExtendLeaseProcedure = "/constraintapi.v1.ConstraintAPI/ExtendLease"
	// ConstraintAPICommitProcedure is the fully-qualified name of the ConstraintAPI's Commit RPC.
	ConstraintAPICommitProcedure = "/constraintapi.v1.ConstraintAPI/Commit"
	// ConstraintAPIRollbackProcedure is the fully-qualified name of the ConstraintAPI's Rollback RPC.
	ConstraintAPIRollbackProcedure = "/constraintapi.v1.ConstraintAPI/Rollback"
)

// ConstraintAPIClient is a client for the constraintapi.v1.ConstraintAPI service.
type ConstraintAPIClient interface {
	Check(context.Context, *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error)
	Lease(context.Context, *connect.Request[v1.CapacityLeaseRequest]) (*connect.Response[v1.CapacityLeaseResponse], error)
	ExtendLease(context.Context, *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error)
	Commit(context.Context, *connect.Request[v1.CapacityCommitRequest]) (*connect.Response[v1.CapacityCommitResponse], error)
	Rollback(context.Context, *connect.Request[v1.CapacityRollbackRequest]) (*connect.Response[v1.CapacityRollbackResponse], error)
}

// NewConstraintAPIClient constructs a client for the constraintapi.v1.ConstraintAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConstraintAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConstraintAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	constraintAPIMethods := v1.File_constraintapi_v1_service_proto.Services().ByName("ConstraintAPI").Methods()
	return &constraintAPIClient{
		check: connect.NewClient[v1.CapacityCheckRequest, v1.CapacityCheckResponse](
			httpClient,
			baseURL+ConstraintAPICheckProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("Check")),
			connect.WithClientOptions(opts...),
		),
		lease: connect.NewClient[v1.CapacityLeaseRequest, v1.CapacityLeaseResponse](
			httpClient,
			baseURL+ConstraintAPILeaseProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("Lease")),
			connect.WithClientOptions(opts...),
		),
		extendLease: connect.NewClient[v1.CapacityExtendLeaseRequest, v1.CapacityExtendLeaseResponse](
			httpClient,
			baseURL+ConstraintAPIExtendLeaseProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("ExtendLease")),
			connect.WithClientOptions(opts...),
		),
		commit: connect.NewClient[v1.CapacityCommitRequest, v1.CapacityCommitResponse](
			httpClient,
			baseURL+ConstraintAPICommitProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("Commit")),
			connect.WithClientOptions(opts...),
		),
		rollback: connect.NewClient[v1.CapacityRollbackRequest, v1.CapacityRollbackResponse](
			httpClient,
			baseURL+ConstraintAPIRollbackProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("Rollback")),
			connect.WithClientOptions(opts...),
		),
	}
}

// constraintAPIClient implements ConstraintAPIClient.
type constraintAPIClient struct {
	check       *connect.Client[v1.CapacityCheckRequest, v1.CapacityCheckResponse]
	lease       *connect.Client[v1.CapacityLeaseRequest, v1.CapacityLeaseResponse]
	extendLease *connect.Client[v1.CapacityExtendLeaseRequest, v1.CapacityExtendLeaseResponse]
	commit      *connect.Client[v1.CapacityCommitRequest, v1.CapacityCommitResponse]
	rollback    *connect.Client[v1.CapacityRollbackRequest, v1.CapacityRollbackResponse]
}

// Check calls constraintapi.v1.ConstraintAPI.Check.
func (c *constraintAPIClient) Check(ctx context.Context, req *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// Lease calls constraintapi.v1.ConstraintAPI.Lease.
func (c *constraintAPIClient) Lease(ctx context.Context, req *connect.Request[v1.CapacityLeaseRequest]) (*connect.Response[v1.CapacityLeaseResponse], error) {
	return c.lease.CallUnary(ctx, req)
}

// ExtendLease calls constraintapi.v1.ConstraintAPI.ExtendLease.
func (c *constraintAPIClient) ExtendLease(ctx context.Context, req *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error) {
	return c.extendLease.CallUnary(ctx, req)
}

// Commit calls constraintapi.v1.ConstraintAPI.Commit.
func (c *constraintAPIClient) Commit(ctx context.Context, req *connect.Request[v1.CapacityCommitRequest]) (*connect.Response[v1.CapacityCommitResponse], error) {
	return c.commit.CallUnary(ctx, req)
}

// Rollback calls constraintapi.v1.ConstraintAPI.Rollback.
func (c *constraintAPIClient) Rollback(ctx context.Context, req *connect.Request[v1.CapacityRollbackRequest]) (*connect.Response[v1.CapacityRollbackResponse], error) {
	return c.rollback.CallUnary(ctx, req)
}

// ConstraintAPIHandler is an implementation of the constraintapi.v1.ConstraintAPI service.
type ConstraintAPIHandler interface {
	Check(context.Context, *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error)
	Lease(context.Context, *connect.Request[v1.CapacityLeaseRequest]) (*connect.Response[v1.CapacityLeaseResponse], error)
	ExtendLease(context.Context, *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error)
	Commit(context.Context, *connect.Request[v1.CapacityCommitRequest]) (*connect.Response[v1.CapacityCommitResponse], error)
	Rollback(context.Context, *connect.Request[v1.CapacityRollbackRequest]) (*connect.Response[v1.CapacityRollbackResponse], error)
}

// NewConstraintAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConstraintAPIHandler(svc ConstraintAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	constraintAPIMethods := v1.File_constraintapi_v1_service_proto.Services().ByName("ConstraintAPI").Methods()
	constraintAPICheckHandler := connect.NewUnaryHandler(
		ConstraintAPICheckProcedure,
		svc.Check,
		connect.WithSchema(constraintAPIMethods.ByName("Check")),
		connect.WithHandlerOptions(opts...),
	)
	constraintAPILeaseHandler := connect.NewUnaryHandler(
		ConstraintAPILeaseProcedure,
		svc.Lease,
		connect.WithSchema(constraintAPIMethods.ByName("Lease")),
		connect.WithHandlerOptions(opts...),
	)
	constraintAPIExtendLeaseHandler := connect.NewUnaryHandler(
		ConstraintAPIExtendLeaseProcedure,
		svc.ExtendLease,
		connect.WithSchema(constraintAPIMethods.ByName("ExtendLease")),
		connect.WithHandlerOptions(opts...),
	)
	constraintAPICommitHandler := connect.NewUnaryHandler(
		ConstraintAPICommitProcedure,
		svc.Commit,
		connect.WithSchema(constraintAPIMethods.ByName("Commit")),
		connect.WithHandlerOptions(opts...),
	)
	constraintAPIRollbackHandler := connect.NewUnaryHandler(
		ConstraintAPIRollbackProcedure,
		svc.Rollback,
		connect.WithSchema(constraintAPIMethods.ByName("Rollback")),
		connect.WithHandlerOptions(opts...),
	)
	return "/constraintapi.v1.ConstraintAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConstraintAPICheckProcedure:
			constraintAPICheckHandler.ServeHTTP(w, r)
		case ConstraintAPILeaseProcedure:
			constraintAPILeaseHandler.ServeHTTP(w, r)
		case ConstraintAPIExtendLeaseProcedure:
			constraintAPIExtendLeaseHandler.ServeHTTP(w, r)
		case ConstraintAPICommitProcedure:
			constraintAPICommitHandler.ServeHTTP(w, r)
		case ConstraintAPIRollbackProcedure:
			constraintAPIRollbackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConstraintAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedConstraintAPIHandler struct{}

func (UnimplementedConstraintAPIHandler) Check(context.Context, *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.Check is not implemented"))
}

func (UnimplementedConstraintAPIHandler) Lease(context.Context, *connect.Request[v1.CapacityLeaseRequest]) (*connect.Response[v1.CapacityLeaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.Lease is not implemented"))
}

func (UnimplementedConstraintAPIHandler) ExtendLease(context.Context, *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.ExtendLease is not implemented"))
}

func (UnimplementedConstraintAPIHandler) Commit(context.Context, *connect.Request[v1.CapacityCommitRequest]) (*connect.Response[v1.CapacityCommitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.Commit is not implemented"))
}

func (UnimplementedConstraintAPIHandler) Rollback(context.Context, *connect.Request[v1.CapacityRollbackRequest]) (*connect.Response[v1.CapacityRollbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.Rollback is not implemented"))
}
