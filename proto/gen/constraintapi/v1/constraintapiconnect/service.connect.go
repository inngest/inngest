// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: constraintapi/v1/service.proto

package constraintapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/inngest/inngest/proto/gen/constraintapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConstraintAPIName is the fully-qualified name of the ConstraintAPI service.
	ConstraintAPIName = "constraintapi.v1.ConstraintAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConstraintAPICheckProcedure is the fully-qualified name of the ConstraintAPI's Check RPC.
	ConstraintAPICheckProcedure = "/constraintapi.v1.ConstraintAPI/Check"
	// ConstraintAPIAcquireProcedure is the fully-qualified name of the ConstraintAPI's Acquire RPC.
	ConstraintAPIAcquireProcedure = "/constraintapi.v1.ConstraintAPI/Acquire"
	// ConstraintAPIExtendLeaseProcedure is the fully-qualified name of the ConstraintAPI's ExtendLease
	// RPC.
	ConstraintAPIExtendLeaseProcedure = "/constraintapi.v1.ConstraintAPI/ExtendLease"
	// ConstraintAPIReleaseProcedure is the fully-qualified name of the ConstraintAPI's Release RPC.
	ConstraintAPIReleaseProcedure = "/constraintapi.v1.ConstraintAPI/Release"
)

// ConstraintAPIClient is a client for the constraintapi.v1.ConstraintAPI service.
type ConstraintAPIClient interface {
	Check(context.Context, *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error)
	Acquire(context.Context, *connect.Request[v1.CapacityAcquireRequest]) (*connect.Response[v1.CapacityAcquireResponse], error)
	ExtendLease(context.Context, *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error)
	Release(context.Context, *connect.Request[v1.CapacityReleaseRequest]) (*connect.Response[v1.CapacityReleaseResponse], error)
}

// NewConstraintAPIClient constructs a client for the constraintapi.v1.ConstraintAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConstraintAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConstraintAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	constraintAPIMethods := v1.File_constraintapi_v1_service_proto.Services().ByName("ConstraintAPI").Methods()
	return &constraintAPIClient{
		check: connect.NewClient[v1.CapacityCheckRequest, v1.CapacityCheckResponse](
			httpClient,
			baseURL+ConstraintAPICheckProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("Check")),
			connect.WithClientOptions(opts...),
		),
		acquire: connect.NewClient[v1.CapacityAcquireRequest, v1.CapacityAcquireResponse](
			httpClient,
			baseURL+ConstraintAPIAcquireProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("Acquire")),
			connect.WithClientOptions(opts...),
		),
		extendLease: connect.NewClient[v1.CapacityExtendLeaseRequest, v1.CapacityExtendLeaseResponse](
			httpClient,
			baseURL+ConstraintAPIExtendLeaseProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("ExtendLease")),
			connect.WithClientOptions(opts...),
		),
		release: connect.NewClient[v1.CapacityReleaseRequest, v1.CapacityReleaseResponse](
			httpClient,
			baseURL+ConstraintAPIReleaseProcedure,
			connect.WithSchema(constraintAPIMethods.ByName("Release")),
			connect.WithClientOptions(opts...),
		),
	}
}

// constraintAPIClient implements ConstraintAPIClient.
type constraintAPIClient struct {
	check       *connect.Client[v1.CapacityCheckRequest, v1.CapacityCheckResponse]
	acquire     *connect.Client[v1.CapacityAcquireRequest, v1.CapacityAcquireResponse]
	extendLease *connect.Client[v1.CapacityExtendLeaseRequest, v1.CapacityExtendLeaseResponse]
	release     *connect.Client[v1.CapacityReleaseRequest, v1.CapacityReleaseResponse]
}

// Check calls constraintapi.v1.ConstraintAPI.Check.
func (c *constraintAPIClient) Check(ctx context.Context, req *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// Acquire calls constraintapi.v1.ConstraintAPI.Acquire.
func (c *constraintAPIClient) Acquire(ctx context.Context, req *connect.Request[v1.CapacityAcquireRequest]) (*connect.Response[v1.CapacityAcquireResponse], error) {
	return c.acquire.CallUnary(ctx, req)
}

// ExtendLease calls constraintapi.v1.ConstraintAPI.ExtendLease.
func (c *constraintAPIClient) ExtendLease(ctx context.Context, req *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error) {
	return c.extendLease.CallUnary(ctx, req)
}

// Release calls constraintapi.v1.ConstraintAPI.Release.
func (c *constraintAPIClient) Release(ctx context.Context, req *connect.Request[v1.CapacityReleaseRequest]) (*connect.Response[v1.CapacityReleaseResponse], error) {
	return c.release.CallUnary(ctx, req)
}

// ConstraintAPIHandler is an implementation of the constraintapi.v1.ConstraintAPI service.
type ConstraintAPIHandler interface {
	Check(context.Context, *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error)
	Acquire(context.Context, *connect.Request[v1.CapacityAcquireRequest]) (*connect.Response[v1.CapacityAcquireResponse], error)
	ExtendLease(context.Context, *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error)
	Release(context.Context, *connect.Request[v1.CapacityReleaseRequest]) (*connect.Response[v1.CapacityReleaseResponse], error)
}

// NewConstraintAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConstraintAPIHandler(svc ConstraintAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	constraintAPIMethods := v1.File_constraintapi_v1_service_proto.Services().ByName("ConstraintAPI").Methods()
	constraintAPICheckHandler := connect.NewUnaryHandler(
		ConstraintAPICheckProcedure,
		svc.Check,
		connect.WithSchema(constraintAPIMethods.ByName("Check")),
		connect.WithHandlerOptions(opts...),
	)
	constraintAPIAcquireHandler := connect.NewUnaryHandler(
		ConstraintAPIAcquireProcedure,
		svc.Acquire,
		connect.WithSchema(constraintAPIMethods.ByName("Acquire")),
		connect.WithHandlerOptions(opts...),
	)
	constraintAPIExtendLeaseHandler := connect.NewUnaryHandler(
		ConstraintAPIExtendLeaseProcedure,
		svc.ExtendLease,
		connect.WithSchema(constraintAPIMethods.ByName("ExtendLease")),
		connect.WithHandlerOptions(opts...),
	)
	constraintAPIReleaseHandler := connect.NewUnaryHandler(
		ConstraintAPIReleaseProcedure,
		svc.Release,
		connect.WithSchema(constraintAPIMethods.ByName("Release")),
		connect.WithHandlerOptions(opts...),
	)
	return "/constraintapi.v1.ConstraintAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConstraintAPICheckProcedure:
			constraintAPICheckHandler.ServeHTTP(w, r)
		case ConstraintAPIAcquireProcedure:
			constraintAPIAcquireHandler.ServeHTTP(w, r)
		case ConstraintAPIExtendLeaseProcedure:
			constraintAPIExtendLeaseHandler.ServeHTTP(w, r)
		case ConstraintAPIReleaseProcedure:
			constraintAPIReleaseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConstraintAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedConstraintAPIHandler struct{}

func (UnimplementedConstraintAPIHandler) Check(context.Context, *connect.Request[v1.CapacityCheckRequest]) (*connect.Response[v1.CapacityCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.Check is not implemented"))
}

func (UnimplementedConstraintAPIHandler) Acquire(context.Context, *connect.Request[v1.CapacityAcquireRequest]) (*connect.Response[v1.CapacityAcquireResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.Acquire is not implemented"))
}

func (UnimplementedConstraintAPIHandler) ExtendLease(context.Context, *connect.Request[v1.CapacityExtendLeaseRequest]) (*connect.Response[v1.CapacityExtendLeaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.ExtendLease is not implemented"))
}

func (UnimplementedConstraintAPIHandler) Release(context.Context, *connect.Request[v1.CapacityReleaseRequest]) (*connect.Response[v1.CapacityReleaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("constraintapi.v1.ConstraintAPI.Release is not implemented"))
}
