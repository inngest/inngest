// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: connect/v1/service.proto

package connect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectGateway_Forward_FullMethodName = "/connect.v1.ConnectGateway/Forward"
	ConnectGateway_Ping_FullMethodName    = "/connect.v1.ConnectGateway/Ping"
)

// ConnectGatewayClient is the client API for ConnectGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectGatewayClient interface {
	Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (*ForwardResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type connectGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectGatewayClient(cc grpc.ClientConnInterface) ConnectGatewayClient {
	return &connectGatewayClient{cc}
}

func (c *connectGatewayClient) Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (*ForwardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardResponse)
	err := c.cc.Invoke(ctx, ConnectGateway_Forward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectGatewayClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ConnectGateway_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectGatewayServer is the server API for ConnectGateway service.
// All implementations must embed UnimplementedConnectGatewayServer
// for forward compatibility.
type ConnectGatewayServer interface {
	Forward(context.Context, *ForwardRequest) (*ForwardResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedConnectGatewayServer()
}

// UnimplementedConnectGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectGatewayServer struct{}

func (UnimplementedConnectGatewayServer) Forward(context.Context, *ForwardRequest) (*ForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (UnimplementedConnectGatewayServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedConnectGatewayServer) mustEmbedUnimplementedConnectGatewayServer() {}
func (UnimplementedConnectGatewayServer) testEmbeddedByValue()                        {}

// UnsafeConnectGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectGatewayServer will
// result in compilation errors.
type UnsafeConnectGatewayServer interface {
	mustEmbedUnimplementedConnectGatewayServer()
}

func RegisterConnectGatewayServer(s grpc.ServiceRegistrar, srv ConnectGatewayServer) {
	// If the following call pancis, it indicates UnimplementedConnectGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectGateway_ServiceDesc, srv)
}

func _ConnectGateway_Forward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectGatewayServer).Forward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectGateway_Forward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectGatewayServer).Forward(ctx, req.(*ForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectGateway_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectGatewayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectGateway_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectGatewayServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectGateway_ServiceDesc is the grpc.ServiceDesc for ConnectGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect.v1.ConnectGateway",
	HandlerType: (*ConnectGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Forward",
			Handler:    _ConnectGateway_Forward_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ConnectGateway_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect/v1/service.proto",
}
