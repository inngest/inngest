// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: connect/v1/service.proto

package connectconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/inngest/inngest/proto/gen/connect/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConnectGatewayName is the fully-qualified name of the ConnectGateway service.
	ConnectGatewayName = "connect.v1.ConnectGateway"
	// ConnectExecutorName is the fully-qualified name of the ConnectExecutor service.
	ConnectExecutorName = "connect.v1.ConnectExecutor"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectGatewayForwardProcedure is the fully-qualified name of the ConnectGateway's Forward RPC.
	ConnectGatewayForwardProcedure = "/connect.v1.ConnectGateway/Forward"
	// ConnectGatewayPingProcedure is the fully-qualified name of the ConnectGateway's Ping RPC.
	ConnectGatewayPingProcedure = "/connect.v1.ConnectGateway/Ping"
	// ConnectExecutorReplyProcedure is the fully-qualified name of the ConnectExecutor's Reply RPC.
	ConnectExecutorReplyProcedure = "/connect.v1.ConnectExecutor/Reply"
	// ConnectExecutorAckProcedure is the fully-qualified name of the ConnectExecutor's Ack RPC.
	ConnectExecutorAckProcedure = "/connect.v1.ConnectExecutor/Ack"
	// ConnectExecutorPingProcedure is the fully-qualified name of the ConnectExecutor's Ping RPC.
	ConnectExecutorPingProcedure = "/connect.v1.ConnectExecutor/Ping"
)

// ConnectGatewayClient is a client for the connect.v1.ConnectGateway service.
type ConnectGatewayClient interface {
	Forward(context.Context, *connect.Request[v1.ForwardRequest]) (*connect.Response[v1.ForwardResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewConnectGatewayClient constructs a client for the connect.v1.ConnectGateway service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectGatewayClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectGatewayClient {
	baseURL = strings.TrimRight(baseURL, "/")
	connectGatewayMethods := v1.File_connect_v1_service_proto.Services().ByName("ConnectGateway").Methods()
	return &connectGatewayClient{
		forward: connect.NewClient[v1.ForwardRequest, v1.ForwardResponse](
			httpClient,
			baseURL+ConnectGatewayForwardProcedure,
			connect.WithSchema(connectGatewayMethods.ByName("Forward")),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+ConnectGatewayPingProcedure,
			connect.WithSchema(connectGatewayMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
	}
}

// connectGatewayClient implements ConnectGatewayClient.
type connectGatewayClient struct {
	forward *connect.Client[v1.ForwardRequest, v1.ForwardResponse]
	ping    *connect.Client[v1.PingRequest, v1.PingResponse]
}

// Forward calls connect.v1.ConnectGateway.Forward.
func (c *connectGatewayClient) Forward(ctx context.Context, req *connect.Request[v1.ForwardRequest]) (*connect.Response[v1.ForwardResponse], error) {
	return c.forward.CallUnary(ctx, req)
}

// Ping calls connect.v1.ConnectGateway.Ping.
func (c *connectGatewayClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ConnectGatewayHandler is an implementation of the connect.v1.ConnectGateway service.
type ConnectGatewayHandler interface {
	Forward(context.Context, *connect.Request[v1.ForwardRequest]) (*connect.Response[v1.ForwardResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewConnectGatewayHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectGatewayHandler(svc ConnectGatewayHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectGatewayMethods := v1.File_connect_v1_service_proto.Services().ByName("ConnectGateway").Methods()
	connectGatewayForwardHandler := connect.NewUnaryHandler(
		ConnectGatewayForwardProcedure,
		svc.Forward,
		connect.WithSchema(connectGatewayMethods.ByName("Forward")),
		connect.WithHandlerOptions(opts...),
	)
	connectGatewayPingHandler := connect.NewUnaryHandler(
		ConnectGatewayPingProcedure,
		svc.Ping,
		connect.WithSchema(connectGatewayMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	return "/connect.v1.ConnectGateway/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectGatewayForwardProcedure:
			connectGatewayForwardHandler.ServeHTTP(w, r)
		case ConnectGatewayPingProcedure:
			connectGatewayPingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectGatewayHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectGatewayHandler struct{}

func (UnimplementedConnectGatewayHandler) Forward(context.Context, *connect.Request[v1.ForwardRequest]) (*connect.Response[v1.ForwardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connect.v1.ConnectGateway.Forward is not implemented"))
}

func (UnimplementedConnectGatewayHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connect.v1.ConnectGateway.Ping is not implemented"))
}

// ConnectExecutorClient is a client for the connect.v1.ConnectExecutor service.
type ConnectExecutorClient interface {
	Reply(context.Context, *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error)
	Ack(context.Context, *connect.Request[v1.AckMessage]) (*connect.Response[v1.AckResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewConnectExecutorClient constructs a client for the connect.v1.ConnectExecutor service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectExecutorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectExecutorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	connectExecutorMethods := v1.File_connect_v1_service_proto.Services().ByName("ConnectExecutor").Methods()
	return &connectExecutorClient{
		reply: connect.NewClient[v1.ReplyRequest, v1.ReplyResponse](
			httpClient,
			baseURL+ConnectExecutorReplyProcedure,
			connect.WithSchema(connectExecutorMethods.ByName("Reply")),
			connect.WithClientOptions(opts...),
		),
		ack: connect.NewClient[v1.AckMessage, v1.AckResponse](
			httpClient,
			baseURL+ConnectExecutorAckProcedure,
			connect.WithSchema(connectExecutorMethods.ByName("Ack")),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+ConnectExecutorPingProcedure,
			connect.WithSchema(connectExecutorMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
	}
}

// connectExecutorClient implements ConnectExecutorClient.
type connectExecutorClient struct {
	reply *connect.Client[v1.ReplyRequest, v1.ReplyResponse]
	ack   *connect.Client[v1.AckMessage, v1.AckResponse]
	ping  *connect.Client[v1.PingRequest, v1.PingResponse]
}

// Reply calls connect.v1.ConnectExecutor.Reply.
func (c *connectExecutorClient) Reply(ctx context.Context, req *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error) {
	return c.reply.CallUnary(ctx, req)
}

// Ack calls connect.v1.ConnectExecutor.Ack.
func (c *connectExecutorClient) Ack(ctx context.Context, req *connect.Request[v1.AckMessage]) (*connect.Response[v1.AckResponse], error) {
	return c.ack.CallUnary(ctx, req)
}

// Ping calls connect.v1.ConnectExecutor.Ping.
func (c *connectExecutorClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ConnectExecutorHandler is an implementation of the connect.v1.ConnectExecutor service.
type ConnectExecutorHandler interface {
	Reply(context.Context, *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error)
	Ack(context.Context, *connect.Request[v1.AckMessage]) (*connect.Response[v1.AckResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewConnectExecutorHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectExecutorHandler(svc ConnectExecutorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectExecutorMethods := v1.File_connect_v1_service_proto.Services().ByName("ConnectExecutor").Methods()
	connectExecutorReplyHandler := connect.NewUnaryHandler(
		ConnectExecutorReplyProcedure,
		svc.Reply,
		connect.WithSchema(connectExecutorMethods.ByName("Reply")),
		connect.WithHandlerOptions(opts...),
	)
	connectExecutorAckHandler := connect.NewUnaryHandler(
		ConnectExecutorAckProcedure,
		svc.Ack,
		connect.WithSchema(connectExecutorMethods.ByName("Ack")),
		connect.WithHandlerOptions(opts...),
	)
	connectExecutorPingHandler := connect.NewUnaryHandler(
		ConnectExecutorPingProcedure,
		svc.Ping,
		connect.WithSchema(connectExecutorMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	return "/connect.v1.ConnectExecutor/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectExecutorReplyProcedure:
			connectExecutorReplyHandler.ServeHTTP(w, r)
		case ConnectExecutorAckProcedure:
			connectExecutorAckHandler.ServeHTTP(w, r)
		case ConnectExecutorPingProcedure:
			connectExecutorPingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectExecutorHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectExecutorHandler struct{}

func (UnimplementedConnectExecutorHandler) Reply(context.Context, *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connect.v1.ConnectExecutor.Reply is not implemented"))
}

func (UnimplementedConnectExecutorHandler) Ack(context.Context, *connect.Request[v1.AckMessage]) (*connect.Response[v1.AckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connect.v1.ConnectExecutor.Ack is not implemented"))
}

func (UnimplementedConnectExecutorHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connect.v1.ConnectExecutor.Ping is not implemented"))
}
