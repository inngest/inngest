// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: debug/v1/service.proto

package debugconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/inngest/inngest/proto/gen/debug/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DebugName is the fully-qualified name of the Debug service.
	DebugName = "debug.v1.Debug"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DebugGetPartitionProcedure is the fully-qualified name of the Debug's GetPartition RPC.
	DebugGetPartitionProcedure = "/debug.v1.Debug/GetPartition"
	// DebugGetPartitionStatusProcedure is the fully-qualified name of the Debug's GetPartitionStatus
	// RPC.
	DebugGetPartitionStatusProcedure = "/debug.v1.Debug/GetPartitionStatus"
	// DebugGetQueueItemProcedure is the fully-qualified name of the Debug's GetQueueItem RPC.
	DebugGetQueueItemProcedure = "/debug.v1.Debug/GetQueueItem"
)

// DebugClient is a client for the debug.v1.Debug service.
type DebugClient interface {
	// GetPartition retrieves the partition data from the database
	GetPartition(context.Context, *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionResponse], error)
	// GetPartition retrieves additional status of the partition from the queue
	// directly
	GetPartitionStatus(context.Context, *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionStatusResponse], error)
	// GetQueueItem retrieves the queue item object from the queue
	GetQueueItem(context.Context, *connect.Request[v1.QueueItemRequest]) (*connect.Response[v1.QueueItemResponse], error)
}

// NewDebugClient constructs a client for the debug.v1.Debug service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDebugClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DebugClient {
	baseURL = strings.TrimRight(baseURL, "/")
	debugMethods := v1.File_debug_v1_service_proto.Services().ByName("Debug").Methods()
	return &debugClient{
		getPartition: connect.NewClient[v1.PartitionRequest, v1.PartitionResponse](
			httpClient,
			baseURL+DebugGetPartitionProcedure,
			connect.WithSchema(debugMethods.ByName("GetPartition")),
			connect.WithClientOptions(opts...),
		),
		getPartitionStatus: connect.NewClient[v1.PartitionRequest, v1.PartitionStatusResponse](
			httpClient,
			baseURL+DebugGetPartitionStatusProcedure,
			connect.WithSchema(debugMethods.ByName("GetPartitionStatus")),
			connect.WithClientOptions(opts...),
		),
		getQueueItem: connect.NewClient[v1.QueueItemRequest, v1.QueueItemResponse](
			httpClient,
			baseURL+DebugGetQueueItemProcedure,
			connect.WithSchema(debugMethods.ByName("GetQueueItem")),
			connect.WithClientOptions(opts...),
		),
	}
}

// debugClient implements DebugClient.
type debugClient struct {
	getPartition       *connect.Client[v1.PartitionRequest, v1.PartitionResponse]
	getPartitionStatus *connect.Client[v1.PartitionRequest, v1.PartitionStatusResponse]
	getQueueItem       *connect.Client[v1.QueueItemRequest, v1.QueueItemResponse]
}

// GetPartition calls debug.v1.Debug.GetPartition.
func (c *debugClient) GetPartition(ctx context.Context, req *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionResponse], error) {
	return c.getPartition.CallUnary(ctx, req)
}

// GetPartitionStatus calls debug.v1.Debug.GetPartitionStatus.
func (c *debugClient) GetPartitionStatus(ctx context.Context, req *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionStatusResponse], error) {
	return c.getPartitionStatus.CallUnary(ctx, req)
}

// GetQueueItem calls debug.v1.Debug.GetQueueItem.
func (c *debugClient) GetQueueItem(ctx context.Context, req *connect.Request[v1.QueueItemRequest]) (*connect.Response[v1.QueueItemResponse], error) {
	return c.getQueueItem.CallUnary(ctx, req)
}

// DebugHandler is an implementation of the debug.v1.Debug service.
type DebugHandler interface {
	// GetPartition retrieves the partition data from the database
	GetPartition(context.Context, *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionResponse], error)
	// GetPartition retrieves additional status of the partition from the queue
	// directly
	GetPartitionStatus(context.Context, *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionStatusResponse], error)
	// GetQueueItem retrieves the queue item object from the queue
	GetQueueItem(context.Context, *connect.Request[v1.QueueItemRequest]) (*connect.Response[v1.QueueItemResponse], error)
}

// NewDebugHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDebugHandler(svc DebugHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	debugMethods := v1.File_debug_v1_service_proto.Services().ByName("Debug").Methods()
	debugGetPartitionHandler := connect.NewUnaryHandler(
		DebugGetPartitionProcedure,
		svc.GetPartition,
		connect.WithSchema(debugMethods.ByName("GetPartition")),
		connect.WithHandlerOptions(opts...),
	)
	debugGetPartitionStatusHandler := connect.NewUnaryHandler(
		DebugGetPartitionStatusProcedure,
		svc.GetPartitionStatus,
		connect.WithSchema(debugMethods.ByName("GetPartitionStatus")),
		connect.WithHandlerOptions(opts...),
	)
	debugGetQueueItemHandler := connect.NewUnaryHandler(
		DebugGetQueueItemProcedure,
		svc.GetQueueItem,
		connect.WithSchema(debugMethods.ByName("GetQueueItem")),
		connect.WithHandlerOptions(opts...),
	)
	return "/debug.v1.Debug/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DebugGetPartitionProcedure:
			debugGetPartitionHandler.ServeHTTP(w, r)
		case DebugGetPartitionStatusProcedure:
			debugGetPartitionStatusHandler.ServeHTTP(w, r)
		case DebugGetQueueItemProcedure:
			debugGetQueueItemHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDebugHandler returns CodeUnimplemented from all methods.
type UnimplementedDebugHandler struct{}

func (UnimplementedDebugHandler) GetPartition(context.Context, *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("debug.v1.Debug.GetPartition is not implemented"))
}

func (UnimplementedDebugHandler) GetPartitionStatus(context.Context, *connect.Request[v1.PartitionRequest]) (*connect.Response[v1.PartitionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("debug.v1.Debug.GetPartitionStatus is not implemented"))
}

func (UnimplementedDebugHandler) GetQueueItem(context.Context, *connect.Request[v1.QueueItemRequest]) (*connect.Response[v1.QueueItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("debug.v1.Debug.GetQueueItem is not implemented"))
}
