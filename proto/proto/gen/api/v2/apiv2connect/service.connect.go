// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/service.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/inngest/inngest/proto/gen/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// V2Name is the fully-qualified name of the V2 service.
	V2Name = "api.v2.V2"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// V2HealthProcedure is the fully-qualified name of the V2's Health RPC.
	V2HealthProcedure = "/api.v2.V2/Health"
)

// V2Client is a client for the api.v2.V2 service.
type V2Client interface {
	Health(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error)
}

// NewV2Client constructs a client for the api.v2.V2 service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewV2Client(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) V2Client {
	baseURL = strings.TrimRight(baseURL, "/")
	v2Methods := v2.File_api_v2_service_proto.Services().ByName("V2").Methods()
	return &v2Client{
		health: connect.NewClient[v2.HealthRequest, v2.HealthResponse](
			httpClient,
			baseURL+V2HealthProcedure,
			connect.WithSchema(v2Methods.ByName("Health")),
			connect.WithClientOptions(opts...),
		),
	}
}

// v2Client implements V2Client.
type v2Client struct {
	health *connect.Client[v2.HealthRequest, v2.HealthResponse]
}

// Health calls api.v2.V2.Health.
func (c *v2Client) Health(ctx context.Context, req *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// V2Handler is an implementation of the api.v2.V2 service.
type V2Handler interface {
	Health(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error)
}

// NewV2Handler builds an HTTP handler from the service implementation. It returns the path on which
// to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewV2Handler(svc V2Handler, opts ...connect.HandlerOption) (string, http.Handler) {
	v2Methods := v2.File_api_v2_service_proto.Services().ByName("V2").Methods()
	v2HealthHandler := connect.NewUnaryHandler(
		V2HealthProcedure,
		svc.Health,
		connect.WithSchema(v2Methods.ByName("Health")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.V2/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case V2HealthProcedure:
			v2HealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedV2Handler returns CodeUnimplemented from all methods.
type UnimplementedV2Handler struct{}

func (UnimplementedV2Handler) Health(context.Context, *connect.Request[v2.HealthRequest]) (*connect.Response[v2.HealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.V2.Health is not implemented"))
}
